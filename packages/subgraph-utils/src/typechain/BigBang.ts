/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type RebaseStruct = { elastic: BigNumberish; base: BigNumberish };

export type RebaseStructOutput = [elastic: bigint, base: bigint] & {
  elastic: bigint;
  base: bigint;
};

export interface BigBangInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "_asset"
      | "_assetId"
      | "_collateral"
      | "_collateralId"
      | "_collateralizationRate"
      | "_conservator"
      | "_exchangeRate"
      | "_leverageExecutor"
      | "_liquidationBonusAmount"
      | "_liquidationCollateralizationRate"
      | "_liquidationMultiplier"
      | "_maxLiquidationSlippage"
      | "_maxLiquidatorReward"
      | "_minLiquidatorReward"
      | "_oracle"
      | "_oracleData"
      | "_pauseOptions"
      | "_pearlmit"
      | "_penrose"
      | "_protocolFee"
      | "_rateTimestamp"
      | "_rateValidDuration"
      | "_totalBorrow"
      | "_totalBorrowCap"
      | "_totalCollateralShare"
      | "_userBorrowPart"
      | "_userCollateralShare"
      | "_yieldBox"
      | "accrue"
      | "accrueInfo"
      | "allowance"
      | "allowanceBorrow"
      | "approve"
      | "approveBorrow"
      | "assetOracle"
      | "assetOracleData"
      | "balanceOf"
      | "borrowModule"
      | "collateralModule"
      | "computeClosingFactor"
      | "computeLiquidatorReward"
      | "computeOpenInterestMintable"
      | "computeTVLInfo"
      | "debtMinted"
      | "debtRateAgainstEthMarket"
      | "eip712Domain"
      | "execute"
      | "getDebtRate"
      | "getTotalDebt"
      | "init"
      | "isMainMarket"
      | "leverageModule"
      | "liquidationModule"
      | "maxDebtRate"
      | "maxMintFee"
      | "maxMintFeeStart"
      | "minDebtRate"
      | "minMintFee"
      | "minMintFeeStart"
      | "nonces"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "permit"
      | "permitBorrow"
      | "refreshPenroseFees"
      | "renounceOwnership"
      | "rescueEth"
      | "setAssetOracle"
      | "setBigBangConfig"
      | "setLeverageExecutor"
      | "setLiquidationMaxSlippage"
      | "setMarketConfig"
      | "setMinAndMaxMintFee"
      | "setMinAndMaxMintRange"
      | "supportsInterface"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "updateExchangeRate"
      | "updatePause"
      | "updatePauseAll"
      | "viewOpenInterest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalBorrow"
      | "AssetOracleDataUpdated"
      | "AssetOracleUpdated"
      | "ConservatorUpdated"
      | "DebtRateAgainstEthUpdated"
      | "EIP712DomainChanged"
      | "ExchangeRateDurationUpdated"
      | "LeverageExecutorSet"
      | "Liquidated"
      | "LiquidationMaxSlippageUpdated"
      | "LiquidationMultiplierUpdated"
      | "LogAccrue"
      | "LogAddCollateral"
      | "LogBorrow"
      | "LogBorrowCapUpdated"
      | "LogExchangeRate"
      | "LogRemoveCollateral"
      | "LogRepay"
      | "MaxDebtRateUpdated"
      | "MinDebtRateUpdated"
      | "OracleDataUpdated"
      | "OracleUpdated"
      | "OwnershipTransferred"
      | "PausedUpdated"
      | "Transfer"
      | "UpdateMinMaxMintFee"
      | "UpdateMinMaxMintRange"
      | "ValueUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "_assetId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_conservator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_leverageExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationBonusAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationCollateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxLiquidationSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_minLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_pauseOptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_pearlmit", values?: undefined): string;
  encodeFunctionData(functionFragment: "_penrose", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rateValidDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalBorrowCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalCollateralShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_userBorrowPart",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_userCollateralShare",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "_yieldBox", values?: undefined): string;
  encodeFunctionData(functionFragment: "accrue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrueInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceBorrow",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBorrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeClosingFactor",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidatorReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeOpenInterestMintable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeTVLInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtRateAgainstEthMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish[], BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isMainMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverageModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintFeeStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minMintFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minMintFeeStart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBorrow",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshPenroseFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEth",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetOracle",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBigBangConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverageExecutor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationMaxSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketConfig",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAndMaxMintFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAndMaxMintRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePauseAll",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "viewOpenInterest",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_assetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_collateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateralId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_conservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_leverageExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationBonusAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationCollateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxLiquidationSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_minLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_oracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_pauseOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_pearlmit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_penrose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rateValidDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_userBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_userCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_yieldBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrueInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClosingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeOpenInterestMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTVLInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtMinted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtRateAgainstEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMainMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMintFeeStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minMintFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minMintFeeStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshPenroseFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBigBangConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationMaxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAndMaxMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAndMaxMintRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePauseAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewOpenInterest",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalBorrowEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetOracleDataUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetOracleUpdatedEvent {
  export type InputTuple = [oldVal: AddressLike, newVal: AddressLike];
  export type OutputTuple = [oldVal: string, newVal: string];
  export interface OutputObject {
    oldVal: string;
    newVal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConservatorUpdatedEvent {
  export type InputTuple = [old: AddressLike, _new: AddressLike];
  export type OutputTuple = [old: string, _new: string];
  export interface OutputObject {
    old: string;
    _new: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebtRateAgainstEthUpdatedEvent {
  export type InputTuple = [oldVal: BigNumberish, newVal: BigNumberish];
  export type OutputTuple = [oldVal: bigint, newVal: bigint];
  export interface OutputObject {
    oldVal: bigint;
    newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeRateDurationUpdatedEvent {
  export type InputTuple = [_oldVal: BigNumberish, _newVal: BigNumberish];
  export type OutputTuple = [_oldVal: bigint, _newVal: bigint];
  export interface OutputObject {
    _oldVal: bigint;
    _newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeverageExecutorSetEvent {
  export type InputTuple = [oldVal: AddressLike, newVal: AddressLike];
  export type OutputTuple = [oldVal: string, newVal: string];
  export interface OutputObject {
    oldVal: string;
    newVal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    users: AddressLike[],
    liquidatorReward: BigNumberish,
    protocolReward: BigNumberish,
    repayedAmount: BigNumberish,
    collateralShareRemoved: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    users: string[],
    liquidatorReward: bigint,
    protocolReward: bigint,
    repayedAmount: bigint,
    collateralShareRemoved: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    users: string[];
    liquidatorReward: bigint;
    protocolReward: bigint;
    repayedAmount: bigint;
    collateralShareRemoved: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationMaxSlippageUpdatedEvent {
  export type InputTuple = [oldVal: BigNumberish, newVal: BigNumberish];
  export type OutputTuple = [oldVal: bigint, newVal: bigint];
  export interface OutputObject {
    oldVal: bigint;
    newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationMultiplierUpdatedEvent {
  export type InputTuple = [oldVal: BigNumberish, newVal: BigNumberish];
  export type OutputTuple = [oldVal: bigint, newVal: bigint];
  export interface OutputObject {
    oldVal: bigint;
    newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAccrueEvent {
  export type InputTuple = [accruedAmount: BigNumberish, rate: BigNumberish];
  export type OutputTuple = [accruedAmount: bigint, rate: bigint];
  export interface OutputObject {
    accruedAmount: bigint;
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddCollateralEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    share: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, share: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBorrowEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    feeAmount: BigNumberish,
    part: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    feeAmount: bigint,
    part: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    feeAmount: bigint;
    part: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBorrowCapUpdatedEvent {
  export type InputTuple = [_oldVal: BigNumberish, _newVal: BigNumberish];
  export type OutputTuple = [_oldVal: bigint, _newVal: bigint];
  export interface OutputObject {
    _oldVal: bigint;
    _newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogExchangeRateEvent {
  export type InputTuple = [rate: BigNumberish];
  export type OutputTuple = [rate: bigint];
  export interface OutputObject {
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRemoveCollateralEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    share: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, share: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRepayEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    part: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    part: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    part: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxDebtRateUpdatedEvent {
  export type InputTuple = [oldVal: BigNumberish, newVal: BigNumberish];
  export type OutputTuple = [oldVal: bigint, newVal: bigint];
  export interface OutputObject {
    oldVal: bigint;
    newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinDebtRateUpdatedEvent {
  export type InputTuple = [oldVal: BigNumberish, newVal: BigNumberish];
  export type OutputTuple = [oldVal: bigint, newVal: bigint];
  export interface OutputObject {
    oldVal: bigint;
    newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleDataUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [newAddr: AddressLike];
  export type OutputTuple = [newAddr: string];
  export interface OutputObject {
    newAddr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedUpdatedEvent {
  export type InputTuple = [
    _type: BigNumberish,
    oldState: boolean,
    newState: boolean
  ];
  export type OutputTuple = [
    _type: bigint,
    oldState: boolean,
    newState: boolean
  ];
  export interface OutputObject {
    _type: bigint;
    oldState: boolean;
    newState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinMaxMintFeeEvent {
  export type InputTuple = [
    oldMin: BigNumberish,
    newMin: BigNumberish,
    oldMax: BigNumberish,
    newMax: BigNumberish
  ];
  export type OutputTuple = [
    oldMin: bigint,
    newMin: bigint,
    oldMax: bigint,
    newMax: bigint
  ];
  export interface OutputObject {
    oldMin: bigint;
    newMin: bigint;
    oldMax: bigint;
    newMax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMinMaxMintRangeEvent {
  export type InputTuple = [
    oldMin: BigNumberish,
    newMin: BigNumberish,
    oldMax: BigNumberish,
    newMax: BigNumberish
  ];
  export type OutputTuple = [
    oldMin: bigint,
    newMin: bigint,
    oldMax: bigint,
    newMax: bigint
  ];
  export interface OutputObject {
    oldMin: bigint;
    newMin: bigint;
    oldMax: bigint;
    newMax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValueUpdatedEvent {
  export type InputTuple = [valType: BigNumberish, _newVal: BigNumberish];
  export type OutputTuple = [valType: bigint, _newVal: bigint];
  export interface OutputObject {
    valType: bigint;
    _newVal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BigBang extends BaseContract {
  connect(runner?: ContractRunner | null): BigBang;
  waitForDeployment(): Promise<this>;

  interface: BigBangInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  _asset: TypedContractMethod<[], [string], "view">;

  _assetId: TypedContractMethod<[], [bigint], "view">;

  _collateral: TypedContractMethod<[], [string], "view">;

  _collateralId: TypedContractMethod<[], [bigint], "view">;

  _collateralizationRate: TypedContractMethod<[], [bigint], "view">;

  _conservator: TypedContractMethod<[], [string], "view">;

  _exchangeRate: TypedContractMethod<[], [bigint], "view">;

  _leverageExecutor: TypedContractMethod<[], [string], "view">;

  _liquidationBonusAmount: TypedContractMethod<[], [bigint], "view">;

  _liquidationCollateralizationRate: TypedContractMethod<[], [bigint], "view">;

  _liquidationMultiplier: TypedContractMethod<[], [bigint], "view">;

  _maxLiquidationSlippage: TypedContractMethod<[], [bigint], "view">;

  _maxLiquidatorReward: TypedContractMethod<[], [bigint], "view">;

  _minLiquidatorReward: TypedContractMethod<[], [bigint], "view">;

  _oracle: TypedContractMethod<[], [string], "view">;

  _oracleData: TypedContractMethod<[], [string], "view">;

  _pauseOptions: TypedContractMethod<
    [_pauseProp: BigNumberish],
    [boolean],
    "view"
  >;

  _pearlmit: TypedContractMethod<[], [string], "view">;

  _penrose: TypedContractMethod<[], [string], "view">;

  _protocolFee: TypedContractMethod<[], [bigint], "view">;

  _rateTimestamp: TypedContractMethod<[], [bigint], "view">;

  _rateValidDuration: TypedContractMethod<[], [bigint], "view">;

  _totalBorrow: TypedContractMethod<[], [RebaseStructOutput], "view">;

  _totalBorrowCap: TypedContractMethod<[], [bigint], "view">;

  _totalCollateralShare: TypedContractMethod<[], [bigint], "view">;

  _userBorrowPart: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  _userCollateralShare: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  _yieldBox: TypedContractMethod<[], [string], "view">;

  accrue: TypedContractMethod<[], [void], "nonpayable">;

  accrueInfo: TypedContractMethod<
    [],
    [[bigint, bigint] & { debtRate: bigint; lastAccrued: bigint }],
    "view"
  >;

  allowance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  allowanceBorrow: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveBorrow: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  assetOracle: TypedContractMethod<[], [string], "view">;

  assetOracleData: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  borrowModule: TypedContractMethod<[], [string], "view">;

  collateralModule: TypedContractMethod<[], [string], "view">;

  computeClosingFactor: TypedContractMethod<
    [
      borrowPart: BigNumberish,
      collateralPartInAsset: BigNumberish,
      ratesPrecision: BigNumberish
    ],
    [bigint],
    "view"
  >;

  computeLiquidatorReward: TypedContractMethod<
    [user: AddressLike, _exchangeRate: BigNumberish],
    [bigint],
    "view"
  >;

  computeOpenInterestMintable: TypedContractMethod<[], [bigint], "nonpayable">;

  computeTVLInfo: TypedContractMethod<
    [user: AddressLike, _exchangeRate: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amountToSolvency: bigint;
        minTVL: bigint;
        maxTVL: bigint;
      }
    ],
    "view"
  >;

  debtMinted: TypedContractMethod<[], [bigint], "view">;

  debtRateAgainstEthMarket: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  execute: TypedContractMethod<
    [modules: BigNumberish[], calls: BytesLike[], revertOnFail: boolean],
    [[boolean[], string[]] & { successes: boolean[]; results: string[] }],
    "nonpayable"
  >;

  getDebtRate: TypedContractMethod<[], [bigint], "view">;

  getTotalDebt: TypedContractMethod<[], [bigint], "view">;

  init: TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;

  isMainMarket: TypedContractMethod<[], [boolean], "view">;

  leverageModule: TypedContractMethod<[], [string], "view">;

  liquidationModule: TypedContractMethod<[], [string], "view">;

  maxDebtRate: TypedContractMethod<[], [bigint], "view">;

  maxMintFee: TypedContractMethod<[], [bigint], "view">;

  maxMintFeeStart: TypedContractMethod<[], [bigint], "view">;

  minDebtRate: TypedContractMethod<[], [bigint], "view">;

  minMintFee: TypedContractMethod<[], [bigint], "view">;

  minMintFeeStart: TypedContractMethod<[], [bigint], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  permitBorrow: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  refreshPenroseFees: TypedContractMethod<[], [bigint], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rescueEth: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetOracle: TypedContractMethod<
    [_oracle: AddressLike, _oracleData: BytesLike],
    [void],
    "nonpayable"
  >;

  setBigBangConfig: TypedContractMethod<
    [
      _minDebtRate: BigNumberish,
      _maxDebtRate: BigNumberish,
      _debtRateAgainstEthMarket: BigNumberish,
      _liquidationMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setLeverageExecutor: TypedContractMethod<
    [_executor: AddressLike],
    [void],
    "nonpayable"
  >;

  setLiquidationMaxSlippage: TypedContractMethod<
    [_val: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketConfig: TypedContractMethod<
    [
      _oracle: AddressLike,
      _oracleData: BytesLike,
      _conservator: AddressLike,
      _protocolFee: BigNumberish,
      _liquidationBonusAmount: BigNumberish,
      _minLiquidatorReward: BigNumberish,
      _maxLiquidatorReward: BigNumberish,
      _totalBorrowCap: BigNumberish,
      _collateralizationRate: BigNumberish,
      _liquidationCollateralizationRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setMinAndMaxMintFee: TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinAndMaxMintRange: TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateExchangeRate: TypedContractMethod<
    [],
    [[boolean, bigint] & { updated: boolean; rate: bigint }],
    "nonpayable"
  >;

  updatePause: TypedContractMethod<
    [_type: BigNumberish, val: boolean],
    [void],
    "nonpayable"
  >;

  updatePauseAll: TypedContractMethod<[val: boolean], [void], "nonpayable">;

  viewOpenInterest: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_assetId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_collateral"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_collateralId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_collateralizationRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_conservator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_exchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_leverageExecutor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_liquidationBonusAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_liquidationCollateralizationRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_liquidationMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_maxLiquidationSlippage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_maxLiquidatorReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_minLiquidatorReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_oracleData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_pauseOptions"
  ): TypedContractMethod<[_pauseProp: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "_pearlmit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_penrose"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_protocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_rateTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_rateValidDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_totalBorrow"
  ): TypedContractMethod<[], [RebaseStructOutput], "view">;
  getFunction(
    nameOrSignature: "_totalBorrowCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_totalCollateralShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_userBorrowPart"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_userCollateralShare"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_yieldBox"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accrue"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "accrueInfo"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { debtRate: bigint; lastAccrued: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowanceBorrow"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveBorrow"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assetOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetOracleData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeClosingFactor"
  ): TypedContractMethod<
    [
      borrowPart: BigNumberish,
      collateralPartInAsset: BigNumberish,
      ratesPrecision: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeLiquidatorReward"
  ): TypedContractMethod<
    [user: AddressLike, _exchangeRate: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeOpenInterestMintable"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "computeTVLInfo"
  ): TypedContractMethod<
    [user: AddressLike, _exchangeRate: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amountToSolvency: bigint;
        minTVL: bigint;
        maxTVL: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "debtMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "debtRateAgainstEthMarket"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [modules: BigNumberish[], calls: BytesLike[], revertOnFail: boolean],
    [[boolean[], string[]] & { successes: boolean[]; results: string[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDebtRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[initData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isMainMarket"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "leverageModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidationModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxDebtRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMintFeeStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDebtRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minMintFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minMintFeeStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permitBorrow"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refreshPenroseFees"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueEth"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetOracle"
  ): TypedContractMethod<
    [_oracle: AddressLike, _oracleData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBigBangConfig"
  ): TypedContractMethod<
    [
      _minDebtRate: BigNumberish,
      _maxDebtRate: BigNumberish,
      _debtRateAgainstEthMarket: BigNumberish,
      _liquidationMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLeverageExecutor"
  ): TypedContractMethod<[_executor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidationMaxSlippage"
  ): TypedContractMethod<[_val: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketConfig"
  ): TypedContractMethod<
    [
      _oracle: AddressLike,
      _oracleData: BytesLike,
      _conservator: AddressLike,
      _protocolFee: BigNumberish,
      _liquidationBonusAmount: BigNumberish,
      _minLiquidatorReward: BigNumberish,
      _maxLiquidatorReward: BigNumberish,
      _totalBorrowCap: BigNumberish,
      _collateralizationRate: BigNumberish,
      _liquidationCollateralizationRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinAndMaxMintFee"
  ): TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinAndMaxMintRange"
  ): TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExchangeRate"
  ): TypedContractMethod<
    [],
    [[boolean, bigint] & { updated: boolean; rate: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePause"
  ): TypedContractMethod<
    [_type: BigNumberish, val: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePauseAll"
  ): TypedContractMethod<[val: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewOpenInterest"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalBorrow"
  ): TypedContractEvent<
    ApprovalBorrowEvent.InputTuple,
    ApprovalBorrowEvent.OutputTuple,
    ApprovalBorrowEvent.OutputObject
  >;
  getEvent(
    key: "AssetOracleDataUpdated"
  ): TypedContractEvent<
    AssetOracleDataUpdatedEvent.InputTuple,
    AssetOracleDataUpdatedEvent.OutputTuple,
    AssetOracleDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetOracleUpdated"
  ): TypedContractEvent<
    AssetOracleUpdatedEvent.InputTuple,
    AssetOracleUpdatedEvent.OutputTuple,
    AssetOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConservatorUpdated"
  ): TypedContractEvent<
    ConservatorUpdatedEvent.InputTuple,
    ConservatorUpdatedEvent.OutputTuple,
    ConservatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DebtRateAgainstEthUpdated"
  ): TypedContractEvent<
    DebtRateAgainstEthUpdatedEvent.InputTuple,
    DebtRateAgainstEthUpdatedEvent.OutputTuple,
    DebtRateAgainstEthUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExchangeRateDurationUpdated"
  ): TypedContractEvent<
    ExchangeRateDurationUpdatedEvent.InputTuple,
    ExchangeRateDurationUpdatedEvent.OutputTuple,
    ExchangeRateDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LeverageExecutorSet"
  ): TypedContractEvent<
    LeverageExecutorSetEvent.InputTuple,
    LeverageExecutorSetEvent.OutputTuple,
    LeverageExecutorSetEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationMaxSlippageUpdated"
  ): TypedContractEvent<
    LiquidationMaxSlippageUpdatedEvent.InputTuple,
    LiquidationMaxSlippageUpdatedEvent.OutputTuple,
    LiquidationMaxSlippageUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationMultiplierUpdated"
  ): TypedContractEvent<
    LiquidationMultiplierUpdatedEvent.InputTuple,
    LiquidationMultiplierUpdatedEvent.OutputTuple,
    LiquidationMultiplierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LogAccrue"
  ): TypedContractEvent<
    LogAccrueEvent.InputTuple,
    LogAccrueEvent.OutputTuple,
    LogAccrueEvent.OutputObject
  >;
  getEvent(
    key: "LogAddCollateral"
  ): TypedContractEvent<
    LogAddCollateralEvent.InputTuple,
    LogAddCollateralEvent.OutputTuple,
    LogAddCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogBorrow"
  ): TypedContractEvent<
    LogBorrowEvent.InputTuple,
    LogBorrowEvent.OutputTuple,
    LogBorrowEvent.OutputObject
  >;
  getEvent(
    key: "LogBorrowCapUpdated"
  ): TypedContractEvent<
    LogBorrowCapUpdatedEvent.InputTuple,
    LogBorrowCapUpdatedEvent.OutputTuple,
    LogBorrowCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LogExchangeRate"
  ): TypedContractEvent<
    LogExchangeRateEvent.InputTuple,
    LogExchangeRateEvent.OutputTuple,
    LogExchangeRateEvent.OutputObject
  >;
  getEvent(
    key: "LogRemoveCollateral"
  ): TypedContractEvent<
    LogRemoveCollateralEvent.InputTuple,
    LogRemoveCollateralEvent.OutputTuple,
    LogRemoveCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogRepay"
  ): TypedContractEvent<
    LogRepayEvent.InputTuple,
    LogRepayEvent.OutputTuple,
    LogRepayEvent.OutputObject
  >;
  getEvent(
    key: "MaxDebtRateUpdated"
  ): TypedContractEvent<
    MaxDebtRateUpdatedEvent.InputTuple,
    MaxDebtRateUpdatedEvent.OutputTuple,
    MaxDebtRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinDebtRateUpdated"
  ): TypedContractEvent<
    MinDebtRateUpdatedEvent.InputTuple,
    MinDebtRateUpdatedEvent.OutputTuple,
    MinDebtRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleDataUpdated"
  ): TypedContractEvent<
    OracleDataUpdatedEvent.InputTuple,
    OracleDataUpdatedEvent.OutputTuple,
    OracleDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PausedUpdated"
  ): TypedContractEvent<
    PausedUpdatedEvent.InputTuple,
    PausedUpdatedEvent.OutputTuple,
    PausedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinMaxMintFee"
  ): TypedContractEvent<
    UpdateMinMaxMintFeeEvent.InputTuple,
    UpdateMinMaxMintFeeEvent.OutputTuple,
    UpdateMinMaxMintFeeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMinMaxMintRange"
  ): TypedContractEvent<
    UpdateMinMaxMintRangeEvent.InputTuple,
    UpdateMinMaxMintRangeEvent.OutputTuple,
    UpdateMinMaxMintRangeEvent.OutputObject
  >;
  getEvent(
    key: "ValueUpdated"
  ): TypedContractEvent<
    ValueUpdatedEvent.InputTuple,
    ValueUpdatedEvent.OutputTuple,
    ValueUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalBorrow(address,address,uint256)": TypedContractEvent<
      ApprovalBorrowEvent.InputTuple,
      ApprovalBorrowEvent.OutputTuple,
      ApprovalBorrowEvent.OutputObject
    >;
    ApprovalBorrow: TypedContractEvent<
      ApprovalBorrowEvent.InputTuple,
      ApprovalBorrowEvent.OutputTuple,
      ApprovalBorrowEvent.OutputObject
    >;

    "AssetOracleDataUpdated()": TypedContractEvent<
      AssetOracleDataUpdatedEvent.InputTuple,
      AssetOracleDataUpdatedEvent.OutputTuple,
      AssetOracleDataUpdatedEvent.OutputObject
    >;
    AssetOracleDataUpdated: TypedContractEvent<
      AssetOracleDataUpdatedEvent.InputTuple,
      AssetOracleDataUpdatedEvent.OutputTuple,
      AssetOracleDataUpdatedEvent.OutputObject
    >;

    "AssetOracleUpdated(address,address)": TypedContractEvent<
      AssetOracleUpdatedEvent.InputTuple,
      AssetOracleUpdatedEvent.OutputTuple,
      AssetOracleUpdatedEvent.OutputObject
    >;
    AssetOracleUpdated: TypedContractEvent<
      AssetOracleUpdatedEvent.InputTuple,
      AssetOracleUpdatedEvent.OutputTuple,
      AssetOracleUpdatedEvent.OutputObject
    >;

    "ConservatorUpdated(address,address)": TypedContractEvent<
      ConservatorUpdatedEvent.InputTuple,
      ConservatorUpdatedEvent.OutputTuple,
      ConservatorUpdatedEvent.OutputObject
    >;
    ConservatorUpdated: TypedContractEvent<
      ConservatorUpdatedEvent.InputTuple,
      ConservatorUpdatedEvent.OutputTuple,
      ConservatorUpdatedEvent.OutputObject
    >;

    "DebtRateAgainstEthUpdated(uint256,uint256)": TypedContractEvent<
      DebtRateAgainstEthUpdatedEvent.InputTuple,
      DebtRateAgainstEthUpdatedEvent.OutputTuple,
      DebtRateAgainstEthUpdatedEvent.OutputObject
    >;
    DebtRateAgainstEthUpdated: TypedContractEvent<
      DebtRateAgainstEthUpdatedEvent.InputTuple,
      DebtRateAgainstEthUpdatedEvent.OutputTuple,
      DebtRateAgainstEthUpdatedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ExchangeRateDurationUpdated(uint256,uint256)": TypedContractEvent<
      ExchangeRateDurationUpdatedEvent.InputTuple,
      ExchangeRateDurationUpdatedEvent.OutputTuple,
      ExchangeRateDurationUpdatedEvent.OutputObject
    >;
    ExchangeRateDurationUpdated: TypedContractEvent<
      ExchangeRateDurationUpdatedEvent.InputTuple,
      ExchangeRateDurationUpdatedEvent.OutputTuple,
      ExchangeRateDurationUpdatedEvent.OutputObject
    >;

    "LeverageExecutorSet(address,address)": TypedContractEvent<
      LeverageExecutorSetEvent.InputTuple,
      LeverageExecutorSetEvent.OutputTuple,
      LeverageExecutorSetEvent.OutputObject
    >;
    LeverageExecutorSet: TypedContractEvent<
      LeverageExecutorSetEvent.InputTuple,
      LeverageExecutorSetEvent.OutputTuple,
      LeverageExecutorSetEvent.OutputObject
    >;

    "Liquidated(address,address[],uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "LiquidationMaxSlippageUpdated(uint256,uint256)": TypedContractEvent<
      LiquidationMaxSlippageUpdatedEvent.InputTuple,
      LiquidationMaxSlippageUpdatedEvent.OutputTuple,
      LiquidationMaxSlippageUpdatedEvent.OutputObject
    >;
    LiquidationMaxSlippageUpdated: TypedContractEvent<
      LiquidationMaxSlippageUpdatedEvent.InputTuple,
      LiquidationMaxSlippageUpdatedEvent.OutputTuple,
      LiquidationMaxSlippageUpdatedEvent.OutputObject
    >;

    "LiquidationMultiplierUpdated(uint256,uint256)": TypedContractEvent<
      LiquidationMultiplierUpdatedEvent.InputTuple,
      LiquidationMultiplierUpdatedEvent.OutputTuple,
      LiquidationMultiplierUpdatedEvent.OutputObject
    >;
    LiquidationMultiplierUpdated: TypedContractEvent<
      LiquidationMultiplierUpdatedEvent.InputTuple,
      LiquidationMultiplierUpdatedEvent.OutputTuple,
      LiquidationMultiplierUpdatedEvent.OutputObject
    >;

    "LogAccrue(uint256,uint64)": TypedContractEvent<
      LogAccrueEvent.InputTuple,
      LogAccrueEvent.OutputTuple,
      LogAccrueEvent.OutputObject
    >;
    LogAccrue: TypedContractEvent<
      LogAccrueEvent.InputTuple,
      LogAccrueEvent.OutputTuple,
      LogAccrueEvent.OutputObject
    >;

    "LogAddCollateral(address,address,uint256)": TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;
    LogAddCollateral: TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;

    "LogBorrow(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;
    LogBorrow: TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;

    "LogBorrowCapUpdated(uint256,uint256)": TypedContractEvent<
      LogBorrowCapUpdatedEvent.InputTuple,
      LogBorrowCapUpdatedEvent.OutputTuple,
      LogBorrowCapUpdatedEvent.OutputObject
    >;
    LogBorrowCapUpdated: TypedContractEvent<
      LogBorrowCapUpdatedEvent.InputTuple,
      LogBorrowCapUpdatedEvent.OutputTuple,
      LogBorrowCapUpdatedEvent.OutputObject
    >;

    "LogExchangeRate(uint256)": TypedContractEvent<
      LogExchangeRateEvent.InputTuple,
      LogExchangeRateEvent.OutputTuple,
      LogExchangeRateEvent.OutputObject
    >;
    LogExchangeRate: TypedContractEvent<
      LogExchangeRateEvent.InputTuple,
      LogExchangeRateEvent.OutputTuple,
      LogExchangeRateEvent.OutputObject
    >;

    "LogRemoveCollateral(address,address,uint256)": TypedContractEvent<
      LogRemoveCollateralEvent.InputTuple,
      LogRemoveCollateralEvent.OutputTuple,
      LogRemoveCollateralEvent.OutputObject
    >;
    LogRemoveCollateral: TypedContractEvent<
      LogRemoveCollateralEvent.InputTuple,
      LogRemoveCollateralEvent.OutputTuple,
      LogRemoveCollateralEvent.OutputObject
    >;

    "LogRepay(address,address,uint256,uint256)": TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;
    LogRepay: TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;

    "MaxDebtRateUpdated(uint256,uint256)": TypedContractEvent<
      MaxDebtRateUpdatedEvent.InputTuple,
      MaxDebtRateUpdatedEvent.OutputTuple,
      MaxDebtRateUpdatedEvent.OutputObject
    >;
    MaxDebtRateUpdated: TypedContractEvent<
      MaxDebtRateUpdatedEvent.InputTuple,
      MaxDebtRateUpdatedEvent.OutputTuple,
      MaxDebtRateUpdatedEvent.OutputObject
    >;

    "MinDebtRateUpdated(uint256,uint256)": TypedContractEvent<
      MinDebtRateUpdatedEvent.InputTuple,
      MinDebtRateUpdatedEvent.OutputTuple,
      MinDebtRateUpdatedEvent.OutputObject
    >;
    MinDebtRateUpdated: TypedContractEvent<
      MinDebtRateUpdatedEvent.InputTuple,
      MinDebtRateUpdatedEvent.OutputTuple,
      MinDebtRateUpdatedEvent.OutputObject
    >;

    "OracleDataUpdated()": TypedContractEvent<
      OracleDataUpdatedEvent.InputTuple,
      OracleDataUpdatedEvent.OutputTuple,
      OracleDataUpdatedEvent.OutputObject
    >;
    OracleDataUpdated: TypedContractEvent<
      OracleDataUpdatedEvent.InputTuple,
      OracleDataUpdatedEvent.OutputTuple,
      OracleDataUpdatedEvent.OutputObject
    >;

    "OracleUpdated(address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PausedUpdated(uint8,bool,bool)": TypedContractEvent<
      PausedUpdatedEvent.InputTuple,
      PausedUpdatedEvent.OutputTuple,
      PausedUpdatedEvent.OutputObject
    >;
    PausedUpdated: TypedContractEvent<
      PausedUpdatedEvent.InputTuple,
      PausedUpdatedEvent.OutputTuple,
      PausedUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateMinMaxMintFee(uint256,uint256,uint256,uint256)": TypedContractEvent<
      UpdateMinMaxMintFeeEvent.InputTuple,
      UpdateMinMaxMintFeeEvent.OutputTuple,
      UpdateMinMaxMintFeeEvent.OutputObject
    >;
    UpdateMinMaxMintFee: TypedContractEvent<
      UpdateMinMaxMintFeeEvent.InputTuple,
      UpdateMinMaxMintFeeEvent.OutputTuple,
      UpdateMinMaxMintFeeEvent.OutputObject
    >;

    "UpdateMinMaxMintRange(uint256,uint256,uint256,uint256)": TypedContractEvent<
      UpdateMinMaxMintRangeEvent.InputTuple,
      UpdateMinMaxMintRangeEvent.OutputTuple,
      UpdateMinMaxMintRangeEvent.OutputObject
    >;
    UpdateMinMaxMintRange: TypedContractEvent<
      UpdateMinMaxMintRangeEvent.InputTuple,
      UpdateMinMaxMintRangeEvent.OutputTuple,
      UpdateMinMaxMintRangeEvent.OutputObject
    >;

    "ValueUpdated(uint256,uint256)": TypedContractEvent<
      ValueUpdatedEvent.InputTuple,
      ValueUpdatedEvent.OutputTuple,
      ValueUpdatedEvent.OutputObject
    >;
    ValueUpdated: TypedContractEvent<
      ValueUpdatedEvent.InputTuple,
      ValueUpdatedEvent.OutputTuple,
      ValueUpdatedEvent.OutputObject
    >;
  };
}
