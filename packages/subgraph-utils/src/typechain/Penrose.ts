/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPenrose {
  export type MasterContractStruct = {
    location: AddressLike;
    risk: BigNumberish;
  };

  export type MasterContractStructOutput = [location: string, risk: bigint] & {
    location: string;
    risk: bigint;
  };
}

export interface PenroseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBigBang"
      | "addOriginsMarket"
      | "addSingularity"
      | "allBigBangMarkets"
      | "allOriginsMarkets"
      | "bigBangEthDebtRate"
      | "bigBangEthMarket"
      | "bigBangMarkets"
      | "bigBangMasterContractLength"
      | "bigbangMasterContracts"
      | "clonesOf"
      | "clonesOfCount"
      | "cluster"
      | "conservator"
      | "deploy"
      | "executeMarketFn"
      | "getAllMasterContractClones"
      | "isBigBangMasterContractRegistered"
      | "isMarketRegistered"
      | "isOriginRegistered"
      | "isSingularityMasterContractRegistered"
      | "mainAssetId"
      | "mainToken"
      | "masterContractOf"
      | "mintOpenInterestDebt"
      | "owner"
      | "paused"
      | "pearlmit"
      | "reAccrueBigBangMarkets"
      | "registerBigBang"
      | "registerBigBangMasterContract"
      | "registerSingularity"
      | "registerSingularityMasterContract"
      | "renounceOwnership"
      | "setBigBangEthMarket"
      | "setBigBangEthMarketDebtRate"
      | "setCluster"
      | "setConservator"
      | "setPearlmit"
      | "setUsdoToken"
      | "singularityMarkets"
      | "singularityMasterContractLength"
      | "singularityMasterContracts"
      | "tapAssetId"
      | "tapToken"
      | "transferOwnership"
      | "updatePause"
      | "usdoAssetId"
      | "usdoToken"
      | "viewTotalDebt"
      | "withdrawAllMarketFees"
      | "yieldBox"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BigBangEthMarketDebtRateUpdated"
      | "BigBangEthMarketUpdated"
      | "ClusterSet"
      | "ConservatorUpdated"
      | "LogDeploy"
      | "LogTwTapFeesDeposit"
      | "OwnershipTransferred"
      | "PausedUpdated"
      | "PearlmitUpdated"
      | "ProtocolWithdrawal"
      | "ReaccruedMarkets"
      | "RegisterBigBang"
      | "RegisterBigBangMasterContract"
      | "RegisterOrigins"
      | "RegisterSingularity"
      | "RegisterSingularityMasterContract"
      | "TotalUsdoDebt"
      | "UsdoTokenUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBigBang",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addOriginsMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSingularity",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allBigBangMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allOriginsMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangEthDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangEthMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMasterContractLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigbangMasterContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOfCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cluster", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "conservator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMarketFn",
    values: [AddressLike[], BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMasterContractClones",
    values: [IPenrose.MasterContractStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isBigBangMasterContractRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOriginRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSingularityMasterContractRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mainAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mainToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterContractOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOpenInterestDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pearlmit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reAccrueBigBangMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerBigBang",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBigBangMasterContract",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSingularity",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSingularityMasterContract",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBigBangEthMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBigBangEthMarketDebtRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCluster",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConservator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPearlmit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdoToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMasterContractLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMasterContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tapAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tapToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "usdoAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "viewTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllMarketFees",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addBigBang", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOriginsMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSingularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allBigBangMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allOriginsMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangEthDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMasterContractLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigbangMasterContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clonesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clonesOfCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cluster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMarketFn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMasterContractClones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBigBangMasterContractRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOriginRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSingularityMasterContractRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOpenInterestDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pearlmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reAccrueBigBangMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBigBang",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBigBangMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSingularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSingularityMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBigBangEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBigBangEthMarketDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCluster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMasterContractLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMasterContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tapAssetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdoAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
}

export namespace BigBangEthMarketDebtRateUpdatedEvent {
  export type InputTuple = [_oldRate: BigNumberish, _newRate: BigNumberish];
  export type OutputTuple = [_oldRate: bigint, _newRate: bigint];
  export interface OutputObject {
    _oldRate: bigint;
    _newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BigBangEthMarketUpdatedEvent {
  export type InputTuple = [_oldAddress: AddressLike, _newAddress: AddressLike];
  export type OutputTuple = [_oldAddress: string, _newAddress: string];
  export interface OutputObject {
    _oldAddress: string;
    _newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterSetEvent {
  export type InputTuple = [old: AddressLike, _new: AddressLike];
  export type OutputTuple = [old: string, _new: string];
  export interface OutputObject {
    old: string;
    _new: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConservatorUpdatedEvent {
  export type InputTuple = [old: AddressLike, _new: AddressLike];
  export type OutputTuple = [old: string, _new: string];
  export interface OutputObject {
    old: string;
    _new: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDeployEvent {
  export type InputTuple = [
    masterContract: AddressLike,
    data: BytesLike,
    cloneAddress: AddressLike
  ];
  export type OutputTuple = [
    masterContract: string,
    data: string,
    cloneAddress: string
  ];
  export interface OutputObject {
    masterContract: string;
    data: string;
    cloneAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogTwTapFeesDepositEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedUpdatedEvent {
  export type InputTuple = [oldState: boolean, newState: boolean];
  export type OutputTuple = [oldState: boolean, newState: boolean];
  export interface OutputObject {
    oldState: boolean;
    newState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PearlmitUpdatedEvent {
  export type InputTuple = [oldPearlmit: AddressLike, newPearlmit: AddressLike];
  export type OutputTuple = [oldPearlmit: string, newPearlmit: string];
  export interface OutputObject {
    oldPearlmit: string;
    newPearlmit: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolWithdrawalEvent {
  export type InputTuple = [markets: AddressLike[], timestamp: BigNumberish];
  export type OutputTuple = [markets: string[], timestamp: bigint];
  export interface OutputObject {
    markets: string[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReaccruedMarketsEvent {
  export type InputTuple = [mainMarketIncluded: boolean];
  export type OutputTuple = [mainMarketIncluded: boolean];
  export interface OutputObject {
    mainMarketIncluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterBigBangEvent {
  export type InputTuple = [location: AddressLike, masterContract: AddressLike];
  export type OutputTuple = [location: string, masterContract: string];
  export interface OutputObject {
    location: string;
    masterContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterBigBangMasterContractEvent {
  export type InputTuple = [location: AddressLike, risk: BigNumberish];
  export type OutputTuple = [location: string, risk: bigint];
  export interface OutputObject {
    location: string;
    risk: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterOriginsEvent {
  export type InputTuple = [location: AddressLike];
  export type OutputTuple = [location: string];
  export interface OutputObject {
    location: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterSingularityEvent {
  export type InputTuple = [location: AddressLike, masterContract: AddressLike];
  export type OutputTuple = [location: string, masterContract: string];
  export interface OutputObject {
    location: string;
    masterContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterSingularityMasterContractEvent {
  export type InputTuple = [location: AddressLike, risk: BigNumberish];
  export type OutputTuple = [location: string, risk: bigint];
  export interface OutputObject {
    location: string;
    risk: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TotalUsdoDebtEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsdoTokenUpdatedEvent {
  export type InputTuple = [usdoToken: AddressLike, assetId: BigNumberish];
  export type OutputTuple = [usdoToken: string, assetId: bigint];
  export interface OutputObject {
    usdoToken: string;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Penrose extends BaseContract {
  connect(runner?: ContractRunner | null): Penrose;
  waitForDeployment(): Promise<this>;

  interface: PenroseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBigBang: TypedContractMethod<
    [mc: AddressLike, _contract: AddressLike],
    [void],
    "nonpayable"
  >;

  addOriginsMarket: TypedContractMethod<
    [_contract: AddressLike],
    [void],
    "nonpayable"
  >;

  addSingularity: TypedContractMethod<
    [mc: AddressLike, _contract: AddressLike],
    [void],
    "nonpayable"
  >;

  allBigBangMarkets: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  allOriginsMarkets: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  bigBangEthDebtRate: TypedContractMethod<[], [bigint], "view">;

  bigBangEthMarket: TypedContractMethod<[], [string], "view">;

  bigBangMarkets: TypedContractMethod<[], [string[]], "view">;

  bigBangMasterContractLength: TypedContractMethod<[], [bigint], "view">;

  bigbangMasterContracts: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { location: string; risk: bigint }],
    "view"
  >;

  clonesOf: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  clonesOfCount: TypedContractMethod<
    [masterContract: AddressLike],
    [bigint],
    "view"
  >;

  cluster: TypedContractMethod<[], [string], "view">;

  conservator: TypedContractMethod<[], [string], "view">;

  deploy: TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;

  executeMarketFn: TypedContractMethod<
    [mc: AddressLike[], data: BytesLike[], forceSuccess: boolean],
    [[boolean[], string[]] & { success: boolean[]; result: string[] }],
    "nonpayable"
  >;

  getAllMasterContractClones: TypedContractMethod<
    [array: IPenrose.MasterContractStruct[]],
    [string[]],
    "view"
  >;

  isBigBangMasterContractRegistered: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isMarketRegistered: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isOriginRegistered: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isSingularityMasterContractRegistered: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  mainAssetId: TypedContractMethod<[], [bigint], "view">;

  mainToken: TypedContractMethod<[], [string], "view">;

  masterContractOf: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  mintOpenInterestDebt: TypedContractMethod<
    [twTap: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pearlmit: TypedContractMethod<[], [string], "view">;

  reAccrueBigBangMarkets: TypedContractMethod<[], [void], "nonpayable">;

  registerBigBang: TypedContractMethod<
    [mc: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;

  registerBigBangMasterContract: TypedContractMethod<
    [mcAddress: AddressLike, contractType_: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerSingularity: TypedContractMethod<
    [mc: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;

  registerSingularityMasterContract: TypedContractMethod<
    [mcAddress: AddressLike, contractType_: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBigBangEthMarket: TypedContractMethod<
    [_market: AddressLike],
    [void],
    "nonpayable"
  >;

  setBigBangEthMarketDebtRate: TypedContractMethod<
    [_rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCluster: TypedContractMethod<
    [_newCluster: AddressLike],
    [void],
    "nonpayable"
  >;

  setConservator: TypedContractMethod<
    [_conservator: AddressLike],
    [void],
    "nonpayable"
  >;

  setPearlmit: TypedContractMethod<
    [_pearlmit: AddressLike],
    [void],
    "nonpayable"
  >;

  setUsdoToken: TypedContractMethod<
    [_usdoToken: AddressLike, _usdoAssetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  singularityMarkets: TypedContractMethod<[], [string[]], "view">;

  singularityMasterContractLength: TypedContractMethod<[], [bigint], "view">;

  singularityMasterContracts: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { location: string; risk: bigint }],
    "view"
  >;

  tapAssetId: TypedContractMethod<[], [bigint], "view">;

  tapToken: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePause: TypedContractMethod<[val: boolean], [void], "nonpayable">;

  usdoAssetId: TypedContractMethod<[], [bigint], "view">;

  usdoToken: TypedContractMethod<[], [string], "view">;

  viewTotalDebt: TypedContractMethod<[], [bigint], "view">;

  withdrawAllMarketFees: TypedContractMethod<
    [markets_: AddressLike[], twTap: AddressLike],
    [void],
    "nonpayable"
  >;

  yieldBox: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBigBang"
  ): TypedContractMethod<
    [mc: AddressLike, _contract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOriginsMarket"
  ): TypedContractMethod<[_contract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSingularity"
  ): TypedContractMethod<
    [mc: AddressLike, _contract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allBigBangMarkets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allOriginsMarkets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "bigBangEthDebtRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bigBangEthMarket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bigBangMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "bigBangMasterContractLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bigbangMasterContracts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { location: string; risk: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "clonesOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "clonesOfCount"
  ): TypedContractMethod<[masterContract: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "cluster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "conservator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [masterContract: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeMarketFn"
  ): TypedContractMethod<
    [mc: AddressLike[], data: BytesLike[], forceSuccess: boolean],
    [[boolean[], string[]] & { success: boolean[]; result: string[] }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllMasterContractClones"
  ): TypedContractMethod<
    [array: IPenrose.MasterContractStruct[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBigBangMasterContractRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMarketRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOriginRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSingularityMasterContractRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mainAssetId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mainToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "masterContractOf"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "mintOpenInterestDebt"
  ): TypedContractMethod<[twTap: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pearlmit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reAccrueBigBangMarkets"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerBigBang"
  ): TypedContractMethod<
    [mc: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerBigBangMasterContract"
  ): TypedContractMethod<
    [mcAddress: AddressLike, contractType_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSingularity"
  ): TypedContractMethod<
    [mc: AddressLike, data: BytesLike, useCreate2: boolean],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerSingularityMasterContract"
  ): TypedContractMethod<
    [mcAddress: AddressLike, contractType_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBigBangEthMarket"
  ): TypedContractMethod<[_market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBigBangEthMarketDebtRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCluster"
  ): TypedContractMethod<[_newCluster: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConservator"
  ): TypedContractMethod<[_conservator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPearlmit"
  ): TypedContractMethod<[_pearlmit: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUsdoToken"
  ): TypedContractMethod<
    [_usdoToken: AddressLike, _usdoAssetId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "singularityMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "singularityMasterContractLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "singularityMasterContracts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { location: string; risk: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tapAssetId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tapToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePause"
  ): TypedContractMethod<[val: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdoAssetId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdoToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "viewTotalDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawAllMarketFees"
  ): TypedContractMethod<
    [markets_: AddressLike[], twTap: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "yieldBox"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BigBangEthMarketDebtRateUpdated"
  ): TypedContractEvent<
    BigBangEthMarketDebtRateUpdatedEvent.InputTuple,
    BigBangEthMarketDebtRateUpdatedEvent.OutputTuple,
    BigBangEthMarketDebtRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BigBangEthMarketUpdated"
  ): TypedContractEvent<
    BigBangEthMarketUpdatedEvent.InputTuple,
    BigBangEthMarketUpdatedEvent.OutputTuple,
    BigBangEthMarketUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterSet"
  ): TypedContractEvent<
    ClusterSetEvent.InputTuple,
    ClusterSetEvent.OutputTuple,
    ClusterSetEvent.OutputObject
  >;
  getEvent(
    key: "ConservatorUpdated"
  ): TypedContractEvent<
    ConservatorUpdatedEvent.InputTuple,
    ConservatorUpdatedEvent.OutputTuple,
    ConservatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LogDeploy"
  ): TypedContractEvent<
    LogDeployEvent.InputTuple,
    LogDeployEvent.OutputTuple,
    LogDeployEvent.OutputObject
  >;
  getEvent(
    key: "LogTwTapFeesDeposit"
  ): TypedContractEvent<
    LogTwTapFeesDepositEvent.InputTuple,
    LogTwTapFeesDepositEvent.OutputTuple,
    LogTwTapFeesDepositEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PausedUpdated"
  ): TypedContractEvent<
    PausedUpdatedEvent.InputTuple,
    PausedUpdatedEvent.OutputTuple,
    PausedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PearlmitUpdated"
  ): TypedContractEvent<
    PearlmitUpdatedEvent.InputTuple,
    PearlmitUpdatedEvent.OutputTuple,
    PearlmitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolWithdrawal"
  ): TypedContractEvent<
    ProtocolWithdrawalEvent.InputTuple,
    ProtocolWithdrawalEvent.OutputTuple,
    ProtocolWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "ReaccruedMarkets"
  ): TypedContractEvent<
    ReaccruedMarketsEvent.InputTuple,
    ReaccruedMarketsEvent.OutputTuple,
    ReaccruedMarketsEvent.OutputObject
  >;
  getEvent(
    key: "RegisterBigBang"
  ): TypedContractEvent<
    RegisterBigBangEvent.InputTuple,
    RegisterBigBangEvent.OutputTuple,
    RegisterBigBangEvent.OutputObject
  >;
  getEvent(
    key: "RegisterBigBangMasterContract"
  ): TypedContractEvent<
    RegisterBigBangMasterContractEvent.InputTuple,
    RegisterBigBangMasterContractEvent.OutputTuple,
    RegisterBigBangMasterContractEvent.OutputObject
  >;
  getEvent(
    key: "RegisterOrigins"
  ): TypedContractEvent<
    RegisterOriginsEvent.InputTuple,
    RegisterOriginsEvent.OutputTuple,
    RegisterOriginsEvent.OutputObject
  >;
  getEvent(
    key: "RegisterSingularity"
  ): TypedContractEvent<
    RegisterSingularityEvent.InputTuple,
    RegisterSingularityEvent.OutputTuple,
    RegisterSingularityEvent.OutputObject
  >;
  getEvent(
    key: "RegisterSingularityMasterContract"
  ): TypedContractEvent<
    RegisterSingularityMasterContractEvent.InputTuple,
    RegisterSingularityMasterContractEvent.OutputTuple,
    RegisterSingularityMasterContractEvent.OutputObject
  >;
  getEvent(
    key: "TotalUsdoDebt"
  ): TypedContractEvent<
    TotalUsdoDebtEvent.InputTuple,
    TotalUsdoDebtEvent.OutputTuple,
    TotalUsdoDebtEvent.OutputObject
  >;
  getEvent(
    key: "UsdoTokenUpdated"
  ): TypedContractEvent<
    UsdoTokenUpdatedEvent.InputTuple,
    UsdoTokenUpdatedEvent.OutputTuple,
    UsdoTokenUpdatedEvent.OutputObject
  >;

  filters: {
    "BigBangEthMarketDebtRateUpdated(uint256,uint256)": TypedContractEvent<
      BigBangEthMarketDebtRateUpdatedEvent.InputTuple,
      BigBangEthMarketDebtRateUpdatedEvent.OutputTuple,
      BigBangEthMarketDebtRateUpdatedEvent.OutputObject
    >;
    BigBangEthMarketDebtRateUpdated: TypedContractEvent<
      BigBangEthMarketDebtRateUpdatedEvent.InputTuple,
      BigBangEthMarketDebtRateUpdatedEvent.OutputTuple,
      BigBangEthMarketDebtRateUpdatedEvent.OutputObject
    >;

    "BigBangEthMarketUpdated(address,address)": TypedContractEvent<
      BigBangEthMarketUpdatedEvent.InputTuple,
      BigBangEthMarketUpdatedEvent.OutputTuple,
      BigBangEthMarketUpdatedEvent.OutputObject
    >;
    BigBangEthMarketUpdated: TypedContractEvent<
      BigBangEthMarketUpdatedEvent.InputTuple,
      BigBangEthMarketUpdatedEvent.OutputTuple,
      BigBangEthMarketUpdatedEvent.OutputObject
    >;

    "ClusterSet(address,address)": TypedContractEvent<
      ClusterSetEvent.InputTuple,
      ClusterSetEvent.OutputTuple,
      ClusterSetEvent.OutputObject
    >;
    ClusterSet: TypedContractEvent<
      ClusterSetEvent.InputTuple,
      ClusterSetEvent.OutputTuple,
      ClusterSetEvent.OutputObject
    >;

    "ConservatorUpdated(address,address)": TypedContractEvent<
      ConservatorUpdatedEvent.InputTuple,
      ConservatorUpdatedEvent.OutputTuple,
      ConservatorUpdatedEvent.OutputObject
    >;
    ConservatorUpdated: TypedContractEvent<
      ConservatorUpdatedEvent.InputTuple,
      ConservatorUpdatedEvent.OutputTuple,
      ConservatorUpdatedEvent.OutputObject
    >;

    "LogDeploy(address,bytes,address)": TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;
    LogDeploy: TypedContractEvent<
      LogDeployEvent.InputTuple,
      LogDeployEvent.OutputTuple,
      LogDeployEvent.OutputObject
    >;

    "LogTwTapFeesDeposit(uint256)": TypedContractEvent<
      LogTwTapFeesDepositEvent.InputTuple,
      LogTwTapFeesDepositEvent.OutputTuple,
      LogTwTapFeesDepositEvent.OutputObject
    >;
    LogTwTapFeesDeposit: TypedContractEvent<
      LogTwTapFeesDepositEvent.InputTuple,
      LogTwTapFeesDepositEvent.OutputTuple,
      LogTwTapFeesDepositEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PausedUpdated(bool,bool)": TypedContractEvent<
      PausedUpdatedEvent.InputTuple,
      PausedUpdatedEvent.OutputTuple,
      PausedUpdatedEvent.OutputObject
    >;
    PausedUpdated: TypedContractEvent<
      PausedUpdatedEvent.InputTuple,
      PausedUpdatedEvent.OutputTuple,
      PausedUpdatedEvent.OutputObject
    >;

    "PearlmitUpdated(address,address)": TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;
    PearlmitUpdated: TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;

    "ProtocolWithdrawal(address[],uint256)": TypedContractEvent<
      ProtocolWithdrawalEvent.InputTuple,
      ProtocolWithdrawalEvent.OutputTuple,
      ProtocolWithdrawalEvent.OutputObject
    >;
    ProtocolWithdrawal: TypedContractEvent<
      ProtocolWithdrawalEvent.InputTuple,
      ProtocolWithdrawalEvent.OutputTuple,
      ProtocolWithdrawalEvent.OutputObject
    >;

    "ReaccruedMarkets(bool)": TypedContractEvent<
      ReaccruedMarketsEvent.InputTuple,
      ReaccruedMarketsEvent.OutputTuple,
      ReaccruedMarketsEvent.OutputObject
    >;
    ReaccruedMarkets: TypedContractEvent<
      ReaccruedMarketsEvent.InputTuple,
      ReaccruedMarketsEvent.OutputTuple,
      ReaccruedMarketsEvent.OutputObject
    >;

    "RegisterBigBang(address,address)": TypedContractEvent<
      RegisterBigBangEvent.InputTuple,
      RegisterBigBangEvent.OutputTuple,
      RegisterBigBangEvent.OutputObject
    >;
    RegisterBigBang: TypedContractEvent<
      RegisterBigBangEvent.InputTuple,
      RegisterBigBangEvent.OutputTuple,
      RegisterBigBangEvent.OutputObject
    >;

    "RegisterBigBangMasterContract(address,uint8)": TypedContractEvent<
      RegisterBigBangMasterContractEvent.InputTuple,
      RegisterBigBangMasterContractEvent.OutputTuple,
      RegisterBigBangMasterContractEvent.OutputObject
    >;
    RegisterBigBangMasterContract: TypedContractEvent<
      RegisterBigBangMasterContractEvent.InputTuple,
      RegisterBigBangMasterContractEvent.OutputTuple,
      RegisterBigBangMasterContractEvent.OutputObject
    >;

    "RegisterOrigins(address)": TypedContractEvent<
      RegisterOriginsEvent.InputTuple,
      RegisterOriginsEvent.OutputTuple,
      RegisterOriginsEvent.OutputObject
    >;
    RegisterOrigins: TypedContractEvent<
      RegisterOriginsEvent.InputTuple,
      RegisterOriginsEvent.OutputTuple,
      RegisterOriginsEvent.OutputObject
    >;

    "RegisterSingularity(address,address)": TypedContractEvent<
      RegisterSingularityEvent.InputTuple,
      RegisterSingularityEvent.OutputTuple,
      RegisterSingularityEvent.OutputObject
    >;
    RegisterSingularity: TypedContractEvent<
      RegisterSingularityEvent.InputTuple,
      RegisterSingularityEvent.OutputTuple,
      RegisterSingularityEvent.OutputObject
    >;

    "RegisterSingularityMasterContract(address,uint8)": TypedContractEvent<
      RegisterSingularityMasterContractEvent.InputTuple,
      RegisterSingularityMasterContractEvent.OutputTuple,
      RegisterSingularityMasterContractEvent.OutputObject
    >;
    RegisterSingularityMasterContract: TypedContractEvent<
      RegisterSingularityMasterContractEvent.InputTuple,
      RegisterSingularityMasterContractEvent.OutputTuple,
      RegisterSingularityMasterContractEvent.OutputObject
    >;

    "TotalUsdoDebt(uint256)": TypedContractEvent<
      TotalUsdoDebtEvent.InputTuple,
      TotalUsdoDebtEvent.OutputTuple,
      TotalUsdoDebtEvent.OutputObject
    >;
    TotalUsdoDebt: TypedContractEvent<
      TotalUsdoDebtEvent.InputTuple,
      TotalUsdoDebtEvent.OutputTuple,
      TotalUsdoDebtEvent.OutputObject
    >;

    "UsdoTokenUpdated(address,uint256)": TypedContractEvent<
      UsdoTokenUpdatedEvent.InputTuple,
      UsdoTokenUpdatedEvent.OutputTuple,
      UsdoTokenUpdatedEvent.OutputObject
    >;
    UsdoTokenUpdated: TypedContractEvent<
      UsdoTokenUpdatedEvent.InputTuple,
      UsdoTokenUpdatedEvent.OutputTuple,
      UsdoTokenUpdatedEvent.OutputObject
    >;
  };
}
