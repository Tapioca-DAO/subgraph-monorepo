/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TOBInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EPOCH_DURATION"
      | "MIN_WEIGHT_FACTOR"
      | "collectPaymentTokens"
      | "emissionsStartTime"
      | "epoch"
      | "epochTAPValuation"
      | "exerciseOption"
      | "exitPosition"
      | "getCurrentWeek"
      | "getOTCDealDetails"
      | "init"
      | "netDepositedForEpoch"
      | "newEpoch"
      | "oTAP"
      | "oTAPCalls"
      | "onERC721Received"
      | "owner"
      | "participants"
      | "participate"
      | "paused"
      | "paymentTokenBeneficiary"
      | "paymentTokens"
      | "pearlmit"
      | "renounceOwnership"
      | "setMinWeightFactor"
      | "setPause"
      | "setPaymentToken"
      | "setPaymentTokenBeneficiary"
      | "setPearlmit"
      | "setTapOracle"
      | "setVirtualTotalAmount"
      | "singularityGauges"
      | "tOLP"
      | "tapOFT"
      | "tapOracle"
      | "tapOracleData"
      | "timestampToWeek"
      | "transferOwnership"
      | "twAML"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AMLDivergence"
      | "ExerciseOption"
      | "ExitPosition"
      | "NewEpoch"
      | "OwnershipTransferred"
      | "Participate"
      | "Paused"
      | "PearlmitUpdated"
      | "SetPaymentToken"
      | "SetTapOracle"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WEIGHT_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectPaymentTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionsStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochTAPValuation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseOption",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOTCDealDetails",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "netDepositedForEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "newEpoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "oTAP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oTAPCalls",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentTokenBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pearlmit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWeightFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokenBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPearlmit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapOracle",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVirtualTotalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityGauges",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tOLP", values?: undefined): string;
  encodeFunctionData(functionFragment: "tapOFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "tapOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tapOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timestampToWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "twAML", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WEIGHT_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionsStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochTAPValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOTCDealDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "netDepositedForEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oTAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oTAPCalls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pearlmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWeightFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokenBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVirtualTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityGauges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tOLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapOFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tapOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampToWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twAML", data: BytesLike): Result;
}

export namespace AMLDivergenceEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    cumulative: BigNumberish,
    averageMagnitude: BigNumberish,
    totalParticipants: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    cumulative: bigint,
    averageMagnitude: bigint,
    totalParticipants: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    cumulative: bigint;
    averageMagnitude: bigint;
    totalParticipants: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExerciseOptionEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    to: AddressLike,
    paymentToken: AddressLike,
    otapTokenId: BigNumberish,
    tapAmount: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    to: string,
    paymentToken: string,
    otapTokenId: bigint,
    tapAmount: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    to: string;
    paymentToken: string;
    otapTokenId: bigint;
    tapAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitPositionEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    otapTokenId: BigNumberish,
    tolpTokenId: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    otapTokenId: bigint,
    tolpTokenId: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    otapTokenId: bigint;
    tolpTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewEpochEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    extractedTap: BigNumberish,
    epochTapValuation: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    extractedTap: bigint,
    epochTapValuation: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    extractedTap: bigint;
    epochTapValuation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipateEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    sglAssetId: BigNumberish,
    totalDeposited: BigNumberish,
    otapTokenId: BigNumberish,
    tolpTokenId: BigNumberish,
    discount: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    sglAssetId: bigint,
    totalDeposited: bigint,
    otapTokenId: bigint,
    tolpTokenId: bigint,
    discount: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    sglAssetId: bigint;
    totalDeposited: bigint;
    otapTokenId: bigint;
    tolpTokenId: bigint;
    discount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PearlmitUpdatedEvent {
  export type InputTuple = [oldPearlmit: AddressLike, newPearlmit: AddressLike];
  export type OutputTuple = [oldPearlmit: string, newPearlmit: string];
  export interface OutputObject {
    oldPearlmit: string;
    newPearlmit: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPaymentTokenEvent {
  export type InputTuple = [
    paymentToken: AddressLike,
    oracle: AddressLike,
    oracleData: BytesLike
  ];
  export type OutputTuple = [
    paymentToken: string,
    oracle: string,
    oracleData: string
  ];
  export interface OutputObject {
    paymentToken: string;
    oracle: string;
    oracleData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTapOracleEvent {
  export type InputTuple = [oracle: AddressLike, oracleData: BytesLike];
  export type OutputTuple = [oracle: string, oracleData: string];
  export interface OutputObject {
    oracle: string;
    oracleData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TOB extends BaseContract {
  connect(runner?: ContractRunner | null): TOB;
  waitForDeployment(): Promise<this>;

  interface: TOBInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EPOCH_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_WEIGHT_FACTOR: TypedContractMethod<[], [bigint], "view">;

  collectPaymentTokens: TypedContractMethod<
    [_paymentTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  emissionsStartTime: TypedContractMethod<[], [bigint], "view">;

  epoch: TypedContractMethod<[], [bigint], "view">;

  epochTAPValuation: TypedContractMethod<[], [bigint], "view">;

  exerciseOption: TypedContractMethod<
    [
      _oTAPTokenID: BigNumberish,
      _paymentToken: AddressLike,
      _tapAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  exitPosition: TypedContractMethod<
    [_oTAPTokenID: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCurrentWeek: TypedContractMethod<[], [bigint], "view">;

  getOTCDealDetails: TypedContractMethod<
    [
      _oTAPTokenID: BigNumberish,
      _paymentToken: AddressLike,
      _tapAmount: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        eligibleTapAmount: bigint;
        paymentTokenAmount: bigint;
        tapAmount: bigint;
      }
    ],
    "view"
  >;

  init: TypedContractMethod<[], [void], "nonpayable">;

  netDepositedForEpoch: TypedContractMethod<
    [epoch: BigNumberish, sglAssetID: BigNumberish],
    [bigint],
    "view"
  >;

  newEpoch: TypedContractMethod<[], [void], "nonpayable">;

  oTAP: TypedContractMethod<[], [string], "view">;

  oTAPCalls: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  participants: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, bigint] & {
        hasVotingPower: boolean;
        divergenceForce: boolean;
        averageMagnitude: bigint;
      }
    ],
    "view"
  >;

  participate: TypedContractMethod<
    [_tOLPTokenID: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  paymentTokenBeneficiary: TypedContractMethod<[], [string], "view">;

  paymentTokens: TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { oracle: string; oracleData: string }],
    "view"
  >;

  pearlmit: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMinWeightFactor: TypedContractMethod<
    [_minWeightFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[_pauseState: boolean], [void], "nonpayable">;

  setPaymentToken: TypedContractMethod<
    [_paymentToken: AddressLike, _oracle: AddressLike, _oracleData: BytesLike],
    [void],
    "nonpayable"
  >;

  setPaymentTokenBeneficiary: TypedContractMethod<
    [_paymentTokenBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  setPearlmit: TypedContractMethod<
    [_pearlmit: AddressLike],
    [void],
    "nonpayable"
  >;

  setTapOracle: TypedContractMethod<
    [_tapOracle: AddressLike, _tapOracleData: BytesLike],
    [void],
    "nonpayable"
  >;

  setVirtualTotalAmount: TypedContractMethod<
    [_virtualTotalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  singularityGauges: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  tOLP: TypedContractMethod<[], [string], "view">;

  tapOFT: TypedContractMethod<[], [string], "view">;

  tapOracle: TypedContractMethod<[], [string], "view">;

  tapOracleData: TypedContractMethod<[], [string], "view">;

  timestampToWeek: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  twAML: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        totalParticipants: bigint;
        averageMagnitude: bigint;
        totalDeposited: bigint;
        cumulative: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EPOCH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_WEIGHT_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectPaymentTokens"
  ): TypedContractMethod<[_paymentTokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emissionsStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochTAPValuation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exerciseOption"
  ): TypedContractMethod<
    [
      _oTAPTokenID: BigNumberish,
      _paymentToken: AddressLike,
      _tapAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitPosition"
  ): TypedContractMethod<[_oTAPTokenID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentWeek"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOTCDealDetails"
  ): TypedContractMethod<
    [
      _oTAPTokenID: BigNumberish,
      _paymentToken: AddressLike,
      _tapAmount: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        eligibleTapAmount: bigint;
        paymentTokenAmount: bigint;
        tapAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "netDepositedForEpoch"
  ): TypedContractMethod<
    [epoch: BigNumberish, sglAssetID: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "newEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "oTAP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oTAPCalls"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, bigint] & {
        hasVotingPower: boolean;
        divergenceForce: boolean;
        averageMagnitude: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "participate"
  ): TypedContractMethod<[_tOLPTokenID: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paymentTokenBeneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentTokens"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { oracle: string; oracleData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pearlmit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinWeightFactor"
  ): TypedContractMethod<
    [_minWeightFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[_pauseState: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaymentToken"
  ): TypedContractMethod<
    [_paymentToken: AddressLike, _oracle: AddressLike, _oracleData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPaymentTokenBeneficiary"
  ): TypedContractMethod<
    [_paymentTokenBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPearlmit"
  ): TypedContractMethod<[_pearlmit: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTapOracle"
  ): TypedContractMethod<
    [_tapOracle: AddressLike, _tapOracleData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVirtualTotalAmount"
  ): TypedContractMethod<
    [_virtualTotalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "singularityGauges"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tOLP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tapOFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tapOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tapOracleData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timestampToWeek"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twAML"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        totalParticipants: bigint;
        averageMagnitude: bigint;
        totalDeposited: bigint;
        cumulative: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AMLDivergence"
  ): TypedContractEvent<
    AMLDivergenceEvent.InputTuple,
    AMLDivergenceEvent.OutputTuple,
    AMLDivergenceEvent.OutputObject
  >;
  getEvent(
    key: "ExerciseOption"
  ): TypedContractEvent<
    ExerciseOptionEvent.InputTuple,
    ExerciseOptionEvent.OutputTuple,
    ExerciseOptionEvent.OutputObject
  >;
  getEvent(
    key: "ExitPosition"
  ): TypedContractEvent<
    ExitPositionEvent.InputTuple,
    ExitPositionEvent.OutputTuple,
    ExitPositionEvent.OutputObject
  >;
  getEvent(
    key: "NewEpoch"
  ): TypedContractEvent<
    NewEpochEvent.InputTuple,
    NewEpochEvent.OutputTuple,
    NewEpochEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Participate"
  ): TypedContractEvent<
    ParticipateEvent.InputTuple,
    ParticipateEvent.OutputTuple,
    ParticipateEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PearlmitUpdated"
  ): TypedContractEvent<
    PearlmitUpdatedEvent.InputTuple,
    PearlmitUpdatedEvent.OutputTuple,
    PearlmitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SetPaymentToken"
  ): TypedContractEvent<
    SetPaymentTokenEvent.InputTuple,
    SetPaymentTokenEvent.OutputTuple,
    SetPaymentTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetTapOracle"
  ): TypedContractEvent<
    SetTapOracleEvent.InputTuple,
    SetTapOracleEvent.OutputTuple,
    SetTapOracleEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AMLDivergence(uint256,uint256,uint256,uint256)": TypedContractEvent<
      AMLDivergenceEvent.InputTuple,
      AMLDivergenceEvent.OutputTuple,
      AMLDivergenceEvent.OutputObject
    >;
    AMLDivergence: TypedContractEvent<
      AMLDivergenceEvent.InputTuple,
      AMLDivergenceEvent.OutputTuple,
      AMLDivergenceEvent.OutputObject
    >;

    "ExerciseOption(uint256,address,address,uint256,uint256)": TypedContractEvent<
      ExerciseOptionEvent.InputTuple,
      ExerciseOptionEvent.OutputTuple,
      ExerciseOptionEvent.OutputObject
    >;
    ExerciseOption: TypedContractEvent<
      ExerciseOptionEvent.InputTuple,
      ExerciseOptionEvent.OutputTuple,
      ExerciseOptionEvent.OutputObject
    >;

    "ExitPosition(uint256,uint256,uint256)": TypedContractEvent<
      ExitPositionEvent.InputTuple,
      ExitPositionEvent.OutputTuple,
      ExitPositionEvent.OutputObject
    >;
    ExitPosition: TypedContractEvent<
      ExitPositionEvent.InputTuple,
      ExitPositionEvent.OutputTuple,
      ExitPositionEvent.OutputObject
    >;

    "NewEpoch(uint256,uint256,uint256)": TypedContractEvent<
      NewEpochEvent.InputTuple,
      NewEpochEvent.OutputTuple,
      NewEpochEvent.OutputObject
    >;
    NewEpoch: TypedContractEvent<
      NewEpochEvent.InputTuple,
      NewEpochEvent.OutputTuple,
      NewEpochEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Participate(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ParticipateEvent.InputTuple,
      ParticipateEvent.OutputTuple,
      ParticipateEvent.OutputObject
    >;
    Participate: TypedContractEvent<
      ParticipateEvent.InputTuple,
      ParticipateEvent.OutputTuple,
      ParticipateEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PearlmitUpdated(address,address)": TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;
    PearlmitUpdated: TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;

    "SetPaymentToken(address,address,bytes)": TypedContractEvent<
      SetPaymentTokenEvent.InputTuple,
      SetPaymentTokenEvent.OutputTuple,
      SetPaymentTokenEvent.OutputObject
    >;
    SetPaymentToken: TypedContractEvent<
      SetPaymentTokenEvent.InputTuple,
      SetPaymentTokenEvent.OutputTuple,
      SetPaymentTokenEvent.OutputObject
    >;

    "SetTapOracle(address,bytes)": TypedContractEvent<
      SetTapOracleEvent.InputTuple,
      SetTapOracleEvent.OutputTuple,
      SetTapOracleEvent.OutputObject
    >;
    SetTapOracle: TypedContractEvent<
      SetTapOracleEvent.InputTuple,
      SetTapOracleEvent.OutputTuple,
      SetTapOracleEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
