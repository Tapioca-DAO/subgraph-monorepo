/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type LockPositionStruct = {
  sglAssetID: BigNumberish;
  ybShares: BigNumberish;
  lockTime: BigNumberish;
  lockDuration: BigNumberish;
};

export type LockPositionStructOutput = [
  sglAssetID: bigint,
  ybShares: bigint,
  lockTime: bigint,
  lockDuration: bigint
] & {
  sglAssetID: bigint;
  ybShares: bigint;
  lockTime: bigint;
  lockDuration: bigint;
};

export type SingularityPoolStruct = {
  sglAssetID: BigNumberish;
  totalDeposited: BigNumberish;
  poolWeight: BigNumberish;
  rescue: boolean;
};

export type SingularityPoolStructOutput = [
  sglAssetID: bigint,
  totalDeposited: bigint,
  poolWeight: bigint,
  rescue: boolean
] & {
  sglAssetID: bigint;
  totalDeposited: bigint;
  poolWeight: bigint;
  rescue: boolean;
};

export interface TOLPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "EPOCH_DURATION"
      | "MAX_LOCK_DURATION"
      | "activateSGLPoolRescue"
      | "activeSingularities"
      | "approve"
      | "balanceOf"
      | "batch"
      | "eip712Domain"
      | "getApproved"
      | "getLock"
      | "getSingularities"
      | "getSingularityPools"
      | "getTotalPoolDeposited"
      | "isApprovedForAll"
      | "isApprovedOrOwner"
      | "lock"
      | "lockPositions"
      | "name"
      | "nonces"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "ownerOf"
      | "paused"
      | "pearlmit"
      | "permit"
      | "registerSingularity"
      | "renounceOwnership"
      | "requestSglPoolRescue"
      | "rescueCooldown"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setPause"
      | "setPearlmit"
      | "setRescueCooldown"
      | "setSGLPoolWeight"
      | "sglAssetIDToAddress"
      | "sglRescueRequest"
      | "singularities"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenCounter"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSingularityPoolWeights"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "unlock"
      | "unregisterSingularity"
      | "yieldBox"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivateSGLPoolRescue"
      | "Approval"
      | "ApprovalForAll"
      | "Burn"
      | "EIP712DomainChanged"
      | "Mint"
      | "OwnershipTransferred"
      | "Paused"
      | "PearlmitUpdated"
      | "RegisterSingularity"
      | "RequestSglPoolRescue"
      | "SetSGLPoolWeight"
      | "Transfer"
      | "Unpaused"
      | "UnregisterSingularity"
      | "UpdateTotalSingularityPoolWeights"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateSGLPoolRescue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activeSingularities",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSingularities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSingularityPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolDeposited",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedOrOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPositions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pearlmit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSingularity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestSglPoolRescue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPearlmit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRescueCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSGLPoolWeight",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sglAssetIDToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sglRescueRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "singularities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSingularityPoolWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterSingularity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateSGLPoolRescue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSingularities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSingularities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSingularityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pearlmit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSingularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSglPoolRescue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRescueCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSGLPoolWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sglAssetIDToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sglRescueRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSingularityPoolWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterSingularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
}

export namespace ActivateSGLPoolRescueEvent {
  export type InputTuple = [sglAssetId: BigNumberish, sglAddress: AddressLike];
  export type OutputTuple = [sglAssetId: bigint, sglAddress: string];
  export interface OutputObject {
    sglAssetId: bigint;
    sglAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    to: AddressLike,
    sglAssetId: BigNumberish,
    sglAddress: AddressLike,
    tolpTokenId: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    sglAssetId: bigint,
    sglAddress: string,
    tolpTokenId: bigint
  ];
  export interface OutputObject {
    to: string;
    sglAssetId: bigint;
    sglAddress: string;
    tolpTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    to: AddressLike,
    sglAssetId: BigNumberish,
    sglAddress: AddressLike,
    tolpTokenId: BigNumberish,
    lockDuration: BigNumberish,
    ybShares: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    sglAssetId: bigint,
    sglAddress: string,
    tolpTokenId: bigint,
    lockDuration: bigint,
    ybShares: bigint
  ];
  export interface OutputObject {
    to: string;
    sglAssetId: bigint;
    sglAddress: string;
    tolpTokenId: bigint;
    lockDuration: bigint;
    ybShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PearlmitUpdatedEvent {
  export type InputTuple = [oldPearlmit: AddressLike, newPearlmit: AddressLike];
  export type OutputTuple = [oldPearlmit: string, newPearlmit: string];
  export interface OutputObject {
    oldPearlmit: string;
    newPearlmit: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterSingularityEvent {
  export type InputTuple = [
    sglAssetId: BigNumberish,
    sglAddress: AddressLike,
    poolWeight: BigNumberish
  ];
  export type OutputTuple = [
    sglAssetId: bigint,
    sglAddress: string,
    poolWeight: bigint
  ];
  export interface OutputObject {
    sglAssetId: bigint;
    sglAddress: string;
    poolWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSglPoolRescueEvent {
  export type InputTuple = [sglAssetId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [sglAssetId: bigint, timestamp: bigint];
  export interface OutputObject {
    sglAssetId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSGLPoolWeightEvent {
  export type InputTuple = [
    sglAssetId: BigNumberish,
    sglAddress: AddressLike,
    poolWeight: BigNumberish
  ];
  export type OutputTuple = [
    sglAssetId: bigint,
    sglAddress: string,
    poolWeight: bigint
  ];
  export interface OutputObject {
    sglAssetId: bigint;
    sglAddress: string;
    poolWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnregisterSingularityEvent {
  export type InputTuple = [sglAssetId: BigNumberish, sglAddress: AddressLike];
  export type OutputTuple = [sglAssetId: bigint, sglAddress: string];
  export interface OutputObject {
    sglAssetId: bigint;
    sglAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTotalSingularityPoolWeightsEvent {
  export type InputTuple = [totalSingularityPoolWeights: BigNumberish];
  export type OutputTuple = [totalSingularityPoolWeights: bigint];
  export interface OutputObject {
    totalSingularityPoolWeights: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TOLP extends BaseContract {
  connect(runner?: ContractRunner | null): TOLP;
  waitForDeployment(): Promise<this>;

  interface: TOLPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  EPOCH_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_LOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  activateSGLPoolRescue: TypedContractMethod<
    [singularity: AddressLike],
    [void],
    "nonpayable"
  >;

  activeSingularities: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        sglAssetID: bigint;
        totalDeposited: bigint;
        poolWeight: bigint;
        rescue: boolean;
      }
    ],
    "view"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  batch: TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [void],
    "payable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getLock: TypedContractMethod<
    [_tokenId: BigNumberish],
    [LockPositionStructOutput],
    "view"
  >;

  getSingularities: TypedContractMethod<[], [bigint[]], "view">;

  getSingularityPools: TypedContractMethod<
    [],
    [SingularityPoolStructOutput[]],
    "view"
  >;

  getTotalPoolDeposited: TypedContractMethod<
    [_sglAssetId: BigNumberish],
    [[bigint, bigint] & { shares: bigint; amount: bigint }],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedOrOwner: TypedContractMethod<
    [_spender: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  lock: TypedContractMethod<
    [
      _to: AddressLike,
      _singularity: AddressLike,
      _lockDuration: BigNumberish,
      _ybShares: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  lockPositions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        sglAssetID: bigint;
        ybShares: bigint;
        lockTime: bigint;
        lockDuration: bigint;
      }
    ],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pearlmit: TypedContractMethod<[], [string], "view">;

  permit: TypedContractMethod<
    [
      spender: AddressLike,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registerSingularity: TypedContractMethod<
    [singularity: AddressLike, assetID: BigNumberish, weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestSglPoolRescue: TypedContractMethod<
    [_sglAssetID: BigNumberish],
    [void],
    "nonpayable"
  >;

  rescueCooldown: TypedContractMethod<[], [bigint], "view">;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[_pauseState: boolean], [void], "nonpayable">;

  setPearlmit: TypedContractMethod<
    [_pearlmit: AddressLike],
    [void],
    "nonpayable"
  >;

  setRescueCooldown: TypedContractMethod<
    [_rescueCooldown: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSGLPoolWeight: TypedContractMethod<
    [singularity: AddressLike, weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  sglAssetIDToAddress: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  sglRescueRequest: TypedContractMethod<
    [sglId: BigNumberish],
    [bigint],
    "view"
  >;

  singularities: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenCounter: TypedContractMethod<[], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSingularityPoolWeights: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlock: TypedContractMethod<
    [_tokenId: BigNumberish, _singularity: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterSingularity: TypedContractMethod<
    [singularity: AddressLike],
    [void],
    "nonpayable"
  >;

  yieldBox: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EPOCH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activateSGLPoolRescue"
  ): TypedContractMethod<[singularity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activeSingularities"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        sglAssetID: bigint;
        totalDeposited: bigint;
        poolWeight: bigint;
        rescue: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batch"
  ): TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLock"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [LockPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSingularities"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSingularityPools"
  ): TypedContractMethod<[], [SingularityPoolStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTotalPoolDeposited"
  ): TypedContractMethod<
    [_sglAssetId: BigNumberish],
    [[bigint, bigint] & { shares: bigint; amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedOrOwner"
  ): TypedContractMethod<
    [_spender: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _singularity: AddressLike,
      _lockDuration: BigNumberish,
      _ybShares: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockPositions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        sglAssetID: bigint;
        ybShares: bigint;
        lockTime: bigint;
        lockDuration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pearlmit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      spender: AddressLike,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSingularity"
  ): TypedContractMethod<
    [singularity: AddressLike, assetID: BigNumberish, weight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestSglPoolRescue"
  ): TypedContractMethod<[_sglAssetID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[_pauseState: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPearlmit"
  ): TypedContractMethod<[_pearlmit: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRescueCooldown"
  ): TypedContractMethod<[_rescueCooldown: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSGLPoolWeight"
  ): TypedContractMethod<
    [singularity: AddressLike, weight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sglAssetIDToAddress"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "sglRescueRequest"
  ): TypedContractMethod<[sglId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "singularities"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSingularityPoolWeights"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlock"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _singularity: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unregisterSingularity"
  ): TypedContractMethod<[singularity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "yieldBox"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ActivateSGLPoolRescue"
  ): TypedContractEvent<
    ActivateSGLPoolRescueEvent.InputTuple,
    ActivateSGLPoolRescueEvent.OutputTuple,
    ActivateSGLPoolRescueEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PearlmitUpdated"
  ): TypedContractEvent<
    PearlmitUpdatedEvent.InputTuple,
    PearlmitUpdatedEvent.OutputTuple,
    PearlmitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RegisterSingularity"
  ): TypedContractEvent<
    RegisterSingularityEvent.InputTuple,
    RegisterSingularityEvent.OutputTuple,
    RegisterSingularityEvent.OutputObject
  >;
  getEvent(
    key: "RequestSglPoolRescue"
  ): TypedContractEvent<
    RequestSglPoolRescueEvent.InputTuple,
    RequestSglPoolRescueEvent.OutputTuple,
    RequestSglPoolRescueEvent.OutputObject
  >;
  getEvent(
    key: "SetSGLPoolWeight"
  ): TypedContractEvent<
    SetSGLPoolWeightEvent.InputTuple,
    SetSGLPoolWeightEvent.OutputTuple,
    SetSGLPoolWeightEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UnregisterSingularity"
  ): TypedContractEvent<
    UnregisterSingularityEvent.InputTuple,
    UnregisterSingularityEvent.OutputTuple,
    UnregisterSingularityEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTotalSingularityPoolWeights"
  ): TypedContractEvent<
    UpdateTotalSingularityPoolWeightsEvent.InputTuple,
    UpdateTotalSingularityPoolWeightsEvent.OutputTuple,
    UpdateTotalSingularityPoolWeightsEvent.OutputObject
  >;

  filters: {
    "ActivateSGLPoolRescue(uint256,address)": TypedContractEvent<
      ActivateSGLPoolRescueEvent.InputTuple,
      ActivateSGLPoolRescueEvent.OutputTuple,
      ActivateSGLPoolRescueEvent.OutputObject
    >;
    ActivateSGLPoolRescue: TypedContractEvent<
      ActivateSGLPoolRescueEvent.InputTuple,
      ActivateSGLPoolRescueEvent.OutputTuple,
      ActivateSGLPoolRescueEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Burn(address,uint256,address,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Mint(address,uint256,address,uint256,uint128,uint128)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PearlmitUpdated(address,address)": TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;
    PearlmitUpdated: TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;

    "RegisterSingularity(uint256,address,uint256)": TypedContractEvent<
      RegisterSingularityEvent.InputTuple,
      RegisterSingularityEvent.OutputTuple,
      RegisterSingularityEvent.OutputObject
    >;
    RegisterSingularity: TypedContractEvent<
      RegisterSingularityEvent.InputTuple,
      RegisterSingularityEvent.OutputTuple,
      RegisterSingularityEvent.OutputObject
    >;

    "RequestSglPoolRescue(uint256,uint256)": TypedContractEvent<
      RequestSglPoolRescueEvent.InputTuple,
      RequestSglPoolRescueEvent.OutputTuple,
      RequestSglPoolRescueEvent.OutputObject
    >;
    RequestSglPoolRescue: TypedContractEvent<
      RequestSglPoolRescueEvent.InputTuple,
      RequestSglPoolRescueEvent.OutputTuple,
      RequestSglPoolRescueEvent.OutputObject
    >;

    "SetSGLPoolWeight(uint256,address,uint256)": TypedContractEvent<
      SetSGLPoolWeightEvent.InputTuple,
      SetSGLPoolWeightEvent.OutputTuple,
      SetSGLPoolWeightEvent.OutputObject
    >;
    SetSGLPoolWeight: TypedContractEvent<
      SetSGLPoolWeightEvent.InputTuple,
      SetSGLPoolWeightEvent.OutputTuple,
      SetSGLPoolWeightEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UnregisterSingularity(uint256,address)": TypedContractEvent<
      UnregisterSingularityEvent.InputTuple,
      UnregisterSingularityEvent.OutputTuple,
      UnregisterSingularityEvent.OutputObject
    >;
    UnregisterSingularity: TypedContractEvent<
      UnregisterSingularityEvent.InputTuple,
      UnregisterSingularityEvent.OutputTuple,
      UnregisterSingularityEvent.OutputObject
    >;

    "UpdateTotalSingularityPoolWeights(uint256)": TypedContractEvent<
      UpdateTotalSingularityPoolWeightsEvent.InputTuple,
      UpdateTotalSingularityPoolWeightsEvent.OutputTuple,
      UpdateTotalSingularityPoolWeightsEvent.OutputObject
    >;
    UpdateTotalSingularityPoolWeights: TypedContractEvent<
      UpdateTotalSingularityPoolWeightsEvent.InputTuple,
      UpdateTotalSingularityPoolWeightsEvent.OutputTuple,
      UpdateTotalSingularityPoolWeightsEvent.OutputObject
    >;
  };
}
