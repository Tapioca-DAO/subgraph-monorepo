/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type ParticipationStruct = {
  averageMagnitude: BigNumberish;
  hasVotingPower: boolean;
  divergenceForce: boolean;
  tapReleased: boolean;
  expiry: BigNumberish;
  tapAmount: BigNumberish;
  multiplier: BigNumberish;
  lastInactive: BigNumberish;
  lastActive: BigNumberish;
};

export type ParticipationStructOutput = [
  averageMagnitude: bigint,
  hasVotingPower: boolean,
  divergenceForce: boolean,
  tapReleased: boolean,
  expiry: bigint,
  tapAmount: bigint,
  multiplier: bigint,
  lastInactive: bigint,
  lastActive: bigint
] & {
  averageMagnitude: bigint;
  hasVotingPower: boolean;
  divergenceForce: boolean;
  tapReleased: boolean;
  expiry: bigint;
  tapAmount: bigint;
  multiplier: bigint;
  lastInactive: bigint;
  lastActive: bigint;
};

export type ERC721PermitStructStruct = {
  spender: AddressLike;
  tokenId: BigNumberish;
  nonce: BigNumberish;
  deadline: BigNumberish;
};

export type ERC721PermitStructStructOutput = [
  spender: string,
  tokenId: bigint,
  nonce: bigint,
  deadline: bigint
] & { spender: string; tokenId: bigint; nonce: bigint; deadline: bigint };

export interface TwTAPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "EPOCH_DURATION"
      | "MAX_LOCK_DURATION"
      | "addRewardToken"
      | "advanceWeek"
      | "approve"
      | "balanceOf"
      | "claimRewards"
      | "claimable"
      | "claimed"
      | "creation"
      | "currentWeek"
      | "distributeReward"
      | "eip712Domain"
      | "exitPosition"
      | "getApproved"
      | "getParticipation"
      | "getRewardTokens"
      | "getTypedDataHash"
      | "isApprovedForAll"
      | "lastProcessedWeek"
      | "maxRewardTokens"
      | "mintedTWTap"
      | "name"
      | "nftLoader"
      | "nonces"
      | "owner"
      | "ownerOf"
      | "participants"
      | "participate"
      | "paused"
      | "pearlmit"
      | "permit"
      | "renounceOwnership"
      | "rewardTokenIndex"
      | "rewardTokens"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setMaxRewardTokensLength"
      | "setMinWeightFactor"
      | "setNftLoader"
      | "setPause"
      | "setPearlmit"
      | "setVirtualTotalAmount"
      | "supportsInterface"
      | "symbol"
      | "tapOFT"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "twAML"
      | "weekTotals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AMLDivergence"
      | "AddRewardToken"
      | "AdvanceEpoch"
      | "Approval"
      | "ApprovalForAll"
      | "ClaimReward"
      | "DistributeReward"
      | "EIP712DomainChanged"
      | "ExitPosition"
      | "LogMaxRewardsLength"
      | "OwnershipTransferred"
      | "Participate"
      | "Paused"
      | "PearlmitUpdated"
      | "SetMinWeightFactor"
      | "SetVirtualTotalAmount"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "advanceWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "creation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataHash",
    values: [ERC721PermitStructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProcessedWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTWTap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nftLoader", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pearlmit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardTokensLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWeightFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftLoader",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPearlmit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVirtualTotalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tapOFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "twAML", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weekTotals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProcessedWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedTWTap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftLoader", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pearlmit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWeightFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftLoader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVirtualTotalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapOFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twAML", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weekTotals", data: BytesLike): Result;
}

export namespace AMLDivergenceEvent {
  export type InputTuple = [
    cumulative: BigNumberish,
    averageMagnitude: BigNumberish,
    totalParticipants: BigNumberish
  ];
  export type OutputTuple = [
    cumulative: bigint,
    averageMagnitude: bigint,
    totalParticipants: bigint
  ];
  export interface OutputObject {
    cumulative: bigint;
    averageMagnitude: bigint;
    totalParticipants: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddRewardTokenEvent {
  export type InputTuple = [
    rewardTokenAddress: AddressLike,
    rewardTokenIndex: BigNumberish
  ];
  export type OutputTuple = [
    rewardTokenAddress: string,
    rewardTokenIndex: bigint
  ];
  export interface OutputObject {
    rewardTokenAddress: string;
    rewardTokenIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdvanceEpochEvent {
  export type InputTuple = [newEpoch: BigNumberish, lastEpoch: BigNumberish];
  export type OutputTuple = [newEpoch: bigint, lastEpoch: bigint];
  export interface OutputObject {
    newEpoch: bigint;
    lastEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRewardEvent {
  export type InputTuple = [
    rewardTokenAddress: AddressLike,
    to: AddressLike,
    twTapTokenId: BigNumberish,
    amount: BigNumberish,
    rewardTokenIndex: BigNumberish
  ];
  export type OutputTuple = [
    rewardTokenAddress: string,
    to: string,
    twTapTokenId: bigint,
    amount: bigint,
    rewardTokenIndex: bigint
  ];
  export interface OutputObject {
    rewardTokenAddress: string;
    to: string;
    twTapTokenId: bigint;
    amount: bigint;
    rewardTokenIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributeRewardEvent {
  export type InputTuple = [
    rewardTokenAddress: AddressLike,
    from: AddressLike,
    amount: BigNumberish,
    rewardTokenIndex: BigNumberish
  ];
  export type OutputTuple = [
    rewardTokenAddress: string,
    from: string,
    amount: bigint,
    rewardTokenIndex: bigint
  ];
  export interface OutputObject {
    rewardTokenAddress: string;
    from: string;
    amount: bigint;
    rewardTokenIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitPositionEvent {
  export type InputTuple = [
    twTapTokenId: BigNumberish,
    releasedTo: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    twTapTokenId: bigint,
    releasedTo: string,
    amount: bigint
  ];
  export interface OutputObject {
    twTapTokenId: bigint;
    releasedTo: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMaxRewardsLengthEvent {
  export type InputTuple = [
    _oldLength: BigNumberish,
    _newLength: BigNumberish,
    _currentLength: BigNumberish
  ];
  export type OutputTuple = [
    _oldLength: bigint,
    _newLength: bigint,
    _currentLength: bigint
  ];
  export interface OutputObject {
    _oldLength: bigint;
    _newLength: bigint;
    _currentLength: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipateEvent {
  export type InputTuple = [
    participant: AddressLike,
    mintedTokenId: BigNumberish,
    tapAmount: BigNumberish,
    multiplier: BigNumberish,
    lockDuration: BigNumberish
  ];
  export type OutputTuple = [
    participant: string,
    mintedTokenId: bigint,
    tapAmount: bigint,
    multiplier: bigint,
    lockDuration: bigint
  ];
  export interface OutputObject {
    participant: string;
    mintedTokenId: bigint;
    tapAmount: bigint;
    multiplier: bigint;
    lockDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PearlmitUpdatedEvent {
  export type InputTuple = [oldPearlmit: AddressLike, newPearlmit: AddressLike];
  export type OutputTuple = [oldPearlmit: string, newPearlmit: string];
  export interface OutputObject {
    oldPearlmit: string;
    newPearlmit: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinWeightFactorEvent {
  export type InputTuple = [
    newMinWeightFactor: BigNumberish,
    oldMinWeightFactor: BigNumberish
  ];
  export type OutputTuple = [
    newMinWeightFactor: bigint,
    oldMinWeightFactor: bigint
  ];
  export interface OutputObject {
    newMinWeightFactor: bigint;
    oldMinWeightFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetVirtualTotalAmountEvent {
  export type InputTuple = [
    newVirtualTotalAmount: BigNumberish,
    oldVirtualTotalAmount: BigNumberish
  ];
  export type OutputTuple = [
    newVirtualTotalAmount: bigint,
    oldVirtualTotalAmount: bigint
  ];
  export interface OutputObject {
    newVirtualTotalAmount: bigint;
    oldVirtualTotalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TwTAP extends BaseContract {
  connect(runner?: ContractRunner | null): TwTAP;
  waitForDeployment(): Promise<this>;

  interface: TwTAPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  EPOCH_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_LOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  addRewardToken: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  advanceWeek: TypedContractMethod<
    [_limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  claimRewards: TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [bigint[]],
    "nonpayable"
  >;

  claimable: TypedContractMethod<[_tokenId: BigNumberish], [bigint[]], "view">;

  claimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  creation: TypedContractMethod<[], [bigint], "view">;

  currentWeek: TypedContractMethod<[], [bigint], "view">;

  distributeReward: TypedContractMethod<
    [_rewardTokenId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  exitPosition: TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getParticipation: TypedContractMethod<
    [_tokenId: BigNumberish],
    [ParticipationStructOutput],
    "view"
  >;

  getRewardTokens: TypedContractMethod<[], [string[]], "view">;

  getTypedDataHash: TypedContractMethod<
    [_permitData: ERC721PermitStructStruct],
    [string],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  lastProcessedWeek: TypedContractMethod<[], [bigint], "view">;

  maxRewardTokens: TypedContractMethod<[], [bigint], "view">;

  mintedTWTap: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nftLoader: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  participants: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        averageMagnitude: bigint;
        hasVotingPower: boolean;
        divergenceForce: boolean;
        tapReleased: boolean;
        expiry: bigint;
        tapAmount: bigint;
        multiplier: bigint;
        lastInactive: bigint;
        lastActive: bigint;
      }
    ],
    "view"
  >;

  participate: TypedContractMethod<
    [_participant: AddressLike, _amount: BigNumberish, _duration: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  pearlmit: TypedContractMethod<[], [string], "view">;

  permit: TypedContractMethod<
    [
      spender: AddressLike,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardTokenIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rewardTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setMaxRewardTokensLength: TypedContractMethod<
    [_length: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinWeightFactor: TypedContractMethod<
    [_minWeightFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNftLoader: TypedContractMethod<
    [_nftLoader: AddressLike],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[_pauseState: boolean], [void], "nonpayable">;

  setPearlmit: TypedContractMethod<
    [_pearlmit: AddressLike],
    [void],
    "nonpayable"
  >;

  setVirtualTotalAmount: TypedContractMethod<
    [_virtualTotalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tapOFT: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  twAML: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalParticipants: bigint;
        averageMagnitude: bigint;
        totalDeposited: bigint;
        cumulative: bigint;
      }
    ],
    "view"
  >;

  weekTotals: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EPOCH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addRewardToken"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "advanceWeek"
  ): TypedContractMethod<[_limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimable"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "creation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentWeek"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributeReward"
  ): TypedContractMethod<
    [_rewardTokenId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "exitPosition"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getParticipation"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [ParticipationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTypedDataHash"
  ): TypedContractMethod<
    [_permitData: ERC721PermitStructStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastProcessedWeek"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRewardTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintedTWTap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftLoader"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        averageMagnitude: bigint;
        hasVotingPower: boolean;
        divergenceForce: boolean;
        tapReleased: boolean;
        expiry: bigint;
        tapAmount: bigint;
        multiplier: bigint;
        lastInactive: bigint;
        lastActive: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "participate"
  ): TypedContractMethod<
    [_participant: AddressLike, _amount: BigNumberish, _duration: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pearlmit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      spender: AddressLike,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardTokenIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxRewardTokensLength"
  ): TypedContractMethod<[_length: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinWeightFactor"
  ): TypedContractMethod<
    [_minWeightFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNftLoader"
  ): TypedContractMethod<[_nftLoader: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[_pauseState: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPearlmit"
  ): TypedContractMethod<[_pearlmit: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVirtualTotalAmount"
  ): TypedContractMethod<
    [_virtualTotalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tapOFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twAML"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalParticipants: bigint;
        averageMagnitude: bigint;
        totalDeposited: bigint;
        cumulative: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "weekTotals"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "AMLDivergence"
  ): TypedContractEvent<
    AMLDivergenceEvent.InputTuple,
    AMLDivergenceEvent.OutputTuple,
    AMLDivergenceEvent.OutputObject
  >;
  getEvent(
    key: "AddRewardToken"
  ): TypedContractEvent<
    AddRewardTokenEvent.InputTuple,
    AddRewardTokenEvent.OutputTuple,
    AddRewardTokenEvent.OutputObject
  >;
  getEvent(
    key: "AdvanceEpoch"
  ): TypedContractEvent<
    AdvanceEpochEvent.InputTuple,
    AdvanceEpochEvent.OutputTuple,
    AdvanceEpochEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ClaimReward"
  ): TypedContractEvent<
    ClaimRewardEvent.InputTuple,
    ClaimRewardEvent.OutputTuple,
    ClaimRewardEvent.OutputObject
  >;
  getEvent(
    key: "DistributeReward"
  ): TypedContractEvent<
    DistributeRewardEvent.InputTuple,
    DistributeRewardEvent.OutputTuple,
    DistributeRewardEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExitPosition"
  ): TypedContractEvent<
    ExitPositionEvent.InputTuple,
    ExitPositionEvent.OutputTuple,
    ExitPositionEvent.OutputObject
  >;
  getEvent(
    key: "LogMaxRewardsLength"
  ): TypedContractEvent<
    LogMaxRewardsLengthEvent.InputTuple,
    LogMaxRewardsLengthEvent.OutputTuple,
    LogMaxRewardsLengthEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Participate"
  ): TypedContractEvent<
    ParticipateEvent.InputTuple,
    ParticipateEvent.OutputTuple,
    ParticipateEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PearlmitUpdated"
  ): TypedContractEvent<
    PearlmitUpdatedEvent.InputTuple,
    PearlmitUpdatedEvent.OutputTuple,
    PearlmitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SetMinWeightFactor"
  ): TypedContractEvent<
    SetMinWeightFactorEvent.InputTuple,
    SetMinWeightFactorEvent.OutputTuple,
    SetMinWeightFactorEvent.OutputObject
  >;
  getEvent(
    key: "SetVirtualTotalAmount"
  ): TypedContractEvent<
    SetVirtualTotalAmountEvent.InputTuple,
    SetVirtualTotalAmountEvent.OutputTuple,
    SetVirtualTotalAmountEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AMLDivergence(uint256,uint256,uint256)": TypedContractEvent<
      AMLDivergenceEvent.InputTuple,
      AMLDivergenceEvent.OutputTuple,
      AMLDivergenceEvent.OutputObject
    >;
    AMLDivergence: TypedContractEvent<
      AMLDivergenceEvent.InputTuple,
      AMLDivergenceEvent.OutputTuple,
      AMLDivergenceEvent.OutputObject
    >;

    "AddRewardToken(address,uint256)": TypedContractEvent<
      AddRewardTokenEvent.InputTuple,
      AddRewardTokenEvent.OutputTuple,
      AddRewardTokenEvent.OutputObject
    >;
    AddRewardToken: TypedContractEvent<
      AddRewardTokenEvent.InputTuple,
      AddRewardTokenEvent.OutputTuple,
      AddRewardTokenEvent.OutputObject
    >;

    "AdvanceEpoch(uint256,uint256)": TypedContractEvent<
      AdvanceEpochEvent.InputTuple,
      AdvanceEpochEvent.OutputTuple,
      AdvanceEpochEvent.OutputObject
    >;
    AdvanceEpoch: TypedContractEvent<
      AdvanceEpochEvent.InputTuple,
      AdvanceEpochEvent.OutputTuple,
      AdvanceEpochEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ClaimReward(address,address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimRewardEvent.InputTuple,
      ClaimRewardEvent.OutputTuple,
      ClaimRewardEvent.OutputObject
    >;
    ClaimReward: TypedContractEvent<
      ClaimRewardEvent.InputTuple,
      ClaimRewardEvent.OutputTuple,
      ClaimRewardEvent.OutputObject
    >;

    "DistributeReward(address,address,uint256,uint256)": TypedContractEvent<
      DistributeRewardEvent.InputTuple,
      DistributeRewardEvent.OutputTuple,
      DistributeRewardEvent.OutputObject
    >;
    DistributeReward: TypedContractEvent<
      DistributeRewardEvent.InputTuple,
      DistributeRewardEvent.OutputTuple,
      DistributeRewardEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ExitPosition(uint256,address,uint256)": TypedContractEvent<
      ExitPositionEvent.InputTuple,
      ExitPositionEvent.OutputTuple,
      ExitPositionEvent.OutputObject
    >;
    ExitPosition: TypedContractEvent<
      ExitPositionEvent.InputTuple,
      ExitPositionEvent.OutputTuple,
      ExitPositionEvent.OutputObject
    >;

    "LogMaxRewardsLength(uint256,uint256,uint256)": TypedContractEvent<
      LogMaxRewardsLengthEvent.InputTuple,
      LogMaxRewardsLengthEvent.OutputTuple,
      LogMaxRewardsLengthEvent.OutputObject
    >;
    LogMaxRewardsLength: TypedContractEvent<
      LogMaxRewardsLengthEvent.InputTuple,
      LogMaxRewardsLengthEvent.OutputTuple,
      LogMaxRewardsLengthEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Participate(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ParticipateEvent.InputTuple,
      ParticipateEvent.OutputTuple,
      ParticipateEvent.OutputObject
    >;
    Participate: TypedContractEvent<
      ParticipateEvent.InputTuple,
      ParticipateEvent.OutputTuple,
      ParticipateEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PearlmitUpdated(address,address)": TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;
    PearlmitUpdated: TypedContractEvent<
      PearlmitUpdatedEvent.InputTuple,
      PearlmitUpdatedEvent.OutputTuple,
      PearlmitUpdatedEvent.OutputObject
    >;

    "SetMinWeightFactor(uint256,uint256)": TypedContractEvent<
      SetMinWeightFactorEvent.InputTuple,
      SetMinWeightFactorEvent.OutputTuple,
      SetMinWeightFactorEvent.OutputObject
    >;
    SetMinWeightFactor: TypedContractEvent<
      SetMinWeightFactorEvent.InputTuple,
      SetMinWeightFactorEvent.OutputTuple,
      SetMinWeightFactorEvent.OutputObject
    >;

    "SetVirtualTotalAmount(uint256,uint256)": TypedContractEvent<
      SetVirtualTotalAmountEvent.InputTuple,
      SetVirtualTotalAmountEvent.OutputTuple,
      SetVirtualTotalAmountEvent.OutputObject
    >;
    SetVirtualTotalAmount: TypedContractEvent<
      SetVirtualTotalAmountEvent.InputTuple,
      SetVirtualTotalAmountEvent.OutputTuple,
      SetVirtualTotalAmountEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
