/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface YieldBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "amountOf"
      | "assetCount"
      | "assetTotals"
      | "assets"
      | "balanceOf"
      | "balanceOfBatch"
      | "batch"
      | "batchBurn"
      | "batchMint"
      | "batchTransfer"
      | "burn"
      | "claimOwnership"
      | "createToken"
      | "decimals"
      | "deposit"
      | "depositAsset"
      | "depositETH"
      | "depositETHAsset"
      | "depositNFTAsset"
      | "eip712Domain"
      | "ids"
      | "isApprovedForAll"
      | "isApprovedForAsset"
      | "mint"
      | "name"
      | "nativeTokens"
      | "nonces"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "pendingOwner"
      | "permit"
      | "permitAll"
      | "permitToken"
      | "registerAsset"
      | "revoke"
      | "revokeAll"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setApprovalForAsset"
      | "supportsInterface"
      | "symbol"
      | "toAmount"
      | "toShare"
      | "totalSupply"
      | "transfer"
      | "transferMultiple"
      | "transferOwnership"
      | "uri"
      | "uriBuilder"
      | "withdraw"
      | "wrappedNative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "ApprovalForAsset"
      | "AssetRegistered"
      | "Deposited"
      | "EIP712DomainChanged"
      | "OwnershipTransferred"
      | "TokenCreated"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTotals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurn",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAsset",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETHAsset",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNFTAsset",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ids",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAsset",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nativeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitAll",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAll",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAsset",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toShare",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMultiple",
    values: [AddressLike, AddressLike[], BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [BigNumberish, AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "uriBuilder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amountOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositETHAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNFTAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permitAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uriBuilder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative",
    data: BytesLike
  ): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAssetEvent {
  export type InputTuple = [
    sender: AddressLike,
    operator: AddressLike,
    assetId: BigNumberish,
    approved: boolean
  ];
  export type OutputTuple = [
    sender: string,
    operator: string,
    assetId: bigint,
    approved: boolean
  ];
  export interface OutputObject {
    sender: string;
    operator: string;
    assetId: bigint;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetRegisteredEvent {
  export type InputTuple = [
    tokenType: BigNumberish,
    contractAddress: AddressLike,
    strategy: AddressLike,
    tokenId: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    tokenType: bigint,
    contractAddress: string,
    strategy: string,
    tokenId: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    tokenType: bigint;
    contractAddress: string;
    strategy: string;
    tokenId: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    sender: AddressLike,
    from: AddressLike,
    to: AddressLike,
    assetId: BigNumberish,
    amountIn: BigNumberish,
    shareIn: BigNumberish,
    amountOut: BigNumberish,
    shareOut: BigNumberish,
    isNFT: boolean
  ];
  export type OutputTuple = [
    sender: string,
    from: string,
    to: string,
    assetId: bigint,
    amountIn: bigint,
    shareIn: bigint,
    amountOut: bigint,
    shareOut: bigint,
    isNFT: boolean
  ];
  export interface OutputObject {
    sender: string;
    from: string;
    to: string;
    assetId: bigint;
    amountIn: bigint;
    shareIn: bigint;
    amountOut: bigint;
    shareOut: bigint;
    isNFT: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    previousOwner: AddressLike,
    newOwner: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    previousOwner: string,
    newOwner: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    name: string,
    symbol: string,
    decimals: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    name: string,
    symbol: string,
    decimals: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    creator: string;
    name: string;
    symbol: string;
    decimals: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    _operator: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _ids: BigNumberish[],
    _values: BigNumberish[]
  ];
  export type OutputTuple = [
    _operator: string,
    _from: string,
    _to: string,
    _ids: bigint[],
    _values: bigint[]
  ];
  export interface OutputObject {
    _operator: string;
    _from: string;
    _to: string;
    _ids: bigint[];
    _values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    _operator: AddressLike,
    _from: AddressLike,
    _to: AddressLike,
    _id: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _operator: string,
    _from: string,
    _to: string,
    _id: bigint,
    _value: bigint
  ];
  export interface OutputObject {
    _operator: string;
    _from: string;
    _to: string;
    _id: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [_value: string, _id: BigNumberish];
  export type OutputTuple = [_value: string, _id: bigint];
  export interface OutputObject {
    _value: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    from: AddressLike,
    to: AddressLike,
    assetId: BigNumberish,
    amountIn: BigNumberish,
    shareIn: BigNumberish,
    amountOut: BigNumberish,
    shareOut: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    from: string,
    to: string,
    assetId: bigint,
    amountIn: bigint,
    shareIn: bigint,
    amountOut: bigint,
    shareOut: bigint
  ];
  export interface OutputObject {
    sender: string;
    from: string;
    to: string;
    assetId: bigint;
    amountIn: bigint;
    shareIn: bigint;
    amountOut: bigint;
    shareOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YieldBox extends BaseContract {
  connect(runner?: ContractRunner | null): YieldBox;
  waitForDeployment(): Promise<this>;

  interface: YieldBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  amountOf: TypedContractMethod<
    [user: AddressLike, assetId: BigNumberish],
    [bigint],
    "view"
  >;

  assetCount: TypedContractMethod<[], [bigint], "view">;

  assetTotals: TypedContractMethod<
    [assetId: BigNumberish],
    [[bigint, bigint] & { totalShare: bigint; totalAmount: bigint }],
    "view"
  >;

  assets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        tokenType: bigint;
        contractAddress: string;
        strategy: string;
        tokenId: bigint;
      }
    ],
    "view"
  >;

  balanceOf: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [owners: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  batch: TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [void],
    "payable"
  >;

  batchBurn: TypedContractMethod<
    [tokenId: BigNumberish, froms: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchMint: TypedContractMethod<
    [tokenId: BigNumberish, tos: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchTransfer: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  burn: TypedContractMethod<
    [tokenId: BigNumberish, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimOwnership: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createToken: TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish, uri: string],
    [bigint],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[assetId: BigNumberish], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      tokenType: BigNumberish,
      contractAddress: AddressLike,
      strategy: AddressLike,
      tokenId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;

  depositAsset: TypedContractMethod<
    [
      assetId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;

  depositETH: TypedContractMethod<
    [strategy: AddressLike, to: AddressLike, amount: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "payable"
  >;

  depositETHAsset: TypedContractMethod<
    [assetId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "payable"
  >;

  depositNFTAsset: TypedContractMethod<
    [assetId: BigNumberish, from: AddressLike, to: AddressLike],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  ids: TypedContractMethod<
    [
      tokenType: BigNumberish,
      contractAddress: AddressLike,
      strategy: AddressLike,
      tokenId: BigNumberish
    ],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAsset: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[assetId: BigNumberish], [string], "view">;

  nativeTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string] & {
        name: string;
        symbol: string;
        decimals: bigint;
        uri: string;
      }
    ],
    "view"
  >;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  pendingOwner: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      assetId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  permitAll: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  permitToken: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registerAsset: TypedContractMethod<
    [
      tokenType: BigNumberish,
      contractAddress: AddressLike,
      strategy: AddressLike,
      tokenId: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  revoke: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      assetId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  revokeAll: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setApprovalForAsset: TypedContractMethod<
    [operator: AddressLike, assetId: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[assetId: BigNumberish], [string], "view">;

  toAmount: TypedContractMethod<
    [assetId: BigNumberish, share: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;

  toShare: TypedContractMethod<
    [assetId: BigNumberish, amount: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;

  totalSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transfer: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      assetId: BigNumberish,
      share: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferMultiple: TypedContractMethod<
    [
      from: AddressLike,
      tos: AddressLike[],
      assetId: BigNumberish,
      shares: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [
      tokenId: BigNumberish,
      newOwner: AddressLike,
      direct: boolean,
      renounce: boolean
    ],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[assetId: BigNumberish], [string], "view">;

  uriBuilder: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [
      assetId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;

  wrappedNative: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "amountOf"
  ): TypedContractMethod<
    [user: AddressLike, assetId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "assetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetTotals"
  ): TypedContractMethod<
    [assetId: BigNumberish],
    [[bigint, bigint] & { totalShare: bigint; totalAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        tokenType: bigint;
        contractAddress: string;
        strategy: string;
        tokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [owners: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batch"
  ): TypedContractMethod<
    [calls: BytesLike[], revertOnFail: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchBurn"
  ): TypedContractMethod<
    [tokenId: BigNumberish, froms: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchMint"
  ): TypedContractMethod<
    [tokenId: BigNumberish, tos: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchTransfer"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [tokenId: BigNumberish, from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish, uri: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[assetId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      tokenType: BigNumberish,
      contractAddress: AddressLike,
      strategy: AddressLike,
      tokenId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositAsset"
  ): TypedContractMethod<
    [
      assetId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<
    [strategy: AddressLike, to: AddressLike, amount: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositETHAsset"
  ): TypedContractMethod<
    [assetId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositNFTAsset"
  ): TypedContractMethod<
    [assetId: BigNumberish, from: AddressLike, to: AddressLike],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ids"
  ): TypedContractMethod<
    [
      tokenType: BigNumberish,
      contractAddress: AddressLike,
      strategy: AddressLike,
      tokenId: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAsset"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[assetId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "nativeTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string] & {
        name: string;
        symbol: string;
        decimals: bigint;
        uri: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      assetId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permitAll"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permitToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAsset"
  ): TypedContractMethod<
    [
      tokenType: BigNumberish,
      contractAddress: AddressLike,
      strategy: AddressLike,
      tokenId: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      assetId: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAll"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAsset"
  ): TypedContractMethod<
    [operator: AddressLike, assetId: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[assetId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "toAmount"
  ): TypedContractMethod<
    [assetId: BigNumberish, share: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "toShare"
  ): TypedContractMethod<
    [assetId: BigNumberish, amount: BigNumberish, roundUp: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      assetId: BigNumberish,
      share: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferMultiple"
  ): TypedContractMethod<
    [
      from: AddressLike,
      tos: AddressLike[],
      assetId: BigNumberish,
      shares: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      newOwner: AddressLike,
      direct: boolean,
      renounce: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[assetId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "uriBuilder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      assetId: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      share: BigNumberish
    ],
    [[bigint, bigint] & { amountOut: bigint; shareOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wrappedNative"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAsset"
  ): TypedContractEvent<
    ApprovalForAssetEvent.InputTuple,
    ApprovalForAssetEvent.OutputTuple,
    ApprovalForAssetEvent.OutputObject
  >;
  getEvent(
    key: "AssetRegistered"
  ): TypedContractEvent<
    AssetRegisteredEvent.InputTuple,
    AssetRegisteredEvent.OutputTuple,
    AssetRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreated"
  ): TypedContractEvent<
    TokenCreatedEvent.InputTuple,
    TokenCreatedEvent.OutputTuple,
    TokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ApprovalForAsset(address,address,uint256,bool)": TypedContractEvent<
      ApprovalForAssetEvent.InputTuple,
      ApprovalForAssetEvent.OutputTuple,
      ApprovalForAssetEvent.OutputObject
    >;
    ApprovalForAsset: TypedContractEvent<
      ApprovalForAssetEvent.InputTuple,
      ApprovalForAssetEvent.OutputTuple,
      ApprovalForAssetEvent.OutputObject
    >;

    "AssetRegistered(uint8,address,address,uint256,uint256)": TypedContractEvent<
      AssetRegisteredEvent.InputTuple,
      AssetRegisteredEvent.OutputTuple,
      AssetRegisteredEvent.OutputObject
    >;
    AssetRegistered: TypedContractEvent<
      AssetRegisteredEvent.InputTuple,
      AssetRegisteredEvent.OutputTuple,
      AssetRegisteredEvent.OutputObject
    >;

    "Deposited(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OwnershipTransferred(uint256,address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenCreated(address,string,string,uint8,uint256)": TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;
    TokenCreated: TypedContractEvent<
      TokenCreatedEvent.InputTuple,
      TokenCreatedEvent.OutputTuple,
      TokenCreatedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
