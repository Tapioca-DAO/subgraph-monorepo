// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ParticipationAOTap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParticipationAOTap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ParticipationAOTap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ParticipationAOTap", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ParticipationAOTap | null {
    return changetype<ParticipationAOTap | null>(
      store.get_in_block("ParticipationAOTap", id)
    );
  }

  static load(id: string): ParticipationAOTap | null {
    return changetype<ParticipationAOTap | null>(
      store.get("ParticipationAOTap", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get participantAddress(): string {
    let value = this.get("participantAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set participantAddress(value: string) {
    this.set("participantAddress", Value.fromString(value));
  }

  get expirationTimestamp(): i32 {
    let value = this.get("expirationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set expirationTimestamp(value: i32) {
    this.set("expirationTimestamp", Value.fromI32(value));
  }

  get discount(): i32 {
    let value = this.get("discount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set discount(value: i32) {
    this.set("discount", Value.fromI32(value));
  }

  get tapAmount(): BigInt {
    let value = this.get("tapAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tapAmount(value: BigInt) {
    this.set("tapAmount", Value.fromBigInt(value));
  }

  get epochClaimed(): i32 {
    let value = this.get("epochClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochClaimed(value: i32) {
    this.set("epochClaimed", Value.fromI32(value));
  }
}
