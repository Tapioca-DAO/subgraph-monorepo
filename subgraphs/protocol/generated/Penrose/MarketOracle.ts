// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MarketOracle__getResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class MarketOracle__peekResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class MarketOracle extends ethereum.SmartContract {
  static bind(address: Address): MarketOracle {
    return new MarketOracle("MarketOracle", address);
  }

  __name(): string {
    let result = super.call("__name", "__name():(string)", []);

    return result[0].toString();
  }

  try___name(): ethereum.CallResult<string> {
    let result = super.tryCall("__name", "__name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  __symbol(): string {
    let result = super.call("__symbol", "__symbol():(string)", []);

    return result[0].toString();
  }

  try___symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("__symbol", "__symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  get(param0: Bytes): MarketOracle__getResult {
    let result = super.call("get", "get(bytes):(bool,uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new MarketOracle__getResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_get(param0: Bytes): ethereum.CallResult<MarketOracle__getResult> {
    let result = super.tryCall("get", "get(bytes):(bool,uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketOracle__getResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  getDataParameter(): Bytes {
    let result = super.call(
      "getDataParameter",
      "getDataParameter():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_getDataParameter(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDataParameter",
      "getDataParameter():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  name(param0: Bytes): string {
    let result = super.call("name", "name(bytes):(string)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toString();
  }

  try_name(param0: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name(bytes):(string)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  peek(param0: Bytes): MarketOracle__peekResult {
    let result = super.call("peek", "peek(bytes):(bool,uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new MarketOracle__peekResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_peek(param0: Bytes): ethereum.CallResult<MarketOracle__peekResult> {
    let result = super.tryCall("peek", "peek(bytes):(bool,uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketOracle__peekResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  peekSpot(param0: Bytes): BigInt {
    let result = super.call("peekSpot", "peekSpot(bytes):(uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_peekSpot(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("peekSpot", "peekSpot(bytes):(uint256)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rate(): BigInt {
    let result = super.call("rate", "rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  success(): boolean {
    let result = super.call("success", "success():(bool)", []);

    return result[0].toBoolean();
  }

  try_success(): ethereum.CallResult<boolean> {
    let result = super.tryCall("success", "success():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(param0: Bytes): string {
    let result = super.call("symbol", "symbol(bytes):(string)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return result[0].toString();
  }

  try_symbol(param0: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol(bytes):(string)", [
      ethereum.Value.fromBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _rate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get rate_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetSuccessCall extends ethereum.Call {
  get inputs(): SetSuccessCall__Inputs {
    return new SetSuccessCall__Inputs(this);
  }

  get outputs(): SetSuccessCall__Outputs {
    return new SetSuccessCall__Outputs(this);
  }
}

export class SetSuccessCall__Inputs {
  _call: SetSuccessCall;

  constructor(call: SetSuccessCall) {
    this._call = call;
  }

  get val(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSuccessCall__Outputs {
  _call: SetSuccessCall;

  constructor(call: SetSuccessCall) {
    this._call = call;
  }
}
