// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get latestUsdValue(): string | null {
    let value = this.get("latestUsdValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestUsdValue(value: string | null) {
    if (!value) {
      this.unset("latestUsdValue");
    } else {
      this.set("latestUsdValue", Value.fromString(<string>value));
    }
  }

  get historicalUsdValue(): TokenUsdValueLoader {
    return new TokenUsdValueLoader(
      "Token",
      this.get("id")!.toString(),
      "historicalUsdValue"
    );
  }
}

export class TokenUsdValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenUsdValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenUsdValue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenUsdValue", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenUsdValue | null {
    return changetype<TokenUsdValue | null>(
      store.get_in_block("TokenUsdValue", id)
    );
  }

  static load(id: string): TokenUsdValue | null {
    return changetype<TokenUsdValue | null>(store.get("TokenUsdValue", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get usdValue(): BigDecimal {
    let value = this.get("usdValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set usdValue(value: BigDecimal) {
    this.set("usdValue", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class TapiocaProtocolAmount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TapiocaProtocolAmount entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TapiocaProtocolAmount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TapiocaProtocolAmount", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TapiocaProtocolAmount | null {
    return changetype<TapiocaProtocolAmount | null>(
      store.get_in_block("TapiocaProtocolAmount", id)
    );
  }

  static load(id: string): TapiocaProtocolAmount | null {
    return changetype<TapiocaProtocolAmount | null>(
      store.get("TapiocaProtocolAmount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get raw(): BigInt | null {
    let value = this.get("raw");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set raw(value: BigInt | null) {
    if (!value) {
      this.unset("raw");
    } else {
      this.set("raw", Value.fromBigInt(<BigInt>value));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get usdAmount(): BigDecimal {
    let value = this.get("usdAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set usdAmount(value: BigDecimal) {
    this.set("usdAmount", Value.fromBigDecimal(value));
  }

  get currentUsdValue(): string {
    let value = this.get("currentUsdValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currentUsdValue(value: string) {
    this.set("currentUsdValue", Value.fromString(value));
  }
}

export class TOFToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TOFToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TOFToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TOFToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TOFToken | null {
    return changetype<TOFToken | null>(store.get_in_block("TOFToken", id));
  }

  static load(id: string): TOFToken | null {
    return changetype<TOFToken | null>(store.get("TOFToken", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isUSDO(): boolean {
    let value = this.get("isUSDO");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isUSDO(value: boolean) {
    this.set("isUSDO", Value.fromBoolean(value));
  }

  get underlyingToken(): string | null {
    let value = this.get("underlyingToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set underlyingToken(value: string | null) {
    if (!value) {
      this.unset("underlyingToken");
    } else {
      this.set("underlyingToken", Value.fromString(<string>value));
    }
  }

  get TOFToken(): string {
    let value = this.get("TOFToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set TOFToken(value: string) {
    this.set("TOFToken", Value.fromString(value));
  }

  get remoteTOFTokenMetaData(): RemoteTOFTMetaLoader {
    return new RemoteTOFTMetaLoader(
      "TOFToken",
      this.get("id")!.toString(),
      "remoteTOFTokenMetaData"
    );
  }

  get teleports(): TeleportReceivedLoader {
    return new TeleportReceivedLoader(
      "TOFToken",
      this.get("id")!.toString(),
      "teleports"
    );
  }
}

export class RemoteTOFTMeta extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoteTOFTMeta entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RemoteTOFTMeta must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoteTOFTMeta", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RemoteTOFTMeta | null {
    return changetype<RemoteTOFTMeta | null>(
      store.get_in_block("RemoteTOFTMeta", id)
    );
  }

  static load(id: string): RemoteTOFTMeta | null {
    return changetype<RemoteTOFTMeta | null>(store.get("RemoteTOFTMeta", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TOFToken(): string {
    let value = this.get("TOFToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set TOFToken(value: string) {
    this.set("TOFToken", Value.fromString(value));
  }

  get remoteChainId(): i32 {
    let value = this.get("remoteChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set remoteChainId(value: i32) {
    this.set("remoteChainId", Value.fromI32(value));
  }

  get remoteLZChainId(): i32 {
    let value = this.get("remoteLZChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set remoteLZChainId(value: i32) {
    this.set("remoteLZChainId", Value.fromI32(value));
  }

  get remoteTOFTokenAddress(): Bytes {
    let value = this.get("remoteTOFTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set remoteTOFTokenAddress(value: Bytes) {
    this.set("remoteTOFTokenAddress", Value.fromBytes(value));
  }
}

export class Rebase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rebase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Rebase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Rebase", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Rebase | null {
    return changetype<Rebase | null>(store.get_in_block("Rebase", id));
  }

  static load(id: string): Rebase | null {
    return changetype<Rebase | null>(store.get("Rebase", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get base(): BigInt {
    let value = this.get("base");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set base(value: BigInt) {
    this.set("base", Value.fromBigInt(value));
  }

  get elastic(): BigInt {
    let value = this.get("elastic");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set elastic(value: BigInt) {
    this.set("elastic", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class MarketAccrueInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketAccrueInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketAccrueInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketAccrueInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketAccrueInfo | null {
    return changetype<MarketAccrueInfo | null>(
      store.get_in_block("MarketAccrueInfo", id)
    );
  }

  static load(id: string): MarketAccrueInfo | null {
    return changetype<MarketAccrueInfo | null>(
      store.get("MarketAccrueInfo", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get interestPerSecond(): BigInt {
    let value = this.get("interestPerSecond");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestPerSecond(value: BigInt) {
    this.set("interestPerSecond", Value.fromBigInt(value));
  }

  get lastAccrued(): BigInt {
    let value = this.get("lastAccrued");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastAccrued(value: BigInt) {
    this.set("lastAccrued", Value.fromBigInt(value));
  }

  get feesEarnedFraction(): BigInt {
    let value = this.get("feesEarnedFraction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feesEarnedFraction(value: BigInt) {
    this.set("feesEarnedFraction", Value.fromBigInt(value));
  }
}

export class InterestRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InterestRate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InterestRate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InterestRate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): InterestRate | null {
    return changetype<InterestRate | null>(
      store.get_in_block("InterestRate", id)
    );
  }

  static load(id: string): InterestRate | null {
    return changetype<InterestRate | null>(store.get("InterestRate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rate(): BigDecimal {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rate(value: BigDecimal) {
    this.set("rate", Value.fromBigDecimal(value));
  }

  get _rawRate(): BigInt {
    let value = this.get("_rawRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _rawRate(value: BigInt) {
    this.set("_rawRate", Value.fromBigInt(value));
  }

  get duration(): i32 {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set duration(value: i32) {
    this.set("duration", Value.fromI32(value));
  }

  get maturityBlock(): BigInt | null {
    let value = this.get("maturityBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturityBlock(value: BigInt | null) {
    if (!value) {
      this.unset("maturityBlock");
    } else {
      this.set("maturityBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get side(): string {
    let value = this.get("side");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set side(value: string) {
    this.set("side", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tranche(): string | null {
    let value = this.get("tranche");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tranche(value: string | null) {
    if (!value) {
      this.unset("tranche");
    } else {
      this.set("tranche", Value.fromString(<string>value));
    }
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Market | null {
    return changetype<Market | null>(store.get_in_block("Market", id));
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get _borrowTokenYieldBoxId(): BigInt {
    let value = this.get("_borrowTokenYieldBoxId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _borrowTokenYieldBoxId(value: BigInt) {
    this.set("_borrowTokenYieldBoxId", Value.fromBigInt(value));
  }

  get _collateralTokenYieldBoxId(): BigInt {
    let value = this.get("_collateralTokenYieldBoxId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _collateralTokenYieldBoxId(value: BigInt) {
    this.set("_collateralTokenYieldBoxId", Value.fromBigInt(value));
  }

  get borrowToken(): string {
    let value = this.get("borrowToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowToken(value: string) {
    this.set("borrowToken", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get oracleAddress(): Bytes {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oracleAddress(value: Bytes) {
    this.set("oracleAddress", Value.fromBytes(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get borrows(): BorrowLoader {
    return new BorrowLoader("Market", this.get("id")!.toString(), "borrows");
  }

  get deposits(): DepositLoader {
    return new DepositLoader("Market", this.get("id")!.toString(), "deposits");
  }

  get withdrawals(): WithdrawalLoader {
    return new WithdrawalLoader(
      "Market",
      this.get("id")!.toString(),
      "withdrawals"
    );
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Market",
      this.get("id")!.toString(),
      "positions"
    );
  }

  get historicalStates(): MarketStateLoader {
    return new MarketStateLoader(
      "Market",
      this.get("id")!.toString(),
      "historicalStates"
    );
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get lendingPositionCount(): i32 {
    let value = this.get("lendingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lendingPositionCount(value: i32) {
    this.set("lendingPositionCount", Value.fromI32(value));
  }

  get borrowingPositionCount(): i32 {
    let value = this.get("borrowingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowingPositionCount(value: i32) {
    this.set("borrowingPositionCount", Value.fromI32(value));
  }

  get totalBorrowed(): BigInt {
    let value = this.get("totalBorrowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowed(value: BigInt) {
    this.set("totalBorrowed", Value.fromBigInt(value));
  }

  get totalBorrowedUsd(): BigDecimal {
    let value = this.get("totalBorrowedUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowedUsd(value: BigDecimal) {
    this.set("totalBorrowedUsd", Value.fromBigDecimal(value));
  }

  get totalBorrowSupply(): BigInt {
    let value = this.get("totalBorrowSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowSupply(value: BigInt) {
    this.set("totalBorrowSupply", Value.fromBigInt(value));
  }

  get totalBorrowSupplyUsd(): BigDecimal {
    let value = this.get("totalBorrowSupplyUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowSupplyUsd(value: BigDecimal) {
    this.set("totalBorrowSupplyUsd", Value.fromBigDecimal(value));
  }

  get totalCollateral(): BigInt {
    let value = this.get("totalCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateral(value: BigInt) {
    this.set("totalCollateral", Value.fromBigInt(value));
  }

  get totalCollateralUsd(): BigDecimal {
    let value = this.get("totalCollateralUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalCollateralUsd(value: BigDecimal) {
    this.set("totalCollateralUsd", Value.fromBigDecimal(value));
  }

  get _totalCollateralShare(): BigInt {
    let value = this.get("_totalCollateralShare");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _totalCollateralShare(value: BigInt) {
    this.set("_totalCollateralShare", Value.fromBigInt(value));
  }

  get _ybTotalAsset(): string {
    let value = this.get("_ybTotalAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set _ybTotalAsset(value: string) {
    this.set("_ybTotalAsset", Value.fromString(value));
  }

  get _ybTotalCollateralAsset(): string {
    let value = this.get("_ybTotalCollateralAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set _ybTotalCollateralAsset(value: string) {
    this.set("_ybTotalCollateralAsset", Value.fromString(value));
  }

  get _totalAsset(): string {
    let value = this.get("_totalAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set _totalAsset(value: string) {
    this.set("_totalAsset", Value.fromString(value));
  }

  get _totalBorrow(): string {
    let value = this.get("_totalBorrow");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set _totalBorrow(value: string) {
    this.set("_totalBorrow", Value.fromString(value));
  }

  get accrueInfo(): string {
    let value = this.get("accrueInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set accrueInfo(value: string) {
    this.set("accrueInfo", Value.fromString(value));
  }

  get supplyInterest(): string {
    let value = this.get("supplyInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set supplyInterest(value: string) {
    this.set("supplyInterest", Value.fromString(value));
  }

  get borrowInterest(): string {
    let value = this.get("borrowInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowInterest(value: string) {
    this.set("borrowInterest", Value.fromString(value));
  }

  get collateralInterest(): string {
    let value = this.get("collateralInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralInterest(value: string) {
    this.set("collateralInterest", Value.fromString(value));
  }

  get utilization(): BigInt {
    let value = this.get("utilization");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set utilization(value: BigInt) {
    this.set("utilization", Value.fromBigInt(value));
  }

  get totalFeesEarnedFraction(): BigInt {
    let value = this.get("totalFeesEarnedFraction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalFeesEarnedFraction(value: BigInt) {
    this.set("totalFeesEarnedFraction", Value.fromBigInt(value));
  }
}

export class MarketState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketState | null {
    return changetype<MarketState | null>(
      store.get_in_block("MarketState", id)
    );
  }

  static load(id: string): MarketState | null {
    return changetype<MarketState | null>(store.get("MarketState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalBorrowed(): BigInt {
    let value = this.get("totalBorrowed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowed(value: BigInt) {
    this.set("totalBorrowed", Value.fromBigInt(value));
  }

  get totalBorrowedUsd(): BigDecimal {
    let value = this.get("totalBorrowedUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowedUsd(value: BigDecimal) {
    this.set("totalBorrowedUsd", Value.fromBigDecimal(value));
  }

  get totalBorrowSupply(): BigInt {
    let value = this.get("totalBorrowSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrowSupply(value: BigInt) {
    this.set("totalBorrowSupply", Value.fromBigInt(value));
  }

  get totalBorrowSupplyUsd(): BigDecimal {
    let value = this.get("totalBorrowSupplyUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowSupplyUsd(value: BigDecimal) {
    this.set("totalBorrowSupplyUsd", Value.fromBigDecimal(value));
  }

  get totalCollateral(): BigInt {
    let value = this.get("totalCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateral(value: BigInt) {
    this.set("totalCollateral", Value.fromBigInt(value));
  }

  get totalCollateralUsd(): BigDecimal {
    let value = this.get("totalCollateralUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalCollateralUsd(value: BigDecimal) {
    this.set("totalCollateralUsd", Value.fromBigDecimal(value));
  }
}

export class TeleportReceived extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TeleportReceived entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TeleportReceived must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TeleportReceived", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TeleportReceived | null {
    return changetype<TeleportReceived | null>(
      store.get_in_block("TeleportReceived", id)
    );
  }

  static load(id: string): TeleportReceived | null {
    return changetype<TeleportReceived | null>(
      store.get("TeleportReceived", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get callerAddress(): Bytes {
    let value = this.get("callerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set callerAddress(value: Bytes) {
    this.set("callerAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get sourceChainId(): i32 {
    let value = this.get("sourceChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sourceChainId(value: i32) {
    this.set("sourceChainId", Value.fromI32(value));
  }

  get sourceLZChainId(): i32 {
    let value = this.get("sourceLZChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sourceLZChainId(value: i32) {
    this.set("sourceLZChainId", Value.fromI32(value));
  }

  get destinationAccount(): string {
    let value = this.get("destinationAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set destinationAccount(value: string) {
    this.set("destinationAccount", Value.fromString(value));
  }

  get destinationTOFToken(): string {
    let value = this.get("destinationTOFToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set destinationTOFToken(value: string) {
    this.set("destinationTOFToken", Value.fromString(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get_in_block("Deposit", id));
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get callerAddress(): Bytes {
    let value = this.get("callerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set callerAddress(value: Bytes) {
    this.set("callerAddress", Value.fromBytes(value));
  }

  get fromAccount(): string {
    let value = this.get("fromAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromAccount(value: string) {
    this.set("fromAccount", Value.fromString(value));
  }

  get toAccount(): string {
    let value = this.get("toAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set toAccount(value: string) {
    this.set("toAccount", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get_in_block("Withdrawal", id));
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get callerAddress(): Bytes {
    let value = this.get("callerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set callerAddress(value: Bytes) {
    this.set("callerAddress", Value.fromBytes(value));
  }

  get fromAccount(): string {
    let value = this.get("fromAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromAccount(value: string) {
    this.set("fromAccount", Value.fromString(value));
  }

  get toAccount(): string {
    let value = this.get("toAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set toAccount(value: string) {
    this.set("toAccount", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }
}

export class Borrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Borrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Borrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Borrow", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Borrow | null {
    return changetype<Borrow | null>(store.get_in_block("Borrow", id));
  }

  static load(id: string): Borrow | null {
    return changetype<Borrow | null>(store.get("Borrow", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get callerAddress(): Bytes {
    let value = this.get("callerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set callerAddress(value: Bytes) {
    this.set("callerAddress", Value.fromBytes(value));
  }

  get fromAccount(): string {
    let value = this.get("fromAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromAccount(value: string) {
    this.set("fromAccount", Value.fromString(value));
  }

  get toAccount(): string {
    let value = this.get("toAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set toAccount(value: string) {
    this.set("toAccount", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }

  get amountAccrued(): string {
    let value = this.get("amountAccrued");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set amountAccrued(value: string) {
    this.set("amountAccrued", Value.fromString(value));
  }

  get amountProtocolFees(): string {
    let value = this.get("amountProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set amountProtocolFees(value: string) {
    this.set("amountProtocolFees", Value.fromString(value));
  }
}

export class Repay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Repay entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Repay must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Repay", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Repay | null {
    return changetype<Repay | null>(store.get_in_block("Repay", id));
  }

  static load(id: string): Repay | null {
    return changetype<Repay | null>(store.get("Repay", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get callerAddress(): Bytes {
    let value = this.get("callerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set callerAddress(value: Bytes) {
    this.set("callerAddress", Value.fromBytes(value));
  }

  get fromAccount(): string {
    let value = this.get("fromAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fromAccount(value: string) {
    this.set("fromAccount", Value.fromString(value));
  }

  get toAccount(): string {
    let value = this.get("toAccount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set toAccount(value: string) {
    this.set("toAccount", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Account",
      this.get("id")!.toString(),
      "positions"
    );
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader("Account", this.get("id")!.toString(), "deposits");
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get withdrawals(): WithdrawalLoader {
    return new WithdrawalLoader(
      "Account",
      this.get("id")!.toString(),
      "withdrawals"
    );
  }

  get borrowCount(): i32 {
    let value = this.get("borrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowCount(value: i32) {
    this.set("borrowCount", Value.fromI32(value));
  }

  get borrows(): BorrowLoader {
    return new BorrowLoader("Account", this.get("id")!.toString(), "borrows");
  }

  get repayCount(): i32 {
    let value = this.get("repayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayCount(value: i32) {
    this.set("repayCount", Value.fromI32(value));
  }

  get repays(): RepayLoader {
    return new RepayLoader("Account", this.get("id")!.toString(), "repays");
  }

  get teleportReceivedCount(): i32 {
    let value = this.get("teleportReceivedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set teleportReceivedCount(value: i32) {
    this.set("teleportReceivedCount", Value.fromI32(value));
  }

  get teleportsReceived(): TeleportReceivedLoader {
    return new TeleportReceivedLoader(
      "Account",
      this.get("id")!.toString(),
      "teleportsReceived"
    );
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Position", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Position | null {
    return changetype<Position | null>(store.get_in_block("Position", id));
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get account(): string {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get hashOpened(): string {
    let value = this.get("hashOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hashOpened(value: string) {
    this.set("hashOpened", Value.fromString(value));
  }

  get hashClosed(): string | null {
    let value = this.get("hashClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hashClosed(value: string | null) {
    if (!value) {
      this.unset("hashClosed");
    } else {
      this.set("hashClosed", Value.fromString(<string>value));
    }
  }

  get blockNumberOpened(): BigInt {
    let value = this.get("blockNumberOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumberOpened(value: BigInt) {
    this.set("blockNumberOpened", Value.fromBigInt(value));
  }

  get timestampOpened(): BigInt {
    let value = this.get("timestampOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestampOpened(value: BigInt) {
    this.set("timestampOpened", Value.fromBigInt(value));
  }

  get blockNumberClosed(): BigInt | null {
    let value = this.get("blockNumberClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumberClosed(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumberClosed");
    } else {
      this.set("blockNumberClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestampClosed(): BigInt | null {
    let value = this.get("timestampClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestampClosed(value: BigInt | null) {
    if (!value) {
      this.unset("timestampClosed");
    } else {
      this.set("timestampClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get balance(): string {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set balance(value: string) {
    this.set("balance", Value.fromString(value));
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Position",
      this.get("id")!.toString(),
      "deposits"
    );
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get withdrawals(): WithdrawalLoader {
    return new WithdrawalLoader(
      "Position",
      this.get("id")!.toString(),
      "withdrawals"
    );
  }

  get borrowCount(): i32 {
    let value = this.get("borrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowCount(value: i32) {
    this.set("borrowCount", Value.fromI32(value));
  }

  get borrows(): BorrowLoader {
    return new BorrowLoader("Position", this.get("id")!.toString(), "borrows");
  }

  get repayCount(): i32 {
    let value = this.get("repayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayCount(value: i32) {
    this.set("repayCount", Value.fromI32(value));
  }

  get repays(): RepayLoader {
    return new RepayLoader("Position", this.get("id")!.toString(), "repays");
  }

  get snapshots(): PositionSnapshotLoader {
    return new PositionSnapshotLoader(
      "Position",
      this.get("id")!.toString(),
      "snapshots"
    );
  }
}

export class PositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PositionSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PositionSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PositionSnapshot | null {
    return changetype<PositionSnapshot | null>(
      store.get_in_block("PositionSnapshot", id)
    );
  }

  static load(id: string): PositionSnapshot | null {
    return changetype<PositionSnapshot | null>(
      store.get("PositionSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get balance(): string {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set balance(value: string) {
    this.set("balance", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PositionCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PositionCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PositionCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PositionCounter | null {
    return changetype<PositionCounter | null>(
      store.get_in_block("PositionCounter", id)
    );
  }

  static load(id: string): PositionCounter | null {
    return changetype<PositionCounter | null>(store.get("PositionCounter", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nextCount(): i32 {
    let value = this.get("nextCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set nextCount(value: i32) {
    this.set("nextCount", Value.fromI32(value));
  }
}

export class TapiocaProtocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TapiocaProtocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TapiocaProtocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TapiocaProtocol", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TapiocaProtocol | null {
    return changetype<TapiocaProtocol | null>(
      store.get_in_block("TapiocaProtocol", id)
    );
  }

  static load(id: string): TapiocaProtocol | null {
    return changetype<TapiocaProtocol | null>(store.get("TapiocaProtocol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get slug(): string {
    let value = this.get("slug");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set slug(value: string) {
    this.set("slug", Value.fromString(value));
  }

  get schemaVersion(): string {
    let value = this.get("schemaVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set schemaVersion(value: string) {
    this.set("schemaVersion", Value.fromString(value));
  }

  get subgraphVersion(): string {
    let value = this.get("subgraphVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set subgraphVersion(value: string) {
    this.set("subgraphVersion", Value.fromString(value));
  }

  get methodologyVersion(): string {
    let value = this.get("methodologyVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set methodologyVersion(value: string) {
    this.set("methodologyVersion", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get penroseAddress(): Bytes {
    let value = this.get("penroseAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set penroseAddress(value: Bytes) {
    this.set("penroseAddress", Value.fromBytes(value));
  }

  get yieldBox(): string | null {
    let value = this.get("yieldBox");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set yieldBox(value: string | null) {
    if (!value) {
      this.unset("yieldBox");
    } else {
      this.set("yieldBox", Value.fromString(<string>value));
    }
  }

  get markets(): MarketLoader {
    return new MarketLoader(
      "TapiocaProtocol",
      this.get("id")!.toString(),
      "markets"
    );
  }

  get marketIds(): Array<string> {
    let value = this.get("marketIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set marketIds(value: Array<string>) {
    this.set("marketIds", Value.fromStringArray(value));
  }
}

export class YieldBox extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save YieldBox entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type YieldBox must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("YieldBox", id.toString(), this);
    }
  }

  static loadInBlock(id: string): YieldBox | null {
    return changetype<YieldBox | null>(store.get_in_block("YieldBox", id));
  }

  static load(id: string): YieldBox | null {
    return changetype<YieldBox | null>(store.get("YieldBox", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get yieldBoxAddress(): Bytes {
    let value = this.get("yieldBoxAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set yieldBoxAddress(value: Bytes) {
    this.set("yieldBoxAddress", Value.fromBytes(value));
  }

  get protocol(): TapiocaProtocolLoader {
    return new TapiocaProtocolLoader(
      "YieldBox",
      this.get("id")!.toString(),
      "protocol"
    );
  }

  get assetTotals(): Array<string> {
    let value = this.get("assetTotals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set assetTotals(value: Array<string>) {
    this.set("assetTotals", Value.fromStringArray(value));
  }
}

export class TokenUsdValueLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenUsdValue[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenUsdValue[]>(value);
  }
}

export class RemoteTOFTMetaLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RemoteTOFTMeta[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RemoteTOFTMeta[]>(value);
  }
}

export class TeleportReceivedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TeleportReceived[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TeleportReceived[]>(value);
  }
}

export class BorrowLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Borrow[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Borrow[]>(value);
  }
}

export class DepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deposit[]>(value);
  }
}

export class WithdrawalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Withdrawal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Withdrawal[]>(value);
  }
}

export class PositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Position[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Position[]>(value);
  }
}

export class MarketStateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MarketState[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MarketState[]>(value);
  }
}

export class RepayLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Repay[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Repay[]>(value);
  }
}

export class PositionSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PositionSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PositionSnapshot[]>(value);
  }
}

export class MarketLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Market[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Market[]>(value);
  }
}

export class TapiocaProtocolLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TapiocaProtocol[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TapiocaProtocol[]>(value);
  }
}
