// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalBorrow extends ethereum.Event {
  get params(): ApprovalBorrow__Params {
    return new ApprovalBorrow__Params(this);
  }
}

export class ApprovalBorrow__Params {
  _event: ApprovalBorrow;

  constructor(event: ApprovalBorrow) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetOracleDataUpdated extends ethereum.Event {
  get params(): AssetOracleDataUpdated__Params {
    return new AssetOracleDataUpdated__Params(this);
  }
}

export class AssetOracleDataUpdated__Params {
  _event: AssetOracleDataUpdated;

  constructor(event: AssetOracleDataUpdated) {
    this._event = event;
  }
}

export class AssetOracleUpdated extends ethereum.Event {
  get params(): AssetOracleUpdated__Params {
    return new AssetOracleUpdated__Params(this);
  }
}

export class AssetOracleUpdated__Params {
  _event: AssetOracleUpdated;

  constructor(event: AssetOracleUpdated) {
    this._event = event;
  }

  get oldVal(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVal(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConservatorUpdated extends ethereum.Event {
  get params(): ConservatorUpdated__Params {
    return new ConservatorUpdated__Params(this);
  }
}

export class ConservatorUpdated__Params {
  _event: ConservatorUpdated;

  constructor(event: ConservatorUpdated) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _new(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DebtRateAgainstEthUpdated extends ethereum.Event {
  get params(): DebtRateAgainstEthUpdated__Params {
    return new DebtRateAgainstEthUpdated__Params(this);
  }
}

export class DebtRateAgainstEthUpdated__Params {
  _event: DebtRateAgainstEthUpdated;

  constructor(event: DebtRateAgainstEthUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class ExchangeRateDurationUpdated extends ethereum.Event {
  get params(): ExchangeRateDurationUpdated__Params {
    return new ExchangeRateDurationUpdated__Params(this);
  }
}

export class ExchangeRateDurationUpdated__Params {
  _event: ExchangeRateDurationUpdated;

  constructor(event: ExchangeRateDurationUpdated) {
    this._event = event;
  }

  get _oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LeverageExecutorSet extends ethereum.Event {
  get params(): LeverageExecutorSet__Params {
    return new LeverageExecutorSet__Params(this);
  }
}

export class LeverageExecutorSet__Params {
  _event: LeverageExecutorSet;

  constructor(event: LeverageExecutorSet) {
    this._event = event;
  }

  get oldVal(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVal(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get users(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get liquidatorReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get protocolReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get repayedAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateralShareRemoved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LiquidationMaxSlippageUpdated extends ethereum.Event {
  get params(): LiquidationMaxSlippageUpdated__Params {
    return new LiquidationMaxSlippageUpdated__Params(this);
  }
}

export class LiquidationMaxSlippageUpdated__Params {
  _event: LiquidationMaxSlippageUpdated;

  constructor(event: LiquidationMaxSlippageUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidationMultiplierUpdated extends ethereum.Event {
  get params(): LiquidationMultiplierUpdated__Params {
    return new LiquidationMultiplierUpdated__Params(this);
  }
}

export class LiquidationMultiplierUpdated__Params {
  _event: LiquidationMultiplierUpdated;

  constructor(event: LiquidationMultiplierUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogAccrue extends ethereum.Event {
  get params(): LogAccrue__Params {
    return new LogAccrue__Params(this);
  }
}

export class LogAccrue__Params {
  _event: LogAccrue;

  constructor(event: LogAccrue) {
    this._event = event;
  }

  get accruedAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogAddCollateral extends ethereum.Event {
  get params(): LogAddCollateral__Params {
    return new LogAddCollateral__Params(this);
  }
}

export class LogAddCollateral__Params {
  _event: LogAddCollateral;

  constructor(event: LogAddCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogBorrow extends ethereum.Event {
  get params(): LogBorrow__Params {
    return new LogBorrow__Params(this);
  }
}

export class LogBorrow__Params {
  _event: LogBorrow;

  constructor(event: LogBorrow) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogBorrowCapUpdated extends ethereum.Event {
  get params(): LogBorrowCapUpdated__Params {
    return new LogBorrowCapUpdated__Params(this);
  }
}

export class LogBorrowCapUpdated__Params {
  _event: LogBorrowCapUpdated;

  constructor(event: LogBorrowCapUpdated) {
    this._event = event;
  }

  get _oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogExchangeRate extends ethereum.Event {
  get params(): LogExchangeRate__Params {
    return new LogExchangeRate__Params(this);
  }
}

export class LogExchangeRate__Params {
  _event: LogExchangeRate;

  constructor(event: LogExchangeRate) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogRemoveCollateral extends ethereum.Event {
  get params(): LogRemoveCollateral__Params {
    return new LogRemoveCollateral__Params(this);
  }
}

export class LogRemoveCollateral__Params {
  _event: LogRemoveCollateral;

  constructor(event: LogRemoveCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRepay extends ethereum.Event {
  get params(): LogRepay__Params {
    return new LogRepay__Params(this);
  }
}

export class LogRepay__Params {
  _event: LogRepay;

  constructor(event: LogRepay) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MaxDebtRateUpdated extends ethereum.Event {
  get params(): MaxDebtRateUpdated__Params {
    return new MaxDebtRateUpdated__Params(this);
  }
}

export class MaxDebtRateUpdated__Params {
  _event: MaxDebtRateUpdated;

  constructor(event: MaxDebtRateUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinDebtRateUpdated extends ethereum.Event {
  get params(): MinDebtRateUpdated__Params {
    return new MinDebtRateUpdated__Params(this);
  }
}

export class MinDebtRateUpdated__Params {
  _event: MinDebtRateUpdated;

  constructor(event: MinDebtRateUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OracleDataUpdated extends ethereum.Event {
  get params(): OracleDataUpdated__Params {
    return new OracleDataUpdated__Params(this);
  }
}

export class OracleDataUpdated__Params {
  _event: OracleDataUpdated;

  constructor(event: OracleDataUpdated) {
    this._event = event;
  }
}

export class OracleUpdated extends ethereum.Event {
  get params(): OracleUpdated__Params {
    return new OracleUpdated__Params(this);
  }
}

export class OracleUpdated__Params {
  _event: OracleUpdated;

  constructor(event: OracleUpdated) {
    this._event = event;
  }

  get newAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PausedUpdated extends ethereum.Event {
  get params(): PausedUpdated__Params {
    return new PausedUpdated__Params(this);
  }
}

export class PausedUpdated__Params {
  _event: PausedUpdated;

  constructor(event: PausedUpdated) {
    this._event = event;
  }

  get _type(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get oldState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get newState(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateMinMaxMintFee extends ethereum.Event {
  get params(): UpdateMinMaxMintFee__Params {
    return new UpdateMinMaxMintFee__Params(this);
  }
}

export class UpdateMinMaxMintFee__Params {
  _event: UpdateMinMaxMintFee;

  constructor(event: UpdateMinMaxMintFee) {
    this._event = event;
  }

  get oldMin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMin(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldMax(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newMax(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateMinMaxMintRange extends ethereum.Event {
  get params(): UpdateMinMaxMintRange__Params {
    return new UpdateMinMaxMintRange__Params(this);
  }
}

export class UpdateMinMaxMintRange__Params {
  _event: UpdateMinMaxMintRange;

  constructor(event: UpdateMinMaxMintRange) {
    this._event = event;
  }

  get oldMin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMin(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldMax(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newMax(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ValueUpdated extends ethereum.Event {
  get params(): ValueUpdated__Params {
    return new ValueUpdated__Params(this);
  }
}

export class ValueUpdated__Params {
  _event: ValueUpdated;

  constructor(event: ValueUpdated) {
    this._event = event;
  }

  get valType(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BigBang___totalBorrowResultValue0Struct extends ethereum.Tuple {
  get elastic(): BigInt {
    return this[0].toBigInt();
  }

  get base(): BigInt {
    return this[1].toBigInt();
  }
}

export class BigBang__accrueInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDebtRate(): BigInt {
    return this.value0;
  }

  getLastAccrued(): BigInt {
    return this.value1;
  }
}

export class BigBang__computeTVLInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountToSolvency(): BigInt {
    return this.value0;
  }

  getMinTVL(): BigInt {
    return this.value1;
  }

  getMaxTVL(): BigInt {
    return this.value2;
  }
}

export class BigBang__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class BigBang__executeResult {
  value0: Array<boolean>;
  value1: Array<Bytes>;

  constructor(value0: Array<boolean>, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromBytesArray(this.value1));
    return map;
  }

  getSuccesses(): Array<boolean> {
    return this.value0;
  }

  getResults(): Array<Bytes> {
    return this.value1;
  }
}

export class BigBang__updateExchangeRateResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUpdated(): boolean {
    return this.value0;
  }

  getRate(): BigInt {
    return this.value1;
  }
}

export class BigBang extends ethereum.SmartContract {
  static bind(address: Address): BigBang {
    return new BigBang("BigBang", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _asset(): Address {
    let result = super.call("_asset", "_asset():(address)", []);

    return result[0].toAddress();
  }

  try__asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("_asset", "_asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _assetId(): BigInt {
    let result = super.call("_assetId", "_assetId():(uint256)", []);

    return result[0].toBigInt();
  }

  try__assetId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_assetId", "_assetId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _collateral(): Address {
    let result = super.call("_collateral", "_collateral():(address)", []);

    return result[0].toAddress();
  }

  try__collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("_collateral", "_collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _collateralId(): BigInt {
    let result = super.call("_collateralId", "_collateralId():(uint256)", []);

    return result[0].toBigInt();
  }

  try__collateralId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_collateralId",
      "_collateralId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _collateralizationRate(): BigInt {
    let result = super.call(
      "_collateralizationRate",
      "_collateralizationRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__collateralizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_collateralizationRate",
      "_collateralizationRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _conservator(): Address {
    let result = super.call("_conservator", "_conservator():(address)", []);

    return result[0].toAddress();
  }

  try__conservator(): ethereum.CallResult<Address> {
    let result = super.tryCall("_conservator", "_conservator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _exchangeRate(): BigInt {
    let result = super.call("_exchangeRate", "_exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try__exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_exchangeRate",
      "_exchangeRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _leverageExecutor(): Address {
    let result = super.call(
      "_leverageExecutor",
      "_leverageExecutor():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try__leverageExecutor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_leverageExecutor",
      "_leverageExecutor():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _liquidationBonusAmount(): BigInt {
    let result = super.call(
      "_liquidationBonusAmount",
      "_liquidationBonusAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__liquidationBonusAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_liquidationBonusAmount",
      "_liquidationBonusAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _liquidationCollateralizationRate(): BigInt {
    let result = super.call(
      "_liquidationCollateralizationRate",
      "_liquidationCollateralizationRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__liquidationCollateralizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_liquidationCollateralizationRate",
      "_liquidationCollateralizationRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _liquidationMultiplier(): BigInt {
    let result = super.call(
      "_liquidationMultiplier",
      "_liquidationMultiplier():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__liquidationMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_liquidationMultiplier",
      "_liquidationMultiplier():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _maxLiquidationSlippage(): BigInt {
    let result = super.call(
      "_maxLiquidationSlippage",
      "_maxLiquidationSlippage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__maxLiquidationSlippage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_maxLiquidationSlippage",
      "_maxLiquidationSlippage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _maxLiquidatorReward(): BigInt {
    let result = super.call(
      "_maxLiquidatorReward",
      "_maxLiquidatorReward():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__maxLiquidatorReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_maxLiquidatorReward",
      "_maxLiquidatorReward():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _minLiquidatorReward(): BigInt {
    let result = super.call(
      "_minLiquidatorReward",
      "_minLiquidatorReward():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__minLiquidatorReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_minLiquidatorReward",
      "_minLiquidatorReward():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _oracle(): Address {
    let result = super.call("_oracle", "_oracle():(address)", []);

    return result[0].toAddress();
  }

  try__oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("_oracle", "_oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _oracleData(): Bytes {
    let result = super.call("_oracleData", "_oracleData():(bytes)", []);

    return result[0].toBytes();
  }

  try__oracleData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("_oracleData", "_oracleData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _pauseOptions(_pauseProp: i32): boolean {
    let result = super.call("_pauseOptions", "_pauseOptions(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_pauseProp)),
    ]);

    return result[0].toBoolean();
  }

  try__pauseOptions(_pauseProp: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("_pauseOptions", "_pauseOptions(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_pauseProp)),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _pearlmit(): Address {
    let result = super.call("_pearlmit", "_pearlmit():(address)", []);

    return result[0].toAddress();
  }

  try__pearlmit(): ethereum.CallResult<Address> {
    let result = super.tryCall("_pearlmit", "_pearlmit():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _penrose(): Address {
    let result = super.call("_penrose", "_penrose():(address)", []);

    return result[0].toAddress();
  }

  try__penrose(): ethereum.CallResult<Address> {
    let result = super.tryCall("_penrose", "_penrose():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _protocolFee(): BigInt {
    let result = super.call("_protocolFee", "_protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try__protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_protocolFee", "_protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _rateTimestamp(): BigInt {
    let result = super.call("_rateTimestamp", "_rateTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try__rateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_rateTimestamp",
      "_rateTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _rateValidDuration(): BigInt {
    let result = super.call(
      "_rateValidDuration",
      "_rateValidDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__rateValidDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_rateValidDuration",
      "_rateValidDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalBorrow(): BigBang___totalBorrowResultValue0Struct {
    let result = super.call(
      "_totalBorrow",
      "_totalBorrow():((uint128,uint128))",
      [],
    );

    return changetype<BigBang___totalBorrowResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try__totalBorrow(): ethereum.CallResult<BigBang___totalBorrowResultValue0Struct> {
    let result = super.tryCall(
      "_totalBorrow",
      "_totalBorrow():((uint128,uint128))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BigBang___totalBorrowResultValue0Struct>(value[0].toTuple()),
    );
  }

  _totalBorrowCap(): BigInt {
    let result = super.call(
      "_totalBorrowCap",
      "_totalBorrowCap():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__totalBorrowCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_totalBorrowCap",
      "_totalBorrowCap():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalCollateralShare(): BigInt {
    let result = super.call(
      "_totalCollateralShare",
      "_totalCollateralShare():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try__totalCollateralShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_totalCollateralShare",
      "_totalCollateralShare():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _userBorrowPart(_user: Address): BigInt {
    let result = super.call(
      "_userBorrowPart",
      "_userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try__userBorrowPart(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_userBorrowPart",
      "_userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _userCollateralShare(_user: Address): BigInt {
    let result = super.call(
      "_userCollateralShare",
      "_userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try__userCollateralShare(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_userCollateralShare",
      "_userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _yieldBox(): Address {
    let result = super.call("_yieldBox", "_yieldBox():(address)", []);

    return result[0].toAddress();
  }

  try__yieldBox(): ethereum.CallResult<Address> {
    let result = super.tryCall("_yieldBox", "_yieldBox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accrueInfo(): BigBang__accrueInfoResult {
    let result = super.call("accrueInfo", "accrueInfo():(uint64,uint64)", []);

    return new BigBang__accrueInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_accrueInfo(): ethereum.CallResult<BigBang__accrueInfoResult> {
    let result = super.tryCall(
      "accrueInfo",
      "accrueInfo():(uint64,uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__accrueInfoResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowanceBorrow(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowanceBorrow",
      "allowanceBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_allowanceBorrow(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowanceBorrow",
      "allowanceBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approveBorrow(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "approveBorrow",
      "approveBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_approveBorrow(
    spender: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveBorrow",
      "approveBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assetOracle(): Address {
    let result = super.call("assetOracle", "assetOracle():(address)", []);

    return result[0].toAddress();
  }

  try_assetOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("assetOracle", "assetOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetOracleData(): Bytes {
    let result = super.call("assetOracleData", "assetOracleData():(bytes)", []);

    return result[0].toBytes();
  }

  try_assetOracleData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "assetOracleData",
      "assetOracleData():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowModule(): Address {
    let result = super.call("borrowModule", "borrowModule():(address)", []);

    return result[0].toAddress();
  }

  try_borrowModule(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrowModule", "borrowModule():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralModule(): Address {
    let result = super.call(
      "collateralModule",
      "collateralModule():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_collateralModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralModule",
      "collateralModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeClosingFactor(
    borrowPart: BigInt,
    collateralPartInAsset: BigInt,
    ratesPrecision: BigInt,
  ): BigInt {
    let result = super.call(
      "computeClosingFactor",
      "computeClosingFactor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowPart),
        ethereum.Value.fromUnsignedBigInt(collateralPartInAsset),
        ethereum.Value.fromUnsignedBigInt(ratesPrecision),
      ],
    );

    return result[0].toBigInt();
  }

  try_computeClosingFactor(
    borrowPart: BigInt,
    collateralPartInAsset: BigInt,
    ratesPrecision: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeClosingFactor",
      "computeClosingFactor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowPart),
        ethereum.Value.fromUnsignedBigInt(collateralPartInAsset),
        ethereum.Value.fromUnsignedBigInt(ratesPrecision),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeLiquidatorReward(user: Address, _exchangeRate: BigInt): BigInt {
    let result = super.call(
      "computeLiquidatorReward",
      "computeLiquidatorReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate),
      ],
    );

    return result[0].toBigInt();
  }

  try_computeLiquidatorReward(
    user: Address,
    _exchangeRate: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeLiquidatorReward",
      "computeLiquidatorReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeOpenInterestMintable(): BigInt {
    let result = super.call(
      "computeOpenInterestMintable",
      "computeOpenInterestMintable():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_computeOpenInterestMintable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeOpenInterestMintable",
      "computeOpenInterestMintable():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeTVLInfo(
    user: Address,
    _exchangeRate: BigInt,
  ): BigBang__computeTVLInfoResult {
    let result = super.call(
      "computeTVLInfo",
      "computeTVLInfo(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate),
      ],
    );

    return new BigBang__computeTVLInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_computeTVLInfo(
    user: Address,
    _exchangeRate: BigInt,
  ): ethereum.CallResult<BigBang__computeTVLInfoResult> {
    let result = super.tryCall(
      "computeTVLInfo",
      "computeTVLInfo(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__computeTVLInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  debtMinted(): BigInt {
    let result = super.call("debtMinted", "debtMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtMinted", "debtMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtRateAgainstEthMarket(): BigInt {
    let result = super.call(
      "debtRateAgainstEthMarket",
      "debtRateAgainstEthMarket():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_debtRateAgainstEthMarket(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtRateAgainstEthMarket",
      "debtRateAgainstEthMarket():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): BigBang__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new BigBang__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<BigBang__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  execute(
    modules: Array<i32>,
    calls: Array<Bytes>,
    revertOnFail: boolean,
  ): BigBang__executeResult {
    let result = super.call(
      "execute",
      "execute(uint8[],bytes[],bool):(bool[],bytes[])",
      [
        ethereum.Value.fromI32Array(modules),
        ethereum.Value.fromBytesArray(calls),
        ethereum.Value.fromBoolean(revertOnFail),
      ],
    );

    return new BigBang__executeResult(
      result[0].toBooleanArray(),
      result[1].toBytesArray(),
    );
  }

  try_execute(
    modules: Array<i32>,
    calls: Array<Bytes>,
    revertOnFail: boolean,
  ): ethereum.CallResult<BigBang__executeResult> {
    let result = super.tryCall(
      "execute",
      "execute(uint8[],bytes[],bool):(bool[],bytes[])",
      [
        ethereum.Value.fromI32Array(modules),
        ethereum.Value.fromBytesArray(calls),
        ethereum.Value.fromBoolean(revertOnFail),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__executeResult(
        value[0].toBooleanArray(),
        value[1].toBytesArray(),
      ),
    );
  }

  getDebtRate(): BigInt {
    let result = super.call("getDebtRate", "getDebtRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getDebtRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDebtRate", "getDebtRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDebt(): BigInt {
    let result = super.call("getTotalDebt", "getTotalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTotalDebt", "getTotalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMainMarket(): boolean {
    let result = super.call("isMainMarket", "isMainMarket():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMainMarket(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMainMarket", "isMainMarket():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  leverageModule(): Address {
    let result = super.call("leverageModule", "leverageModule():(address)", []);

    return result[0].toAddress();
  }

  try_leverageModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leverageModule",
      "leverageModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationModule(): Address {
    let result = super.call(
      "liquidationModule",
      "liquidationModule():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_liquidationModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidationModule",
      "liquidationModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxDebtRate(): BigInt {
    let result = super.call("maxDebtRate", "maxDebtRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxDebtRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDebtRate", "maxDebtRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMintFee(): BigInt {
    let result = super.call("maxMintFee", "maxMintFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxMintFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMintFee", "maxMintFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMintFeeStart(): BigInt {
    let result = super.call(
      "maxMintFeeStart",
      "maxMintFeeStart():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxMintFeeStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxMintFeeStart",
      "maxMintFeeStart():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDebtRate(): BigInt {
    let result = super.call("minDebtRate", "minDebtRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minDebtRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDebtRate", "minDebtRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMintFee(): BigInt {
    let result = super.call("minMintFee", "minMintFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minMintFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minMintFee", "minMintFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMintFeeStart(): BigInt {
    let result = super.call(
      "minMintFeeStart",
      "minMintFeeStart():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minMintFeeStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minMintFeeStart",
      "minMintFeeStart():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  refreshPenroseFees(): BigInt {
    let result = super.call(
      "refreshPenroseFees",
      "refreshPenroseFees():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_refreshPenroseFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refreshPenroseFees",
      "refreshPenroseFees():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateExchangeRate(): BigBang__updateExchangeRateResult {
    let result = super.call(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      [],
    );

    return new BigBang__updateExchangeRateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
    );
  }

  try_updateExchangeRate(): ethereum.CallResult<BigBang__updateExchangeRateResult> {
    let result = super.tryCall(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__updateExchangeRateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
      ),
    );
  }

  viewOpenInterest(): BigInt {
    let result = super.call(
      "viewOpenInterest",
      "viewOpenInterest():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_viewOpenInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewOpenInterest",
      "viewOpenInterest():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AccrueCall extends ethereum.Call {
  get inputs(): AccrueCall__Inputs {
    return new AccrueCall__Inputs(this);
  }

  get outputs(): AccrueCall__Outputs {
    return new AccrueCall__Outputs(this);
  }
}

export class AccrueCall__Inputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AccrueCall__Outputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveBorrowCall extends ethereum.Call {
  get inputs(): ApproveBorrowCall__Inputs {
    return new ApproveBorrowCall__Inputs(this);
  }

  get outputs(): ApproveBorrowCall__Outputs {
    return new ApproveBorrowCall__Outputs(this);
  }
}

export class ApproveBorrowCall__Inputs {
  _call: ApproveBorrowCall;

  constructor(call: ApproveBorrowCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveBorrowCall__Outputs {
  _call: ApproveBorrowCall;

  constructor(call: ApproveBorrowCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ComputeOpenInterestMintableCall extends ethereum.Call {
  get inputs(): ComputeOpenInterestMintableCall__Inputs {
    return new ComputeOpenInterestMintableCall__Inputs(this);
  }

  get outputs(): ComputeOpenInterestMintableCall__Outputs {
    return new ComputeOpenInterestMintableCall__Outputs(this);
  }
}

export class ComputeOpenInterestMintableCall__Inputs {
  _call: ComputeOpenInterestMintableCall;

  constructor(call: ComputeOpenInterestMintableCall) {
    this._call = call;
  }
}

export class ComputeOpenInterestMintableCall__Outputs {
  _call: ComputeOpenInterestMintableCall;

  constructor(call: ComputeOpenInterestMintableCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get modules(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get successes(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get initData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class PermitBorrowCall extends ethereum.Call {
  get inputs(): PermitBorrowCall__Inputs {
    return new PermitBorrowCall__Inputs(this);
  }

  get outputs(): PermitBorrowCall__Outputs {
    return new PermitBorrowCall__Outputs(this);
  }
}

export class PermitBorrowCall__Inputs {
  _call: PermitBorrowCall;

  constructor(call: PermitBorrowCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitBorrowCall__Outputs {
  _call: PermitBorrowCall;

  constructor(call: PermitBorrowCall) {
    this._call = call;
  }
}

export class RefreshPenroseFeesCall extends ethereum.Call {
  get inputs(): RefreshPenroseFeesCall__Inputs {
    return new RefreshPenroseFeesCall__Inputs(this);
  }

  get outputs(): RefreshPenroseFeesCall__Outputs {
    return new RefreshPenroseFeesCall__Outputs(this);
  }
}

export class RefreshPenroseFeesCall__Inputs {
  _call: RefreshPenroseFeesCall;

  constructor(call: RefreshPenroseFeesCall) {
    this._call = call;
  }
}

export class RefreshPenroseFeesCall__Outputs {
  _call: RefreshPenroseFeesCall;

  constructor(call: RefreshPenroseFeesCall) {
    this._call = call;
  }

  get feeShares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueEthCall extends ethereum.Call {
  get inputs(): RescueEthCall__Inputs {
    return new RescueEthCall__Inputs(this);
  }

  get outputs(): RescueEthCall__Outputs {
    return new RescueEthCall__Outputs(this);
  }
}

export class RescueEthCall__Inputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RescueEthCall__Outputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }
}

export class SetAssetOracleCall extends ethereum.Call {
  get inputs(): SetAssetOracleCall__Inputs {
    return new SetAssetOracleCall__Inputs(this);
  }

  get outputs(): SetAssetOracleCall__Outputs {
    return new SetAssetOracleCall__Outputs(this);
  }
}

export class SetAssetOracleCall__Inputs {
  _call: SetAssetOracleCall;

  constructor(call: SetAssetOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetAssetOracleCall__Outputs {
  _call: SetAssetOracleCall;

  constructor(call: SetAssetOracleCall) {
    this._call = call;
  }
}

export class SetBigBangConfigCall extends ethereum.Call {
  get inputs(): SetBigBangConfigCall__Inputs {
    return new SetBigBangConfigCall__Inputs(this);
  }

  get outputs(): SetBigBangConfigCall__Outputs {
    return new SetBigBangConfigCall__Outputs(this);
  }
}

export class SetBigBangConfigCall__Inputs {
  _call: SetBigBangConfigCall;

  constructor(call: SetBigBangConfigCall) {
    this._call = call;
  }

  get _minDebtRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxDebtRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _debtRateAgainstEthMarket(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _liquidationMultiplier(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetBigBangConfigCall__Outputs {
  _call: SetBigBangConfigCall;

  constructor(call: SetBigBangConfigCall) {
    this._call = call;
  }
}

export class SetLeverageExecutorCall extends ethereum.Call {
  get inputs(): SetLeverageExecutorCall__Inputs {
    return new SetLeverageExecutorCall__Inputs(this);
  }

  get outputs(): SetLeverageExecutorCall__Outputs {
    return new SetLeverageExecutorCall__Outputs(this);
  }
}

export class SetLeverageExecutorCall__Inputs {
  _call: SetLeverageExecutorCall;

  constructor(call: SetLeverageExecutorCall) {
    this._call = call;
  }

  get _executor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLeverageExecutorCall__Outputs {
  _call: SetLeverageExecutorCall;

  constructor(call: SetLeverageExecutorCall) {
    this._call = call;
  }
}

export class SetLiquidationMaxSlippageCall extends ethereum.Call {
  get inputs(): SetLiquidationMaxSlippageCall__Inputs {
    return new SetLiquidationMaxSlippageCall__Inputs(this);
  }

  get outputs(): SetLiquidationMaxSlippageCall__Outputs {
    return new SetLiquidationMaxSlippageCall__Outputs(this);
  }
}

export class SetLiquidationMaxSlippageCall__Inputs {
  _call: SetLiquidationMaxSlippageCall;

  constructor(call: SetLiquidationMaxSlippageCall) {
    this._call = call;
  }

  get _val(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidationMaxSlippageCall__Outputs {
  _call: SetLiquidationMaxSlippageCall;

  constructor(call: SetLiquidationMaxSlippageCall) {
    this._call = call;
  }
}

export class SetMarketConfigCall extends ethereum.Call {
  get inputs(): SetMarketConfigCall__Inputs {
    return new SetMarketConfigCall__Inputs(this);
  }

  get outputs(): SetMarketConfigCall__Outputs {
    return new SetMarketConfigCall__Outputs(this);
  }
}

export class SetMarketConfigCall__Inputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _conservator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _liquidationBonusAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minLiquidatorReward(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maxLiquidatorReward(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _totalBorrowCap(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _collateralizationRate(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _liquidationCollateralizationRate(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class SetMarketConfigCall__Outputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }
}

export class SetMinAndMaxMintFeeCall extends ethereum.Call {
  get inputs(): SetMinAndMaxMintFeeCall__Inputs {
    return new SetMinAndMaxMintFeeCall__Inputs(this);
  }

  get outputs(): SetMinAndMaxMintFeeCall__Outputs {
    return new SetMinAndMaxMintFeeCall__Outputs(this);
  }
}

export class SetMinAndMaxMintFeeCall__Inputs {
  _call: SetMinAndMaxMintFeeCall;

  constructor(call: SetMinAndMaxMintFeeCall) {
    this._call = call;
  }

  get _min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinAndMaxMintFeeCall__Outputs {
  _call: SetMinAndMaxMintFeeCall;

  constructor(call: SetMinAndMaxMintFeeCall) {
    this._call = call;
  }
}

export class SetMinAndMaxMintRangeCall extends ethereum.Call {
  get inputs(): SetMinAndMaxMintRangeCall__Inputs {
    return new SetMinAndMaxMintRangeCall__Inputs(this);
  }

  get outputs(): SetMinAndMaxMintRangeCall__Outputs {
    return new SetMinAndMaxMintRangeCall__Outputs(this);
  }
}

export class SetMinAndMaxMintRangeCall__Inputs {
  _call: SetMinAndMaxMintRangeCall;

  constructor(call: SetMinAndMaxMintRangeCall) {
    this._call = call;
  }

  get _min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinAndMaxMintRangeCall__Outputs {
  _call: SetMinAndMaxMintRangeCall;

  constructor(call: SetMinAndMaxMintRangeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall extends ethereum.Call {
  get inputs(): UpdateExchangeRateCall__Inputs {
    return new UpdateExchangeRateCall__Inputs(this);
  }

  get outputs(): UpdateExchangeRateCall__Outputs {
    return new UpdateExchangeRateCall__Outputs(this);
  }
}

export class UpdateExchangeRateCall__Inputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall__Outputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }

  get updated(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get rate(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdatePauseCall extends ethereum.Call {
  get inputs(): UpdatePauseCall__Inputs {
    return new UpdatePauseCall__Inputs(this);
  }

  get outputs(): UpdatePauseCall__Outputs {
    return new UpdatePauseCall__Outputs(this);
  }
}

export class UpdatePauseCall__Inputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }

  get _type(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get val(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdatePauseCall__Outputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }
}

export class UpdatePauseAllCall extends ethereum.Call {
  get inputs(): UpdatePauseAllCall__Inputs {
    return new UpdatePauseAllCall__Inputs(this);
  }

  get outputs(): UpdatePauseAllCall__Outputs {
    return new UpdatePauseAllCall__Outputs(this);
  }
}

export class UpdatePauseAllCall__Inputs {
  _call: UpdatePauseAllCall;

  constructor(call: UpdatePauseAllCall) {
    this._call = call;
  }

  get val(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class UpdatePauseAllCall__Outputs {
  _call: UpdatePauseAllCall;

  constructor(call: UpdatePauseAllCall) {
    this._call = call;
  }
}
