// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalBorrow extends ethereum.Event {
  get params(): ApprovalBorrow__Params {
    return new ApprovalBorrow__Params(this);
  }
}

export class ApprovalBorrow__Params {
  _event: ApprovalBorrow;

  constructor(event: ApprovalBorrow) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetOracleDataUpdated extends ethereum.Event {
  get params(): AssetOracleDataUpdated__Params {
    return new AssetOracleDataUpdated__Params(this);
  }
}

export class AssetOracleDataUpdated__Params {
  _event: AssetOracleDataUpdated;

  constructor(event: AssetOracleDataUpdated) {
    this._event = event;
  }
}

export class AssetOracleUpdated extends ethereum.Event {
  get params(): AssetOracleUpdated__Params {
    return new AssetOracleUpdated__Params(this);
  }
}

export class AssetOracleUpdated__Params {
  _event: AssetOracleUpdated;

  constructor(event: AssetOracleUpdated) {
    this._event = event;
  }

  get oldVal(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVal(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConservatorUpdated extends ethereum.Event {
  get params(): ConservatorUpdated__Params {
    return new ConservatorUpdated__Params(this);
  }
}

export class ConservatorUpdated__Params {
  _event: ConservatorUpdated;

  constructor(event: ConservatorUpdated) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _new(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DebtRateAgainstEthUpdated extends ethereum.Event {
  get params(): DebtRateAgainstEthUpdated__Params {
    return new DebtRateAgainstEthUpdated__Params(this);
  }
}

export class DebtRateAgainstEthUpdated__Params {
  _event: DebtRateAgainstEthUpdated;

  constructor(event: DebtRateAgainstEthUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExchangeRateDurationUpdated extends ethereum.Event {
  get params(): ExchangeRateDurationUpdated__Params {
    return new ExchangeRateDurationUpdated__Params(this);
  }
}

export class ExchangeRateDurationUpdated__Params {
  _event: ExchangeRateDurationUpdated;

  constructor(event: ExchangeRateDurationUpdated) {
    this._event = event;
  }

  get _oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LeverageExecutorSet extends ethereum.Event {
  get params(): LeverageExecutorSet__Params {
    return new LeverageExecutorSet__Params(this);
  }
}

export class LeverageExecutorSet__Params {
  _event: LeverageExecutorSet;

  constructor(event: LeverageExecutorSet) {
    this._event = event;
  }

  get oldVal(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVal(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get users(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get liquidatorReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get protocolReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get repayedAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateralShareRemoved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LiquidationMultiplierUpdated extends ethereum.Event {
  get params(): LiquidationMultiplierUpdated__Params {
    return new LiquidationMultiplierUpdated__Params(this);
  }
}

export class LiquidationMultiplierUpdated__Params {
  _event: LiquidationMultiplierUpdated;

  constructor(event: LiquidationMultiplierUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogAccrue extends ethereum.Event {
  get params(): LogAccrue__Params {
    return new LogAccrue__Params(this);
  }
}

export class LogAccrue__Params {
  _event: LogAccrue;

  constructor(event: LogAccrue) {
    this._event = event;
  }

  get accruedAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogAddCollateral extends ethereum.Event {
  get params(): LogAddCollateral__Params {
    return new LogAddCollateral__Params(this);
  }
}

export class LogAddCollateral__Params {
  _event: LogAddCollateral;

  constructor(event: LogAddCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogBorrow extends ethereum.Event {
  get params(): LogBorrow__Params {
    return new LogBorrow__Params(this);
  }
}

export class LogBorrow__Params {
  _event: LogBorrow;

  constructor(event: LogBorrow) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogBorrowCapUpdated extends ethereum.Event {
  get params(): LogBorrowCapUpdated__Params {
    return new LogBorrowCapUpdated__Params(this);
  }
}

export class LogBorrowCapUpdated__Params {
  _event: LogBorrowCapUpdated;

  constructor(event: LogBorrowCapUpdated) {
    this._event = event;
  }

  get _oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogExchangeRate extends ethereum.Event {
  get params(): LogExchangeRate__Params {
    return new LogExchangeRate__Params(this);
  }
}

export class LogExchangeRate__Params {
  _event: LogExchangeRate;

  constructor(event: LogExchangeRate) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogRemoveCollateral extends ethereum.Event {
  get params(): LogRemoveCollateral__Params {
    return new LogRemoveCollateral__Params(this);
  }
}

export class LogRemoveCollateral__Params {
  _event: LogRemoveCollateral;

  constructor(event: LogRemoveCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRepay extends ethereum.Event {
  get params(): LogRepay__Params {
    return new LogRepay__Params(this);
  }
}

export class LogRepay__Params {
  _event: LogRepay;

  constructor(event: LogRepay) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MaxDebtRateUpdated extends ethereum.Event {
  get params(): MaxDebtRateUpdated__Params {
    return new MaxDebtRateUpdated__Params(this);
  }
}

export class MaxDebtRateUpdated__Params {
  _event: MaxDebtRateUpdated;

  constructor(event: MaxDebtRateUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinDebtRateUpdated extends ethereum.Event {
  get params(): MinDebtRateUpdated__Params {
    return new MinDebtRateUpdated__Params(this);
  }
}

export class MinDebtRateUpdated__Params {
  _event: MinDebtRateUpdated;

  constructor(event: MinDebtRateUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OracleDataUpdated extends ethereum.Event {
  get params(): OracleDataUpdated__Params {
    return new OracleDataUpdated__Params(this);
  }
}

export class OracleDataUpdated__Params {
  _event: OracleDataUpdated;

  constructor(event: OracleDataUpdated) {
    this._event = event;
  }
}

export class OracleUpdated extends ethereum.Event {
  get params(): OracleUpdated__Params {
    return new OracleUpdated__Params(this);
  }
}

export class OracleUpdated__Params {
  _event: OracleUpdated;

  constructor(event: OracleUpdated) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PausedUpdated extends ethereum.Event {
  get params(): PausedUpdated__Params {
    return new PausedUpdated__Params(this);
  }
}

export class PausedUpdated__Params {
  _event: PausedUpdated;

  constructor(event: PausedUpdated) {
    this._event = event;
  }

  get _type(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get oldState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get newState(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateMinMaxMintFee extends ethereum.Event {
  get params(): UpdateMinMaxMintFee__Params {
    return new UpdateMinMaxMintFee__Params(this);
  }
}

export class UpdateMinMaxMintFee__Params {
  _event: UpdateMinMaxMintFee;

  constructor(event: UpdateMinMaxMintFee) {
    this._event = event;
  }

  get oldMin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMin(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldMax(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newMax(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateMinMaxMintRange extends ethereum.Event {
  get params(): UpdateMinMaxMintRange__Params {
    return new UpdateMinMaxMintRange__Params(this);
  }
}

export class UpdateMinMaxMintRange__Params {
  _event: UpdateMinMaxMintRange;

  constructor(event: UpdateMinMaxMintRange) {
    this._event = event;
  }

  get oldMin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMin(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oldMax(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newMax(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BigBang__accrueInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDebtRate(): BigInt {
    return this.value0;
  }

  getLastAccrued(): BigInt {
    return this.value1;
  }
}

export class BigBang__borrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPart(): BigInt {
    return this.value0;
  }

  getShare(): BigInt {
    return this.value1;
  }
}

export class BigBang__computeTVLInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountToSolvency(): BigInt {
    return this.value0;
  }

  getMinTVL(): BigInt {
    return this.value1;
  }

  getMaxTVL(): BigInt {
    return this.value2;
  }
}

export class BigBang__executeResult {
  value0: Array<boolean>;
  value1: Array<string>;

  constructor(value0: Array<boolean>, value1: Array<string>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    return map;
  }

  getSuccesses(): Array<boolean> {
    return this.value0;
  }

  getResults(): Array<string> {
    return this.value1;
  }
}

export class BigBang__totalBorrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getElastic(): BigInt {
    return this.value0;
  }

  getBase(): BigInt {
    return this.value1;
  }
}

export class BigBang__updateExchangeRateResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUpdated(): boolean {
    return this.value0;
  }

  getRate(): BigInt {
    return this.value1;
  }
}

export class BigBang extends ethereum.SmartContract {
  static bind(address: Address): BigBang {
    return new BigBang("BigBang", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  accrueInfo(): BigBang__accrueInfoResult {
    let result = super.call("accrueInfo", "accrueInfo():(uint64,uint64)", []);

    return new BigBang__accrueInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_accrueInfo(): ethereum.CallResult<BigBang__accrueInfoResult> {
    let result = super.tryCall(
      "accrueInfo",
      "accrueInfo():(uint64,uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__accrueInfoResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowanceBorrow(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowanceBorrow",
      "allowanceBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowanceBorrow(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowanceBorrow",
      "allowanceBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approveBorrow(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "approveBorrow",
      "approveBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_approveBorrow(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveBorrow",
      "approveBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetId(): BigInt {
    let result = super.call("assetId", "assetId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_assetId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetId", "assetId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetOracle(): Address {
    let result = super.call("assetOracle", "assetOracle():(address)", []);

    return result[0].toAddress();
  }

  try_assetOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("assetOracle", "assetOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetOracleData(): Bytes {
    let result = super.call("assetOracleData", "assetOracleData():(bytes)", []);

    return result[0].toBytes();
  }

  try_assetOracleData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "assetOracleData",
      "assetOracleData():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrow(from: Address, to: Address, amount: BigInt): BigBang__borrowResult {
    let result = super.call(
      "borrow",
      "borrow(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new BigBang__borrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_borrow(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<BigBang__borrowResult> {
    let result = super.tryCall(
      "borrow",
      "borrow(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__borrowResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  borrowModule(): Address {
    let result = super.call("borrowModule", "borrowModule():(address)", []);

    return result[0].toAddress();
  }

  try_borrowModule(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrowModule", "borrowModule():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  buyCollateral(
    from: Address,
    borrowAmount: BigInt,
    supplyAmount: BigInt,
    data: Bytes
  ): BigInt {
    let result = super.call(
      "buyCollateral",
      "buyCollateral(address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromUnsignedBigInt(supplyAmount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyCollateral(
    from: Address,
    borrowAmount: BigInt,
    supplyAmount: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyCollateral",
      "buyCollateral(address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromUnsignedBigInt(supplyAmount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  callerFee(): BigInt {
    let result = super.call("callerFee", "callerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_callerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("callerFee", "callerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralId(): BigInt {
    let result = super.call("collateralId", "collateralId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collateralId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collateralId", "collateralId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralModule(): Address {
    let result = super.call(
      "collateralModule",
      "collateralModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralModule",
      "collateralModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralizationRate(): BigInt {
    let result = super.call(
      "collateralizationRate",
      "collateralizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralizationRate",
      "collateralizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeClosingFactor(
    borrowPart: BigInt,
    collateralPartInAsset: BigInt,
    ratesPrecision: BigInt
  ): BigInt {
    let result = super.call(
      "computeClosingFactor",
      "computeClosingFactor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowPart),
        ethereum.Value.fromUnsignedBigInt(collateralPartInAsset),
        ethereum.Value.fromUnsignedBigInt(ratesPrecision)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeClosingFactor(
    borrowPart: BigInt,
    collateralPartInAsset: BigInt,
    ratesPrecision: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeClosingFactor",
      "computeClosingFactor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowPart),
        ethereum.Value.fromUnsignedBigInt(collateralPartInAsset),
        ethereum.Value.fromUnsignedBigInt(ratesPrecision)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeLiquidatorReward(user: Address, _exchangeRate: BigInt): BigInt {
    let result = super.call(
      "computeLiquidatorReward",
      "computeLiquidatorReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeLiquidatorReward(
    user: Address,
    _exchangeRate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeLiquidatorReward",
      "computeLiquidatorReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeTVLInfo(
    user: Address,
    _exchangeRate: BigInt
  ): BigBang__computeTVLInfoResult {
    let result = super.call(
      "computeTVLInfo",
      "computeTVLInfo(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return new BigBang__computeTVLInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_computeTVLInfo(
    user: Address,
    _exchangeRate: BigInt
  ): ethereum.CallResult<BigBang__computeTVLInfoResult> {
    let result = super.tryCall(
      "computeTVLInfo",
      "computeTVLInfo(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__computeTVLInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  conservator(): Address {
    let result = super.call("conservator", "conservator():(address)", []);

    return result[0].toAddress();
  }

  try_conservator(): ethereum.CallResult<Address> {
    let result = super.tryCall("conservator", "conservator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  debtRateAgainstEthMarket(): BigInt {
    let result = super.call(
      "debtRateAgainstEthMarket",
      "debtRateAgainstEthMarket():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_debtRateAgainstEthMarket(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtRateAgainstEthMarket",
      "debtRateAgainstEthMarket():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtStartPoint(): BigInt {
    let result = super.call("debtStartPoint", "debtStartPoint():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtStartPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtStartPoint",
      "debtStartPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  execute(calls: Array<Bytes>, revertOnFail: boolean): BigBang__executeResult {
    let result = super.call(
      "execute",
      "execute(bytes[],bool):(bool[],string[])",
      [
        ethereum.Value.fromBytesArray(calls),
        ethereum.Value.fromBoolean(revertOnFail)
      ]
    );

    return new BigBang__executeResult(
      result[0].toBooleanArray(),
      result[1].toStringArray()
    );
  }

  try_execute(
    calls: Array<Bytes>,
    revertOnFail: boolean
  ): ethereum.CallResult<BigBang__executeResult> {
    let result = super.tryCall(
      "execute",
      "execute(bytes[],bool):(bool[],string[])",
      [
        ethereum.Value.fromBytesArray(calls),
        ethereum.Value.fromBoolean(revertOnFail)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__executeResult(
        value[0].toBooleanArray(),
        value[1].toStringArray()
      )
    );
  }

  getDebtRate(): BigInt {
    let result = super.call("getDebtRate", "getDebtRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getDebtRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDebtRate", "getDebtRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDebt(): BigInt {
    let result = super.call("getTotalDebt", "getTotalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTotalDebt", "getTotalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMainMarket(): boolean {
    let result = super.call("isMainMarket", "isMainMarket():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMainMarket(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMainMarket", "isMainMarket():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  leverageExecutor(): Address {
    let result = super.call(
      "leverageExecutor",
      "leverageExecutor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_leverageExecutor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leverageExecutor",
      "leverageExecutor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  leverageModule(): Address {
    let result = super.call("leverageModule", "leverageModule():(address)", []);

    return result[0].toAddress();
  }

  try_leverageModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leverageModule",
      "leverageModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationBonusAmount(): BigInt {
    let result = super.call(
      "liquidationBonusAmount",
      "liquidationBonusAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationBonusAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationBonusAmount",
      "liquidationBonusAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationCollateralizationRate(): BigInt {
    let result = super.call(
      "liquidationCollateralizationRate",
      "liquidationCollateralizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationCollateralizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationCollateralizationRate",
      "liquidationCollateralizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationModule(): Address {
    let result = super.call(
      "liquidationModule",
      "liquidationModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidationModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidationModule",
      "liquidationModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationMultiplier(): BigInt {
    let result = super.call(
      "liquidationMultiplier",
      "liquidationMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationMultiplier",
      "liquidationMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxDebtRate(): BigInt {
    let result = super.call("maxDebtRate", "maxDebtRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxDebtRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDebtRate", "maxDebtRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLiquidatorReward(): BigInt {
    let result = super.call(
      "maxLiquidatorReward",
      "maxLiquidatorReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxLiquidatorReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLiquidatorReward",
      "maxLiquidatorReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMintFee(): BigInt {
    let result = super.call("maxMintFee", "maxMintFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxMintFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMintFee", "maxMintFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMintFeeStart(): BigInt {
    let result = super.call(
      "maxMintFeeStart",
      "maxMintFeeStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxMintFeeStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxMintFeeStart",
      "maxMintFeeStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minDebtRate(): BigInt {
    let result = super.call("minDebtRate", "minDebtRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minDebtRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minDebtRate", "minDebtRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLiquidatorReward(): BigInt {
    let result = super.call(
      "minLiquidatorReward",
      "minLiquidatorReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minLiquidatorReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minLiquidatorReward",
      "minLiquidatorReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMintFee(): BigInt {
    let result = super.call("minMintFee", "minMintFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minMintFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minMintFee", "minMintFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMintFeeStart(): BigInt {
    let result = super.call(
      "minMintFeeStart",
      "minMintFeeStart():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minMintFeeStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minMintFeeStart",
      "minMintFeeStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openingFees(user: Address): BigInt {
    let result = super.call("openingFees", "openingFees(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_openingFees(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "openingFees",
      "openingFees(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleData(): Bytes {
    let result = super.call("oracleData", "oracleData():(bytes)", []);

    return result[0].toBytes();
  }

  try_oracleData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("oracleData", "oracleData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pauseOptions(pauseProp: i32): boolean {
    let result = super.call("pauseOptions", "pauseOptions(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pauseProp))
    ]);

    return result[0].toBoolean();
  }

  try_pauseOptions(pauseProp: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("pauseOptions", "pauseOptions(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pauseProp))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  penrose(): Address {
    let result = super.call("penrose", "penrose():(address)", []);

    return result[0].toAddress();
  }

  try_penrose(): ethereum.CallResult<Address> {
    let result = super.tryCall("penrose", "penrose():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateTimestamp(): BigInt {
    let result = super.call("rateTimestamp", "rateTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateTimestamp",
      "rateTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateValidDuration(): BigInt {
    let result = super.call(
      "rateValidDuration",
      "rateValidDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rateValidDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateValidDuration",
      "rateValidDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refreshPenroseFees(): BigInt {
    let result = super.call(
      "refreshPenroseFees",
      "refreshPenroseFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_refreshPenroseFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refreshPenroseFees",
      "refreshPenroseFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repay(from: Address, to: Address, skim: boolean, part: BigInt): BigInt {
    let result = super.call(
      "repay",
      "repay(address,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(skim),
        ethereum.Value.fromUnsignedBigInt(part)
      ]
    );

    return result[0].toBigInt();
  }

  try_repay(
    from: Address,
    to: Address,
    skim: boolean,
    part: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repay",
      "repay(address,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(skim),
        ethereum.Value.fromUnsignedBigInt(part)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellCollateral(from: Address, share: BigInt, data: Bytes): BigInt {
    let result = super.call(
      "sellCollateral",
      "sellCollateral(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellCollateral(
    from: Address,
    share: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellCollateral",
      "sellCollateral(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrow(): BigBang__totalBorrowResult {
    let result = super.call(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );

    return new BigBang__totalBorrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalBorrow(): ethereum.CallResult<BigBang__totalBorrowResult> {
    let result = super.tryCall(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__totalBorrowResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  totalBorrowCap(): BigInt {
    let result = super.call("totalBorrowCap", "totalBorrowCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBorrowCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowCap",
      "totalBorrowCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCollateralShare(): BigInt {
    let result = super.call(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateralShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(param0: Address, param1: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(param0: Address, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(param0: Address, param1: Address, param2: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateExchangeRate(): BigBang__updateExchangeRateResult {
    let result = super.call(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      []
    );

    return new BigBang__updateExchangeRateResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_updateExchangeRate(): ethereum.CallResult<
    BigBang__updateExchangeRateResult
  > {
    let result = super.tryCall(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BigBang__updateExchangeRateResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  userBorrowPart(param0: Address): BigInt {
    let result = super.call(
      "userBorrowPart",
      "userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userBorrowPart(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBorrowPart",
      "userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateralShare(param0: Address): BigInt {
    let result = super.call(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userCollateralShare(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yieldBox(): Address {
    let result = super.call("yieldBox", "yieldBox():(address)", []);

    return result[0].toAddress();
  }

  try_yieldBox(): ethereum.CallResult<Address> {
    let result = super.tryCall("yieldBox", "yieldBox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AccrueCall extends ethereum.Call {
  get inputs(): AccrueCall__Inputs {
    return new AccrueCall__Inputs(this);
  }

  get outputs(): AccrueCall__Outputs {
    return new AccrueCall__Outputs(this);
  }
}

export class AccrueCall__Inputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AccrueCall__Outputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get skim(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveBorrowCall extends ethereum.Call {
  get inputs(): ApproveBorrowCall__Inputs {
    return new ApproveBorrowCall__Inputs(this);
  }

  get outputs(): ApproveBorrowCall__Outputs {
    return new ApproveBorrowCall__Outputs(this);
  }
}

export class ApproveBorrowCall__Inputs {
  _call: ApproveBorrowCall;

  constructor(call: ApproveBorrowCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveBorrowCall__Outputs {
  _call: ApproveBorrowCall;

  constructor(call: ApproveBorrowCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get part(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BuyCollateralCall extends ethereum.Call {
  get inputs(): BuyCollateralCall__Inputs {
    return new BuyCollateralCall__Inputs(this);
  }

  get outputs(): BuyCollateralCall__Outputs {
    return new BuyCollateralCall__Outputs(this);
  }
}

export class BuyCollateralCall__Inputs {
  _call: BuyCollateralCall;

  constructor(call: BuyCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get supplyAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BuyCollateralCall__Outputs {
  _call: BuyCollateralCall;

  constructor(call: BuyCollateralCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get successes(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get results(): Array<string> {
    return this._call.outputValues[1].value.toStringArray();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get maxBorrowParts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get liquidatorReceivers(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get liquidatorReceiverDatas(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class LiquidateBadDebtCall extends ethereum.Call {
  get inputs(): LiquidateBadDebtCall__Inputs {
    return new LiquidateBadDebtCall__Inputs(this);
  }

  get outputs(): LiquidateBadDebtCall__Outputs {
    return new LiquidateBadDebtCall__Outputs(this);
  }
}

export class LiquidateBadDebtCall__Inputs {
  _call: LiquidateBadDebtCall;

  constructor(call: LiquidateBadDebtCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidatorReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get liquidatorReceiverData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LiquidateBadDebtCall__Outputs {
  _call: LiquidateBadDebtCall;

  constructor(call: LiquidateBadDebtCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class PermitActionCall extends ethereum.Call {
  get inputs(): PermitActionCall__Inputs {
    return new PermitActionCall__Inputs(this);
  }

  get outputs(): PermitActionCall__Outputs {
    return new PermitActionCall__Outputs(this);
  }
}

export class PermitActionCall__Inputs {
  _call: PermitActionCall;

  constructor(call: PermitActionCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get actionType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class PermitActionCall__Outputs {
  _call: PermitActionCall;

  constructor(call: PermitActionCall) {
    this._call = call;
  }
}

export class PermitBorrowCall extends ethereum.Call {
  get inputs(): PermitBorrowCall__Inputs {
    return new PermitBorrowCall__Inputs(this);
  }

  get outputs(): PermitBorrowCall__Outputs {
    return new PermitBorrowCall__Outputs(this);
  }
}

export class PermitBorrowCall__Inputs {
  _call: PermitBorrowCall;

  constructor(call: PermitBorrowCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitBorrowCall__Outputs {
  _call: PermitBorrowCall;

  constructor(call: PermitBorrowCall) {
    this._call = call;
  }
}

export class RefreshPenroseFeesCall extends ethereum.Call {
  get inputs(): RefreshPenroseFeesCall__Inputs {
    return new RefreshPenroseFeesCall__Inputs(this);
  }

  get outputs(): RefreshPenroseFeesCall__Outputs {
    return new RefreshPenroseFeesCall__Outputs(this);
  }
}

export class RefreshPenroseFeesCall__Inputs {
  _call: RefreshPenroseFeesCall;

  constructor(call: RefreshPenroseFeesCall) {
    this._call = call;
  }
}

export class RefreshPenroseFeesCall__Outputs {
  _call: RefreshPenroseFeesCall;

  constructor(call: RefreshPenroseFeesCall) {
    this._call = call;
  }

  get feeShares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get skim(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get part(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RescueEthCall extends ethereum.Call {
  get inputs(): RescueEthCall__Inputs {
    return new RescueEthCall__Inputs(this);
  }

  get outputs(): RescueEthCall__Outputs {
    return new RescueEthCall__Outputs(this);
  }
}

export class RescueEthCall__Inputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RescueEthCall__Outputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }
}

export class SellCollateralCall extends ethereum.Call {
  get inputs(): SellCollateralCall__Inputs {
    return new SellCollateralCall__Inputs(this);
  }

  get outputs(): SellCollateralCall__Outputs {
    return new SellCollateralCall__Outputs(this);
  }
}

export class SellCollateralCall__Inputs {
  _call: SellCollateralCall;

  constructor(call: SellCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SellCollateralCall__Outputs {
  _call: SellCollateralCall;

  constructor(call: SellCollateralCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetAssetOracleCall extends ethereum.Call {
  get inputs(): SetAssetOracleCall__Inputs {
    return new SetAssetOracleCall__Inputs(this);
  }

  get outputs(): SetAssetOracleCall__Outputs {
    return new SetAssetOracleCall__Outputs(this);
  }
}

export class SetAssetOracleCall__Inputs {
  _call: SetAssetOracleCall;

  constructor(call: SetAssetOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetAssetOracleCall__Outputs {
  _call: SetAssetOracleCall;

  constructor(call: SetAssetOracleCall) {
    this._call = call;
  }
}

export class SetBigBangConfigCall extends ethereum.Call {
  get inputs(): SetBigBangConfigCall__Inputs {
    return new SetBigBangConfigCall__Inputs(this);
  }

  get outputs(): SetBigBangConfigCall__Outputs {
    return new SetBigBangConfigCall__Outputs(this);
  }
}

export class SetBigBangConfigCall__Inputs {
  _call: SetBigBangConfigCall;

  constructor(call: SetBigBangConfigCall) {
    this._call = call;
  }

  get _minDebtRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxDebtRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _debtRateAgainstEthMarket(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _liquidationMultiplier(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetBigBangConfigCall__Outputs {
  _call: SetBigBangConfigCall;

  constructor(call: SetBigBangConfigCall) {
    this._call = call;
  }
}

export class SetLeverageExecutorCall extends ethereum.Call {
  get inputs(): SetLeverageExecutorCall__Inputs {
    return new SetLeverageExecutorCall__Inputs(this);
  }

  get outputs(): SetLeverageExecutorCall__Outputs {
    return new SetLeverageExecutorCall__Outputs(this);
  }
}

export class SetLeverageExecutorCall__Inputs {
  _call: SetLeverageExecutorCall;

  constructor(call: SetLeverageExecutorCall) {
    this._call = call;
  }

  get _executor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLeverageExecutorCall__Outputs {
  _call: SetLeverageExecutorCall;

  constructor(call: SetLeverageExecutorCall) {
    this._call = call;
  }
}

export class SetMarketConfigCall extends ethereum.Call {
  get inputs(): SetMarketConfigCall__Inputs {
    return new SetMarketConfigCall__Inputs(this);
  }

  get outputs(): SetMarketConfigCall__Outputs {
    return new SetMarketConfigCall__Outputs(this);
  }
}

export class SetMarketConfigCall__Inputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _conservator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _callerFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _liquidationBonusAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _minLiquidatorReward(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _maxLiquidatorReward(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _totalBorrowCap(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _collateralizationRate(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _liquidationCollateralizationRate(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class SetMarketConfigCall__Outputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }
}

export class SetMinAndMaxMintFeeCall extends ethereum.Call {
  get inputs(): SetMinAndMaxMintFeeCall__Inputs {
    return new SetMinAndMaxMintFeeCall__Inputs(this);
  }

  get outputs(): SetMinAndMaxMintFeeCall__Outputs {
    return new SetMinAndMaxMintFeeCall__Outputs(this);
  }
}

export class SetMinAndMaxMintFeeCall__Inputs {
  _call: SetMinAndMaxMintFeeCall;

  constructor(call: SetMinAndMaxMintFeeCall) {
    this._call = call;
  }

  get _min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinAndMaxMintFeeCall__Outputs {
  _call: SetMinAndMaxMintFeeCall;

  constructor(call: SetMinAndMaxMintFeeCall) {
    this._call = call;
  }
}

export class SetMinAndMaxMintRangeCall extends ethereum.Call {
  get inputs(): SetMinAndMaxMintRangeCall__Inputs {
    return new SetMinAndMaxMintRangeCall__Inputs(this);
  }

  get outputs(): SetMinAndMaxMintRangeCall__Outputs {
    return new SetMinAndMaxMintRangeCall__Outputs(this);
  }
}

export class SetMinAndMaxMintRangeCall__Inputs {
  _call: SetMinAndMaxMintRangeCall;

  constructor(call: SetMinAndMaxMintRangeCall) {
    this._call = call;
  }

  get _min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinAndMaxMintRangeCall__Outputs {
  _call: SetMinAndMaxMintRangeCall;

  constructor(call: SetMinAndMaxMintRangeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall extends ethereum.Call {
  get inputs(): UpdateExchangeRateCall__Inputs {
    return new UpdateExchangeRateCall__Inputs(this);
  }

  get outputs(): UpdateExchangeRateCall__Outputs {
    return new UpdateExchangeRateCall__Outputs(this);
  }
}

export class UpdateExchangeRateCall__Inputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall__Outputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }

  get updated(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get rate(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdatePauseCall extends ethereum.Call {
  get inputs(): UpdatePauseCall__Inputs {
    return new UpdatePauseCall__Inputs(this);
  }

  get outputs(): UpdatePauseCall__Outputs {
    return new UpdatePauseCall__Outputs(this);
  }
}

export class UpdatePauseCall__Inputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }

  get _type(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get val(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdatePauseCall__Outputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }
}
