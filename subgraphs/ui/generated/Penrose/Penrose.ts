// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BigBangEthMarketDebtRateUpdated extends ethereum.Event {
  get params(): BigBangEthMarketDebtRateUpdated__Params {
    return new BigBangEthMarketDebtRateUpdated__Params(this);
  }
}

export class BigBangEthMarketDebtRateUpdated__Params {
  _event: BigBangEthMarketDebtRateUpdated;

  constructor(event: BigBangEthMarketDebtRateUpdated) {
    this._event = event;
  }

  get _oldRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BigBangEthMarketUpdated extends ethereum.Event {
  get params(): BigBangEthMarketUpdated__Params {
    return new BigBangEthMarketUpdated__Params(this);
  }
}

export class BigBangEthMarketUpdated__Params {
  _event: BigBangEthMarketUpdated;

  constructor(event: BigBangEthMarketUpdated) {
    this._event = event;
  }

  get _oldAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ClusterSet extends ethereum.Event {
  get params(): ClusterSet__Params {
    return new ClusterSet__Params(this);
  }
}

export class ClusterSet__Params {
  _event: ClusterSet;

  constructor(event: ClusterSet) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _new(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConservatorUpdated extends ethereum.Event {
  get params(): ConservatorUpdated__Params {
    return new ConservatorUpdated__Params(this);
  }
}

export class ConservatorUpdated__Params {
  _event: ConservatorUpdated;

  constructor(event: ConservatorUpdated) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _new(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LogDeploy extends ethereum.Event {
  get params(): LogDeploy__Params {
    return new LogDeploy__Params(this);
  }
}

export class LogDeploy__Params {
  _event: LogDeploy;

  constructor(event: LogDeploy) {
    this._event = event;
  }

  get masterContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get cloneAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogTwTapFeesDeposit extends ethereum.Event {
  get params(): LogTwTapFeesDeposit__Params {
    return new LogTwTapFeesDeposit__Params(this);
  }
}

export class LogTwTapFeesDeposit__Params {
  _event: LogTwTapFeesDeposit;

  constructor(event: LogTwTapFeesDeposit) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PausedUpdated extends ethereum.Event {
  get params(): PausedUpdated__Params {
    return new PausedUpdated__Params(this);
  }
}

export class PausedUpdated__Params {
  _event: PausedUpdated;

  constructor(event: PausedUpdated) {
    this._event = event;
  }

  get oldState(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get newState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ProtocolWithdrawal extends ethereum.Event {
  get params(): ProtocolWithdrawal__Params {
    return new ProtocolWithdrawal__Params(this);
  }
}

export class ProtocolWithdrawal__Params {
  _event: ProtocolWithdrawal;

  constructor(event: ProtocolWithdrawal) {
    this._event = event;
  }

  get markets(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReaccruedMarkets extends ethereum.Event {
  get params(): ReaccruedMarkets__Params {
    return new ReaccruedMarkets__Params(this);
  }
}

export class ReaccruedMarkets__Params {
  _event: ReaccruedMarkets;

  constructor(event: ReaccruedMarkets) {
    this._event = event;
  }

  get mainMarketIncluded(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class RegisterBigBang extends ethereum.Event {
  get params(): RegisterBigBang__Params {
    return new RegisterBigBang__Params(this);
  }
}

export class RegisterBigBang__Params {
  _event: RegisterBigBang;

  constructor(event: RegisterBigBang) {
    this._event = event;
  }

  get location(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get masterContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegisterBigBangMasterContract extends ethereum.Event {
  get params(): RegisterBigBangMasterContract__Params {
    return new RegisterBigBangMasterContract__Params(this);
  }
}

export class RegisterBigBangMasterContract__Params {
  _event: RegisterBigBangMasterContract;

  constructor(event: RegisterBigBangMasterContract) {
    this._event = event;
  }

  get location(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get risk(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class RegisterOrigins extends ethereum.Event {
  get params(): RegisterOrigins__Params {
    return new RegisterOrigins__Params(this);
  }
}

export class RegisterOrigins__Params {
  _event: RegisterOrigins;

  constructor(event: RegisterOrigins) {
    this._event = event;
  }

  get location(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RegisterSingularity extends ethereum.Event {
  get params(): RegisterSingularity__Params {
    return new RegisterSingularity__Params(this);
  }
}

export class RegisterSingularity__Params {
  _event: RegisterSingularity;

  constructor(event: RegisterSingularity) {
    this._event = event;
  }

  get location(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get masterContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegisterSingularityMasterContract extends ethereum.Event {
  get params(): RegisterSingularityMasterContract__Params {
    return new RegisterSingularityMasterContract__Params(this);
  }
}

export class RegisterSingularityMasterContract__Params {
  _event: RegisterSingularityMasterContract;

  constructor(event: RegisterSingularityMasterContract) {
    this._event = event;
  }

  get location(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get risk(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class TotalUsdoDebt extends ethereum.Event {
  get params(): TotalUsdoDebt__Params {
    return new TotalUsdoDebt__Params(this);
  }
}

export class TotalUsdoDebt__Params {
  _event: TotalUsdoDebt;

  constructor(event: TotalUsdoDebt) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UsdoTokenUpdated extends ethereum.Event {
  get params(): UsdoTokenUpdated__Params {
    return new UsdoTokenUpdated__Params(this);
  }
}

export class UsdoTokenUpdated__Params {
  _event: UsdoTokenUpdated;

  constructor(event: UsdoTokenUpdated) {
    this._event = event;
  }

  get usdoToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Penrose__bigbangMasterContractsResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getLocation(): Address {
    return this.value0;
  }

  getRisk(): i32 {
    return this.value1;
  }
}

export class Penrose__executeMarketFnResult {
  value0: Array<boolean>;
  value1: Array<Bytes>;

  constructor(value0: Array<boolean>, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromBytesArray(this.value1));
    return map;
  }

  getSuccess(): Array<boolean> {
    return this.value0;
  }

  getResult(): Array<Bytes> {
    return this.value1;
  }
}

export class Penrose__getAllMasterContractClonesInputArrayStruct extends ethereum.Tuple {
  get location(): Address {
    return this[0].toAddress();
  }

  get risk(): i32 {
    return this[1].toI32();
  }
}

export class Penrose__singularityMasterContractsResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getLocation(): Address {
    return this.value0;
  }

  getRisk(): i32 {
    return this.value1;
  }
}

export class Penrose extends ethereum.SmartContract {
  static bind(address: Address): Penrose {
    return new Penrose("Penrose", address);
  }

  allBigBangMarkets(param0: BigInt): Address {
    let result = super.call(
      "allBigBangMarkets",
      "allBigBangMarkets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_allBigBangMarkets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allBigBangMarkets",
      "allBigBangMarkets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allOriginsMarkets(param0: BigInt): Address {
    let result = super.call(
      "allOriginsMarkets",
      "allOriginsMarkets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_allOriginsMarkets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allOriginsMarkets",
      "allOriginsMarkets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bigBangEthDebtRate(): BigInt {
    let result = super.call(
      "bigBangEthDebtRate",
      "bigBangEthDebtRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_bigBangEthDebtRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bigBangEthDebtRate",
      "bigBangEthDebtRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bigBangEthMarket(): Address {
    let result = super.call(
      "bigBangEthMarket",
      "bigBangEthMarket():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_bigBangEthMarket(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bigBangEthMarket",
      "bigBangEthMarket():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bigBangMarkets(): Array<Address> {
    let result = super.call(
      "bigBangMarkets",
      "bigBangMarkets():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_bigBangMarkets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "bigBangMarkets",
      "bigBangMarkets():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  bigBangMasterContractLength(): BigInt {
    let result = super.call(
      "bigBangMasterContractLength",
      "bigBangMasterContractLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_bigBangMasterContractLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bigBangMasterContractLength",
      "bigBangMasterContractLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bigbangMasterContracts(
    param0: BigInt,
  ): Penrose__bigbangMasterContractsResult {
    let result = super.call(
      "bigbangMasterContracts",
      "bigbangMasterContracts(uint256):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Penrose__bigbangMasterContractsResult(
      result[0].toAddress(),
      result[1].toI32(),
    );
  }

  try_bigbangMasterContracts(
    param0: BigInt,
  ): ethereum.CallResult<Penrose__bigbangMasterContractsResult> {
    let result = super.tryCall(
      "bigbangMasterContracts",
      "bigbangMasterContracts(uint256):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Penrose__bigbangMasterContractsResult(
        value[0].toAddress(),
        value[1].toI32(),
      ),
    );
  }

  clonesOf(param0: Address, param1: BigInt): Address {
    let result = super.call("clonesOf", "clonesOf(address,uint256):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ]);

    return result[0].toAddress();
  }

  try_clonesOf(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "clonesOf",
      "clonesOf(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  clonesOfCount(masterContract: Address): BigInt {
    let result = super.call(
      "clonesOfCount",
      "clonesOfCount(address):(uint256)",
      [ethereum.Value.fromAddress(masterContract)],
    );

    return result[0].toBigInt();
  }

  try_clonesOfCount(masterContract: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "clonesOfCount",
      "clonesOfCount(address):(uint256)",
      [ethereum.Value.fromAddress(masterContract)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cluster(): Address {
    let result = super.call("cluster", "cluster():(address)", []);

    return result[0].toAddress();
  }

  try_cluster(): ethereum.CallResult<Address> {
    let result = super.tryCall("cluster", "cluster():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeTotalDebt(): BigInt {
    let result = super.call(
      "computeTotalDebt",
      "computeTotalDebt():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_computeTotalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeTotalDebt",
      "computeTotalDebt():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  conservator(): Address {
    let result = super.call("conservator", "conservator():(address)", []);

    return result[0].toAddress();
  }

  try_conservator(): ethereum.CallResult<Address> {
    let result = super.tryCall("conservator", "conservator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  emptyStrategies(param0: Address): Address {
    let result = super.call(
      "emptyStrategies",
      "emptyStrategies(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toAddress();
  }

  try_emptyStrategies(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "emptyStrategies",
      "emptyStrategies(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  executeMarketFn(
    mc: Array<Address>,
    data: Array<Bytes>,
    forceSuccess: boolean,
  ): Penrose__executeMarketFnResult {
    let result = super.call(
      "executeMarketFn",
      "executeMarketFn(address[],bytes[],bool):(bool[],bytes[])",
      [
        ethereum.Value.fromAddressArray(mc),
        ethereum.Value.fromBytesArray(data),
        ethereum.Value.fromBoolean(forceSuccess),
      ],
    );

    return new Penrose__executeMarketFnResult(
      result[0].toBooleanArray(),
      result[1].toBytesArray(),
    );
  }

  try_executeMarketFn(
    mc: Array<Address>,
    data: Array<Bytes>,
    forceSuccess: boolean,
  ): ethereum.CallResult<Penrose__executeMarketFnResult> {
    let result = super.tryCall(
      "executeMarketFn",
      "executeMarketFn(address[],bytes[],bool):(bool[],bytes[])",
      [
        ethereum.Value.fromAddressArray(mc),
        ethereum.Value.fromBytesArray(data),
        ethereum.Value.fromBoolean(forceSuccess),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Penrose__executeMarketFnResult(
        value[0].toBooleanArray(),
        value[1].toBytesArray(),
      ),
    );
  }

  getAllMasterContractClones(
    array: Array<Penrose__getAllMasterContractClonesInputArrayStruct>,
  ): Array<Address> {
    let result = super.call(
      "getAllMasterContractClones",
      "getAllMasterContractClones((address,uint8)[]):(address[])",
      [ethereum.Value.fromTupleArray(array)],
    );

    return result[0].toAddressArray();
  }

  try_getAllMasterContractClones(
    array: Array<Penrose__getAllMasterContractClonesInputArrayStruct>,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllMasterContractClones",
      "getAllMasterContractClones((address,uint8)[]):(address[])",
      [ethereum.Value.fromTupleArray(array)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  hostLzChainId(): i32 {
    let result = super.call("hostLzChainId", "hostLzChainId():(uint16)", []);

    return result[0].toI32();
  }

  try_hostLzChainId(): ethereum.CallResult<i32> {
    let result = super.tryCall("hostLzChainId", "hostLzChainId():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isBigBangMasterContractRegistered(param0: Address): boolean {
    let result = super.call(
      "isBigBangMasterContractRegistered",
      "isBigBangMasterContractRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isBigBangMasterContractRegistered(
    param0: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBigBangMasterContractRegistered",
      "isBigBangMasterContractRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMarketRegistered(param0: Address): boolean {
    let result = super.call(
      "isMarketRegistered",
      "isMarketRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isMarketRegistered(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMarketRegistered",
      "isMarketRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOriginRegistered(param0: Address): boolean {
    let result = super.call(
      "isOriginRegistered",
      "isOriginRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isOriginRegistered(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOriginRegistered",
      "isOriginRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSingularityMasterContractRegistered(param0: Address): boolean {
    let result = super.call(
      "isSingularityMasterContractRegistered",
      "isSingularityMasterContractRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_isSingularityMasterContractRegistered(
    param0: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSingularityMasterContractRegistered",
      "isSingularityMasterContractRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mainAssetId(): BigInt {
    let result = super.call("mainAssetId", "mainAssetId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mainAssetId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mainAssetId", "mainAssetId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mainToken(): Address {
    let result = super.call("mainToken", "mainToken():(address)", []);

    return result[0].toAddress();
  }

  try_mainToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("mainToken", "mainToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  masterContractOf(param0: Address): Address {
    let result = super.call(
      "masterContractOf",
      "masterContractOf(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toAddress();
  }

  try_masterContractOf(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "masterContractOf",
      "masterContractOf(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  singularityMarkets(): Array<Address> {
    let result = super.call(
      "singularityMarkets",
      "singularityMarkets():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_singularityMarkets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "singularityMarkets",
      "singularityMarkets():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  singularityMasterContractLength(): BigInt {
    let result = super.call(
      "singularityMasterContractLength",
      "singularityMasterContractLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_singularityMasterContractLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "singularityMasterContractLength",
      "singularityMasterContractLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  singularityMasterContracts(
    param0: BigInt,
  ): Penrose__singularityMasterContractsResult {
    let result = super.call(
      "singularityMasterContracts",
      "singularityMasterContracts(uint256):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Penrose__singularityMasterContractsResult(
      result[0].toAddress(),
      result[1].toI32(),
    );
  }

  try_singularityMasterContracts(
    param0: BigInt,
  ): ethereum.CallResult<Penrose__singularityMasterContractsResult> {
    let result = super.tryCall(
      "singularityMasterContracts",
      "singularityMasterContracts(uint256):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Penrose__singularityMasterContractsResult(
        value[0].toAddress(),
        value[1].toI32(),
      ),
    );
  }

  tapAssetId(): BigInt {
    let result = super.call("tapAssetId", "tapAssetId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tapAssetId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tapAssetId", "tapAssetId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tapToken(): Address {
    let result = super.call("tapToken", "tapToken():(address)", []);

    return result[0].toAddress();
  }

  try_tapToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("tapToken", "tapToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdoAssetId(): BigInt {
    let result = super.call("usdoAssetId", "usdoAssetId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usdoAssetId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usdoAssetId", "usdoAssetId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdoToken(): Address {
    let result = super.call("usdoToken", "usdoToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdoToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdoToken", "usdoToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  viewTotalDebt(): BigInt {
    let result = super.call("viewTotalDebt", "viewTotalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_viewTotalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewTotalDebt",
      "viewTotalDebt():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yieldBox(): Address {
    let result = super.call("yieldBox", "yieldBox():(address)", []);

    return result[0].toAddress();
  }

  try_yieldBox(): ethereum.CallResult<Address> {
    let result = super.tryCall("yieldBox", "yieldBox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _yieldBox(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _cluster(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tapToken_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get mainToken_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _hostLzChainId(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _owner(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddBigBangCall extends ethereum.Call {
  get inputs(): AddBigBangCall__Inputs {
    return new AddBigBangCall__Inputs(this);
  }

  get outputs(): AddBigBangCall__Outputs {
    return new AddBigBangCall__Outputs(this);
  }
}

export class AddBigBangCall__Inputs {
  _call: AddBigBangCall;

  constructor(call: AddBigBangCall) {
    this._call = call;
  }

  get mc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _contract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddBigBangCall__Outputs {
  _call: AddBigBangCall;

  constructor(call: AddBigBangCall) {
    this._call = call;
  }
}

export class AddOriginsMarketCall extends ethereum.Call {
  get inputs(): AddOriginsMarketCall__Inputs {
    return new AddOriginsMarketCall__Inputs(this);
  }

  get outputs(): AddOriginsMarketCall__Outputs {
    return new AddOriginsMarketCall__Outputs(this);
  }
}

export class AddOriginsMarketCall__Inputs {
  _call: AddOriginsMarketCall;

  constructor(call: AddOriginsMarketCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOriginsMarketCall__Outputs {
  _call: AddOriginsMarketCall;

  constructor(call: AddOriginsMarketCall) {
    this._call = call;
  }
}

export class AddSingularityCall extends ethereum.Call {
  get inputs(): AddSingularityCall__Inputs {
    return new AddSingularityCall__Inputs(this);
  }

  get outputs(): AddSingularityCall__Outputs {
    return new AddSingularityCall__Outputs(this);
  }
}

export class AddSingularityCall__Inputs {
  _call: AddSingularityCall;

  constructor(call: AddSingularityCall) {
    this._call = call;
  }

  get mc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _contract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddSingularityCall__Outputs {
  _call: AddSingularityCall;

  constructor(call: AddSingularityCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ComputeTotalDebtCall extends ethereum.Call {
  get inputs(): ComputeTotalDebtCall__Inputs {
    return new ComputeTotalDebtCall__Inputs(this);
  }

  get outputs(): ComputeTotalDebtCall__Outputs {
    return new ComputeTotalDebtCall__Outputs(this);
  }
}

export class ComputeTotalDebtCall__Inputs {
  _call: ComputeTotalDebtCall;

  constructor(call: ComputeTotalDebtCall) {
    this._call = call;
  }
}

export class ComputeTotalDebtCall__Outputs {
  _call: ComputeTotalDebtCall;

  constructor(call: ComputeTotalDebtCall) {
    this._call = call;
  }

  get totalUsdoDebt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get masterContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get useCreate2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get cloneAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ExecuteMarketFnCall extends ethereum.Call {
  get inputs(): ExecuteMarketFnCall__Inputs {
    return new ExecuteMarketFnCall__Inputs(this);
  }

  get outputs(): ExecuteMarketFnCall__Outputs {
    return new ExecuteMarketFnCall__Outputs(this);
  }
}

export class ExecuteMarketFnCall__Inputs {
  _call: ExecuteMarketFnCall;

  constructor(call: ExecuteMarketFnCall) {
    this._call = call;
  }

  get mc(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get forceSuccess(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ExecuteMarketFnCall__Outputs {
  _call: ExecuteMarketFnCall;

  constructor(call: ExecuteMarketFnCall) {
    this._call = call;
  }

  get success(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get result(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}

export class MintOpenInterestDebtCall extends ethereum.Call {
  get inputs(): MintOpenInterestDebtCall__Inputs {
    return new MintOpenInterestDebtCall__Inputs(this);
  }

  get outputs(): MintOpenInterestDebtCall__Outputs {
    return new MintOpenInterestDebtCall__Outputs(this);
  }
}

export class MintOpenInterestDebtCall__Inputs {
  _call: MintOpenInterestDebtCall;

  constructor(call: MintOpenInterestDebtCall) {
    this._call = call;
  }

  get twTap(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintOpenInterestDebtCall__Outputs {
  _call: MintOpenInterestDebtCall;

  constructor(call: MintOpenInterestDebtCall) {
    this._call = call;
  }
}

export class ReAccrueBigBangMarketsCall extends ethereum.Call {
  get inputs(): ReAccrueBigBangMarketsCall__Inputs {
    return new ReAccrueBigBangMarketsCall__Inputs(this);
  }

  get outputs(): ReAccrueBigBangMarketsCall__Outputs {
    return new ReAccrueBigBangMarketsCall__Outputs(this);
  }
}

export class ReAccrueBigBangMarketsCall__Inputs {
  _call: ReAccrueBigBangMarketsCall;

  constructor(call: ReAccrueBigBangMarketsCall) {
    this._call = call;
  }
}

export class ReAccrueBigBangMarketsCall__Outputs {
  _call: ReAccrueBigBangMarketsCall;

  constructor(call: ReAccrueBigBangMarketsCall) {
    this._call = call;
  }
}

export class RegisterBigBangCall extends ethereum.Call {
  get inputs(): RegisterBigBangCall__Inputs {
    return new RegisterBigBangCall__Inputs(this);
  }

  get outputs(): RegisterBigBangCall__Outputs {
    return new RegisterBigBangCall__Outputs(this);
  }
}

export class RegisterBigBangCall__Inputs {
  _call: RegisterBigBangCall;

  constructor(call: RegisterBigBangCall) {
    this._call = call;
  }

  get mc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get useCreate2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RegisterBigBangCall__Outputs {
  _call: RegisterBigBangCall;

  constructor(call: RegisterBigBangCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RegisterBigBangMasterContractCall extends ethereum.Call {
  get inputs(): RegisterBigBangMasterContractCall__Inputs {
    return new RegisterBigBangMasterContractCall__Inputs(this);
  }

  get outputs(): RegisterBigBangMasterContractCall__Outputs {
    return new RegisterBigBangMasterContractCall__Outputs(this);
  }
}

export class RegisterBigBangMasterContractCall__Inputs {
  _call: RegisterBigBangMasterContractCall;

  constructor(call: RegisterBigBangMasterContractCall) {
    this._call = call;
  }

  get mcAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractType_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class RegisterBigBangMasterContractCall__Outputs {
  _call: RegisterBigBangMasterContractCall;

  constructor(call: RegisterBigBangMasterContractCall) {
    this._call = call;
  }
}

export class RegisterSingularityCall extends ethereum.Call {
  get inputs(): RegisterSingularityCall__Inputs {
    return new RegisterSingularityCall__Inputs(this);
  }

  get outputs(): RegisterSingularityCall__Outputs {
    return new RegisterSingularityCall__Outputs(this);
  }
}

export class RegisterSingularityCall__Inputs {
  _call: RegisterSingularityCall;

  constructor(call: RegisterSingularityCall) {
    this._call = call;
  }

  get mc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get useCreate2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RegisterSingularityCall__Outputs {
  _call: RegisterSingularityCall;

  constructor(call: RegisterSingularityCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RegisterSingularityMasterContractCall extends ethereum.Call {
  get inputs(): RegisterSingularityMasterContractCall__Inputs {
    return new RegisterSingularityMasterContractCall__Inputs(this);
  }

  get outputs(): RegisterSingularityMasterContractCall__Outputs {
    return new RegisterSingularityMasterContractCall__Outputs(this);
  }
}

export class RegisterSingularityMasterContractCall__Inputs {
  _call: RegisterSingularityMasterContractCall;

  constructor(call: RegisterSingularityMasterContractCall) {
    this._call = call;
  }

  get mcAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractType_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class RegisterSingularityMasterContractCall__Outputs {
  _call: RegisterSingularityMasterContractCall;

  constructor(call: RegisterSingularityMasterContractCall) {
    this._call = call;
  }
}

export class SetBigBangEthMarketCall extends ethereum.Call {
  get inputs(): SetBigBangEthMarketCall__Inputs {
    return new SetBigBangEthMarketCall__Inputs(this);
  }

  get outputs(): SetBigBangEthMarketCall__Outputs {
    return new SetBigBangEthMarketCall__Outputs(this);
  }
}

export class SetBigBangEthMarketCall__Inputs {
  _call: SetBigBangEthMarketCall;

  constructor(call: SetBigBangEthMarketCall) {
    this._call = call;
  }

  get _market(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBigBangEthMarketCall__Outputs {
  _call: SetBigBangEthMarketCall;

  constructor(call: SetBigBangEthMarketCall) {
    this._call = call;
  }
}

export class SetBigBangEthMarketDebtRateCall extends ethereum.Call {
  get inputs(): SetBigBangEthMarketDebtRateCall__Inputs {
    return new SetBigBangEthMarketDebtRateCall__Inputs(this);
  }

  get outputs(): SetBigBangEthMarketDebtRateCall__Outputs {
    return new SetBigBangEthMarketDebtRateCall__Outputs(this);
  }
}

export class SetBigBangEthMarketDebtRateCall__Inputs {
  _call: SetBigBangEthMarketDebtRateCall;

  constructor(call: SetBigBangEthMarketDebtRateCall) {
    this._call = call;
  }

  get _rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBigBangEthMarketDebtRateCall__Outputs {
  _call: SetBigBangEthMarketDebtRateCall;

  constructor(call: SetBigBangEthMarketDebtRateCall) {
    this._call = call;
  }
}

export class SetClusterCall extends ethereum.Call {
  get inputs(): SetClusterCall__Inputs {
    return new SetClusterCall__Inputs(this);
  }

  get outputs(): SetClusterCall__Outputs {
    return new SetClusterCall__Outputs(this);
  }
}

export class SetClusterCall__Inputs {
  _call: SetClusterCall;

  constructor(call: SetClusterCall) {
    this._call = call;
  }

  get _newCluster(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetClusterCall__Outputs {
  _call: SetClusterCall;

  constructor(call: SetClusterCall) {
    this._call = call;
  }
}

export class SetConservatorCall extends ethereum.Call {
  get inputs(): SetConservatorCall__Inputs {
    return new SetConservatorCall__Inputs(this);
  }

  get outputs(): SetConservatorCall__Outputs {
    return new SetConservatorCall__Outputs(this);
  }
}

export class SetConservatorCall__Inputs {
  _call: SetConservatorCall;

  constructor(call: SetConservatorCall) {
    this._call = call;
  }

  get _conservator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetConservatorCall__Outputs {
  _call: SetConservatorCall;

  constructor(call: SetConservatorCall) {
    this._call = call;
  }
}

export class SetUsdoTokenCall extends ethereum.Call {
  get inputs(): SetUsdoTokenCall__Inputs {
    return new SetUsdoTokenCall__Inputs(this);
  }

  get outputs(): SetUsdoTokenCall__Outputs {
    return new SetUsdoTokenCall__Outputs(this);
  }
}

export class SetUsdoTokenCall__Inputs {
  _call: SetUsdoTokenCall;

  constructor(call: SetUsdoTokenCall) {
    this._call = call;
  }

  get _usdoToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUsdoTokenCall__Outputs {
  _call: SetUsdoTokenCall;

  constructor(call: SetUsdoTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePauseCall extends ethereum.Call {
  get inputs(): UpdatePauseCall__Inputs {
    return new UpdatePauseCall__Inputs(this);
  }

  get outputs(): UpdatePauseCall__Outputs {
    return new UpdatePauseCall__Outputs(this);
  }
}

export class UpdatePauseCall__Inputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }

  get val(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class UpdatePauseCall__Outputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }
}

export class WithdrawAllMarketFeesCall extends ethereum.Call {
  get inputs(): WithdrawAllMarketFeesCall__Inputs {
    return new WithdrawAllMarketFeesCall__Inputs(this);
  }

  get outputs(): WithdrawAllMarketFeesCall__Outputs {
    return new WithdrawAllMarketFeesCall__Outputs(this);
  }
}

export class WithdrawAllMarketFeesCall__Inputs {
  _call: WithdrawAllMarketFeesCall;

  constructor(call: WithdrawAllMarketFeesCall) {
    this._call = call;
  }

  get markets_(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get twTap(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawAllMarketFeesCall__Outputs {
  _call: WithdrawAllMarketFeesCall;

  constructor(call: WithdrawAllMarketFeesCall) {
    this._call = call;
  }
}
