// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalBorrow extends ethereum.Event {
  get params(): ApprovalBorrow__Params {
    return new ApprovalBorrow__Params(this);
  }
}

export class ApprovalBorrow__Params {
  _event: ApprovalBorrow;

  constructor(event: ApprovalBorrow) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BidExecutionSwapperUpdated extends ethereum.Event {
  get params(): BidExecutionSwapperUpdated__Params {
    return new BidExecutionSwapperUpdated__Params(this);
  }
}

export class BidExecutionSwapperUpdated__Params {
  _event: BidExecutionSwapperUpdated;

  constructor(event: BidExecutionSwapperUpdated) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ConservatorUpdated extends ethereum.Event {
  get params(): ConservatorUpdated__Params {
    return new ConservatorUpdated__Params(this);
  }
}

export class ConservatorUpdated__Params {
  _event: ConservatorUpdated;

  constructor(event: ConservatorUpdated) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _new(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class ExchangeRateDurationUpdated extends ethereum.Event {
  get params(): ExchangeRateDurationUpdated__Params {
    return new ExchangeRateDurationUpdated__Params(this);
  }
}

export class ExchangeRateDurationUpdated__Params {
  _event: ExchangeRateDurationUpdated;

  constructor(event: ExchangeRateDurationUpdated) {
    this._event = event;
  }

  get _oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InterestElasticityUpdated extends ethereum.Event {
  get params(): InterestElasticityUpdated__Params {
    return new InterestElasticityUpdated__Params(this);
  }
}

export class InterestElasticityUpdated__Params {
  _event: InterestElasticityUpdated;

  constructor(event: InterestElasticityUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LeverageExecutorSet extends ethereum.Event {
  get params(): LeverageExecutorSet__Params {
    return new LeverageExecutorSet__Params(this);
  }
}

export class LeverageExecutorSet__Params {
  _event: LeverageExecutorSet;

  constructor(event: LeverageExecutorSet) {
    this._event = event;
  }

  get oldVal(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVal(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get users(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get liquidatorReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get protocolReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get repayedAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateralShareRemoved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LiquidationMultiplierUpdated extends ethereum.Event {
  get params(): LiquidationMultiplierUpdated__Params {
    return new LiquidationMultiplierUpdated__Params(this);
  }
}

export class LiquidationMultiplierUpdated__Params {
  _event: LiquidationMultiplierUpdated;

  constructor(event: LiquidationMultiplierUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogAccrue extends ethereum.Event {
  get params(): LogAccrue__Params {
    return new LogAccrue__Params(this);
  }
}

export class LogAccrue__Params {
  _event: LogAccrue;

  constructor(event: LogAccrue) {
    this._event = event;
  }

  get accruedAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeFraction(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get utilization(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogAddAsset extends ethereum.Event {
  get params(): LogAddAsset__Params {
    return new LogAddAsset__Params(this);
  }
}

export class LogAddAsset__Params {
  _event: LogAddAsset;

  constructor(event: LogAddAsset) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogAddCollateral extends ethereum.Event {
  get params(): LogAddCollateral__Params {
    return new LogAddCollateral__Params(this);
  }
}

export class LogAddCollateral__Params {
  _event: LogAddCollateral;

  constructor(event: LogAddCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogBorrow extends ethereum.Event {
  get params(): LogBorrow__Params {
    return new LogBorrow__Params(this);
  }
}

export class LogBorrow__Params {
  _event: LogBorrow;

  constructor(event: LogBorrow) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LogBorrowCapUpdated extends ethereum.Event {
  get params(): LogBorrowCapUpdated__Params {
    return new LogBorrowCapUpdated__Params(this);
  }
}

export class LogBorrowCapUpdated__Params {
  _event: LogBorrowCapUpdated;

  constructor(event: LogBorrowCapUpdated) {
    this._event = event;
  }

  get _oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogBorrowingFee extends ethereum.Event {
  get params(): LogBorrowingFee__Params {
    return new LogBorrowingFee__Params(this);
  }
}

export class LogBorrowingFee__Params {
  _event: LogBorrowingFee;

  constructor(event: LogBorrowingFee) {
    this._event = event;
  }

  get _oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogExchangeRate extends ethereum.Event {
  get params(): LogExchangeRate__Params {
    return new LogExchangeRate__Params(this);
  }
}

export class LogExchangeRate__Params {
  _event: LogExchangeRate;

  constructor(event: LogExchangeRate) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogRemoveAsset extends ethereum.Event {
  get params(): LogRemoveAsset__Params {
    return new LogRemoveAsset__Params(this);
  }
}

export class LogRemoveAsset__Params {
  _event: LogRemoveAsset;

  constructor(event: LogRemoveAsset) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fraction(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogRemoveCollateral extends ethereum.Event {
  get params(): LogRemoveCollateral__Params {
    return new LogRemoveCollateral__Params(this);
  }
}

export class LogRemoveCollateral__Params {
  _event: LogRemoveCollateral;

  constructor(event: LogRemoveCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogRepay extends ethereum.Event {
  get params(): LogRepay__Params {
    return new LogRepay__Params(this);
  }
}

export class LogRepay__Params {
  _event: LogRepay;

  constructor(event: LogRepay) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get part(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogWithdrawFees extends ethereum.Event {
  get params(): LogWithdrawFees__Params {
    return new LogWithdrawFees__Params(this);
  }
}

export class LogWithdrawFees__Params {
  _event: LogWithdrawFees;

  constructor(event: LogWithdrawFees) {
    this._event = event;
  }

  get feeTo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feesEarnedFraction(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogYieldBoxFeesDeposit extends ethereum.Event {
  get params(): LogYieldBoxFeesDeposit__Params {
    return new LogYieldBoxFeesDeposit__Params(this);
  }
}

export class LogYieldBoxFeesDeposit__Params {
  _event: LogYieldBoxFeesDeposit;

  constructor(event: LogYieldBoxFeesDeposit) {
    this._event = event;
  }

  get feeShares(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LqCollateralizationRateUpdated extends ethereum.Event {
  get params(): LqCollateralizationRateUpdated__Params {
    return new LqCollateralizationRateUpdated__Params(this);
  }
}

export class LqCollateralizationRateUpdated__Params {
  _event: LqCollateralizationRateUpdated;

  constructor(event: LqCollateralizationRateUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaximumInterestPerSecondUpdated extends ethereum.Event {
  get params(): MaximumInterestPerSecondUpdated__Params {
    return new MaximumInterestPerSecondUpdated__Params(this);
  }
}

export class MaximumInterestPerSecondUpdated__Params {
  _event: MaximumInterestPerSecondUpdated;

  constructor(event: MaximumInterestPerSecondUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaximumTargetUtilizationUpdated extends ethereum.Event {
  get params(): MaximumTargetUtilizationUpdated__Params {
    return new MaximumTargetUtilizationUpdated__Params(this);
  }
}

export class MaximumTargetUtilizationUpdated__Params {
  _event: MaximumTargetUtilizationUpdated;

  constructor(event: MaximumTargetUtilizationUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinimumInterestPerSecondUpdated extends ethereum.Event {
  get params(): MinimumInterestPerSecondUpdated__Params {
    return new MinimumInterestPerSecondUpdated__Params(this);
  }
}

export class MinimumInterestPerSecondUpdated__Params {
  _event: MinimumInterestPerSecondUpdated;

  constructor(event: MinimumInterestPerSecondUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinimumTargetUtilizationUpdated extends ethereum.Event {
  get params(): MinimumTargetUtilizationUpdated__Params {
    return new MinimumTargetUtilizationUpdated__Params(this);
  }
}

export class MinimumTargetUtilizationUpdated__Params {
  _event: MinimumTargetUtilizationUpdated;

  constructor(event: MinimumTargetUtilizationUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OracleDataUpdated extends ethereum.Event {
  get params(): OracleDataUpdated__Params {
    return new OracleDataUpdated__Params(this);
  }
}

export class OracleDataUpdated__Params {
  _event: OracleDataUpdated;

  constructor(event: OracleDataUpdated) {
    this._event = event;
  }
}

export class OracleUpdated extends ethereum.Event {
  get params(): OracleUpdated__Params {
    return new OracleUpdated__Params(this);
  }
}

export class OracleUpdated__Params {
  _event: OracleUpdated;

  constructor(event: OracleUpdated) {
    this._event = event;
  }

  get newAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OrderBookLiquidationMultiplierUpdated extends ethereum.Event {
  get params(): OrderBookLiquidationMultiplierUpdated__Params {
    return new OrderBookLiquidationMultiplierUpdated__Params(this);
  }
}

export class OrderBookLiquidationMultiplierUpdated__Params {
  _event: OrderBookLiquidationMultiplierUpdated;

  constructor(event: OrderBookLiquidationMultiplierUpdated) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PausedUpdated extends ethereum.Event {
  get params(): PausedUpdated__Params {
    return new PausedUpdated__Params(this);
  }
}

export class PausedUpdated__Params {
  _event: PausedUpdated;

  constructor(event: PausedUpdated) {
    this._event = event;
  }

  get _type(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get oldState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get newState(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UsdoSwapperUpdated extends ethereum.Event {
  get params(): UsdoSwapperUpdated__Params {
    return new UsdoSwapperUpdated__Params(this);
  }
}

export class UsdoSwapperUpdated__Params {
  _event: UsdoSwapperUpdated;

  constructor(event: UsdoSwapperUpdated) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ValueUpdated extends ethereum.Event {
  get params(): ValueUpdated__Params {
    return new ValueUpdated__Params(this);
  }
}

export class ValueUpdated__Params {
  _event: ValueUpdated;

  constructor(event: ValueUpdated) {
    this._event = event;
  }

  get valType(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Singularity__accrueInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getInterestPerSecond(): BigInt {
    return this.value0;
  }

  getLastAccrued(): BigInt {
    return this.value1;
  }

  getFeesEarnedFraction(): BigInt {
    return this.value2;
  }
}

export class Singularity__borrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPart(): BigInt {
    return this.value0;
  }

  getShare(): BigInt {
    return this.value1;
  }
}

export class Singularity__computeTVLInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountToSolvency(): BigInt {
    return this.value0;
  }

  getMinTVL(): BigInt {
    return this.value1;
  }

  getMaxTVL(): BigInt {
    return this.value2;
  }
}

export class Singularity__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class Singularity__executeResult {
  value0: Array<boolean>;
  value1: Array<string>;

  constructor(value0: Array<boolean>, value1: Array<string>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    return map;
  }

  getSuccesses(): Array<boolean> {
    return this.value0;
  }

  getResults(): Array<string> {
    return this.value1;
  }
}

export class Singularity__getInterestDetailsResult_accrueInfoStruct extends ethereum.Tuple {
  get interestPerSecond(): BigInt {
    return this[0].toBigInt();
  }

  get lastAccrued(): BigInt {
    return this[1].toBigInt();
  }

  get feesEarnedFraction(): BigInt {
    return this[2].toBigInt();
  }
}

export class Singularity__getInterestDetailsResult {
  value0: Singularity__getInterestDetailsResult_accrueInfoStruct;
  value1: BigInt;

  constructor(
    value0: Singularity__getInterestDetailsResult_accrueInfoStruct,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_accrueInfo(): Singularity__getInterestDetailsResult_accrueInfoStruct {
    return this.value0;
  }

  getUtilization(): BigInt {
    return this.value1;
  }
}

export class Singularity__totalAssetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getElastic(): BigInt {
    return this.value0;
  }

  getBase(): BigInt {
    return this.value1;
  }
}

export class Singularity__totalBorrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getElastic(): BigInt {
    return this.value0;
  }

  getBase(): BigInt {
    return this.value1;
  }
}

export class Singularity__updateExchangeRateResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUpdated(): boolean {
    return this.value0;
  }

  getRate(): BigInt {
    return this.value1;
  }
}

export class Singularity extends ethereum.SmartContract {
  static bind(address: Address): Singularity {
    return new Singularity("Singularity", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  accrueInfo(): Singularity__accrueInfoResult {
    let result = super.call(
      "accrueInfo",
      "accrueInfo():(uint64,uint64,uint128)",
      []
    );

    return new Singularity__accrueInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_accrueInfo(): ethereum.CallResult<Singularity__accrueInfoResult> {
    let result = super.tryCall(
      "accrueInfo",
      "accrueInfo():(uint64,uint64,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__accrueInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  addAsset(from: Address, to: Address, skim: boolean, share: BigInt): BigInt {
    let result = super.call(
      "addAsset",
      "addAsset(address,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(skim),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return result[0].toBigInt();
  }

  try_addAsset(
    from: Address,
    to: Address,
    skim: boolean,
    share: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addAsset",
      "addAsset(address,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(skim),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowanceBorrow(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowanceBorrow",
      "allowanceBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowanceBorrow(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowanceBorrow",
      "allowanceBorrow(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approveBorrow(spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "approveBorrow",
      "approveBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_approveBorrow(
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveBorrow",
      "approveBorrow(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetId(): BigInt {
    let result = super.call("assetId", "assetId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_assetId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetId", "assetId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrow(
    from: Address,
    to: Address,
    amount: BigInt
  ): Singularity__borrowResult {
    let result = super.call(
      "borrow",
      "borrow(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new Singularity__borrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_borrow(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<Singularity__borrowResult> {
    let result = super.tryCall(
      "borrow",
      "borrow(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__borrowResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  borrowModule(): Address {
    let result = super.call("borrowModule", "borrowModule():(address)", []);

    return result[0].toAddress();
  }

  try_borrowModule(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrowModule", "borrowModule():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowOpeningFee(): BigInt {
    let result = super.call(
      "borrowOpeningFee",
      "borrowOpeningFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_borrowOpeningFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowOpeningFee",
      "borrowOpeningFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyCollateral(
    from: Address,
    borrowAmount: BigInt,
    supplyAmount: BigInt,
    data: Bytes
  ): BigInt {
    let result = super.call(
      "buyCollateral",
      "buyCollateral(address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromUnsignedBigInt(supplyAmount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyCollateral(
    from: Address,
    borrowAmount: BigInt,
    supplyAmount: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyCollateral",
      "buyCollateral(address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(borrowAmount),
        ethereum.Value.fromUnsignedBigInt(supplyAmount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  callerFee(): BigInt {
    let result = super.call("callerFee", "callerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_callerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("callerFee", "callerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralId(): BigInt {
    let result = super.call("collateralId", "collateralId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_collateralId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("collateralId", "collateralId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralModule(): Address {
    let result = super.call(
      "collateralModule",
      "collateralModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralModule",
      "collateralModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralizationRate(): BigInt {
    let result = super.call(
      "collateralizationRate",
      "collateralizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralizationRate",
      "collateralizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeAllowedLendShare(amount: BigInt, tokenId: BigInt): BigInt {
    let result = super.call(
      "computeAllowedLendShare",
      "computeAllowedLendShare(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeAllowedLendShare(
    amount: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeAllowedLendShare",
      "computeAllowedLendShare(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeClosingFactor(
    borrowPart: BigInt,
    collateralPartInAsset: BigInt,
    ratesPrecision: BigInt
  ): BigInt {
    let result = super.call(
      "computeClosingFactor",
      "computeClosingFactor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowPart),
        ethereum.Value.fromUnsignedBigInt(collateralPartInAsset),
        ethereum.Value.fromUnsignedBigInt(ratesPrecision)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeClosingFactor(
    borrowPart: BigInt,
    collateralPartInAsset: BigInt,
    ratesPrecision: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeClosingFactor",
      "computeClosingFactor(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(borrowPart),
        ethereum.Value.fromUnsignedBigInt(collateralPartInAsset),
        ethereum.Value.fromUnsignedBigInt(ratesPrecision)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeLiquidatorReward(user: Address, _exchangeRate: BigInt): BigInt {
    let result = super.call(
      "computeLiquidatorReward",
      "computeLiquidatorReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeLiquidatorReward(
    user: Address,
    _exchangeRate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeLiquidatorReward",
      "computeLiquidatorReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeTVLInfo(
    user: Address,
    _exchangeRate: BigInt
  ): Singularity__computeTVLInfoResult {
    let result = super.call(
      "computeTVLInfo",
      "computeTVLInfo(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );

    return new Singularity__computeTVLInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_computeTVLInfo(
    user: Address,
    _exchangeRate: BigInt
  ): ethereum.CallResult<Singularity__computeTVLInfoResult> {
    let result = super.tryCall(
      "computeTVLInfo",
      "computeTVLInfo(address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(_exchangeRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__computeTVLInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  conservator(): Address {
    let result = super.call("conservator", "conservator():(address)", []);

    return result[0].toAddress();
  }

  try_conservator(): ethereum.CallResult<Address> {
    let result = super.tryCall("conservator", "conservator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  eip712Domain(): Singularity__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new Singularity__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<Singularity__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  exchangeRate(): BigInt {
    let result = super.call("exchangeRate", "exchangeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_exchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exchangeRate", "exchangeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  execute(
    calls: Array<Bytes>,
    revertOnFail: boolean
  ): Singularity__executeResult {
    let result = super.call(
      "execute",
      "execute(bytes[],bool):(bool[],string[])",
      [
        ethereum.Value.fromBytesArray(calls),
        ethereum.Value.fromBoolean(revertOnFail)
      ]
    );

    return new Singularity__executeResult(
      result[0].toBooleanArray(),
      result[1].toStringArray()
    );
  }

  try_execute(
    calls: Array<Bytes>,
    revertOnFail: boolean
  ): ethereum.CallResult<Singularity__executeResult> {
    let result = super.tryCall(
      "execute",
      "execute(bytes[],bool):(bool[],string[])",
      [
        ethereum.Value.fromBytesArray(calls),
        ethereum.Value.fromBoolean(revertOnFail)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__executeResult(
        value[0].toBooleanArray(),
        value[1].toStringArray()
      )
    );
  }

  fullUtilizationMinusMax(): BigInt {
    let result = super.call(
      "fullUtilizationMinusMax",
      "fullUtilizationMinusMax():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fullUtilizationMinusMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fullUtilizationMinusMax",
      "fullUtilizationMinusMax():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInterestDetails(): Singularity__getInterestDetailsResult {
    let result = super.call(
      "getInterestDetails",
      "getInterestDetails():((uint64,uint64,uint128),uint256)",
      []
    );

    return changetype<Singularity__getInterestDetailsResult>(
      new Singularity__getInterestDetailsResult(
        changetype<Singularity__getInterestDetailsResult_accrueInfoStruct>(
          result[0].toTuple()
        ),
        result[1].toBigInt()
      )
    );
  }

  try_getInterestDetails(): ethereum.CallResult<
    Singularity__getInterestDetailsResult
  > {
    let result = super.tryCall(
      "getInterestDetails",
      "getInterestDetails():((uint64,uint64,uint128),uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Singularity__getInterestDetailsResult>(
        new Singularity__getInterestDetailsResult(
          changetype<Singularity__getInterestDetailsResult_accrueInfoStruct>(
            value[0].toTuple()
          ),
          value[1].toBigInt()
        )
      )
    );
  }

  interestElasticity(): BigInt {
    let result = super.call(
      "interestElasticity",
      "interestElasticity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestElasticity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestElasticity",
      "interestElasticity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leverageExecutor(): Address {
    let result = super.call(
      "leverageExecutor",
      "leverageExecutor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_leverageExecutor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leverageExecutor",
      "leverageExecutor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  leverageModule(): Address {
    let result = super.call("leverageModule", "leverageModule():(address)", []);

    return result[0].toAddress();
  }

  try_leverageModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leverageModule",
      "leverageModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationBonusAmount(): BigInt {
    let result = super.call(
      "liquidationBonusAmount",
      "liquidationBonusAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationBonusAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationBonusAmount",
      "liquidationBonusAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationCollateralizationRate(): BigInt {
    let result = super.call(
      "liquidationCollateralizationRate",
      "liquidationCollateralizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationCollateralizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationCollateralizationRate",
      "liquidationCollateralizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationModule(): Address {
    let result = super.call(
      "liquidationModule",
      "liquidationModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidationModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidationModule",
      "liquidationModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationMultiplier(): BigInt {
    let result = super.call(
      "liquidationMultiplier",
      "liquidationMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationMultiplier",
      "liquidationMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lqCollateralizationRate(): BigInt {
    let result = super.call(
      "lqCollateralizationRate",
      "lqCollateralizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lqCollateralizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lqCollateralizationRate",
      "lqCollateralizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLiquidatorReward(): BigInt {
    let result = super.call(
      "maxLiquidatorReward",
      "maxLiquidatorReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxLiquidatorReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLiquidatorReward",
      "maxLiquidatorReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maximumInterestPerSecond(): BigInt {
    let result = super.call(
      "maximumInterestPerSecond",
      "maximumInterestPerSecond():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumInterestPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumInterestPerSecond",
      "maximumInterestPerSecond():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maximumTargetUtilization(): BigInt {
    let result = super.call(
      "maximumTargetUtilization",
      "maximumTargetUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumTargetUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumTargetUtilization",
      "maximumTargetUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLiquidatorReward(): BigInt {
    let result = super.call(
      "minLiquidatorReward",
      "minLiquidatorReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minLiquidatorReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minLiquidatorReward",
      "minLiquidatorReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumInterestPerSecond(): BigInt {
    let result = super.call(
      "minimumInterestPerSecond",
      "minimumInterestPerSecond():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumInterestPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumInterestPerSecond",
      "minimumInterestPerSecond():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumTargetUtilization(): BigInt {
    let result = super.call(
      "minimumTargetUtilization",
      "minimumTargetUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumTargetUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumTargetUtilization",
      "minimumTargetUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracleData(): Bytes {
    let result = super.call("oracleData", "oracleData():(bytes)", []);

    return result[0].toBytes();
  }

  try_oracleData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("oracleData", "oracleData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pauseOptions(pauseProp: i32): boolean {
    let result = super.call("pauseOptions", "pauseOptions(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pauseProp))
    ]);

    return result[0].toBoolean();
  }

  try_pauseOptions(pauseProp: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall("pauseOptions", "pauseOptions(uint8):(bool)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pauseProp))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  penrose(): Address {
    let result = super.call("penrose", "penrose():(address)", []);

    return result[0].toAddress();
  }

  try_penrose(): ethereum.CallResult<Address> {
    let result = super.tryCall("penrose", "penrose():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateTimestamp(): BigInt {
    let result = super.call("rateTimestamp", "rateTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateTimestamp",
      "rateTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateValidDuration(): BigInt {
    let result = super.call(
      "rateValidDuration",
      "rateValidDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rateValidDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rateValidDuration",
      "rateValidDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refreshPenroseFees(): BigInt {
    let result = super.call(
      "refreshPenroseFees",
      "refreshPenroseFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_refreshPenroseFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refreshPenroseFees",
      "refreshPenroseFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeAsset(from: Address, to: Address, fraction: BigInt): BigInt {
    let result = super.call(
      "removeAsset",
      "removeAsset(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(fraction)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeAsset(
    from: Address,
    to: Address,
    fraction: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeAsset",
      "removeAsset(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(fraction)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repay(from: Address, to: Address, skim: boolean, part: BigInt): BigInt {
    let result = super.call(
      "repay",
      "repay(address,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(skim),
        ethereum.Value.fromUnsignedBigInt(part)
      ]
    );

    return result[0].toBigInt();
  }

  try_repay(
    from: Address,
    to: Address,
    skim: boolean,
    part: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repay",
      "repay(address,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(skim),
        ethereum.Value.fromUnsignedBigInt(part)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellCollateral(from: Address, share: BigInt, data: Bytes): BigInt {
    let result = super.call(
      "sellCollateral",
      "sellCollateral(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellCollateral(
    from: Address,
    share: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellCollateral",
      "sellCollateral(address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startingInterestPerSecond(): BigInt {
    let result = super.call(
      "startingInterestPerSecond",
      "startingInterestPerSecond():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_startingInterestPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startingInterestPerSecond",
      "startingInterestPerSecond():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAsset(): Singularity__totalAssetResult {
    let result = super.call("totalAsset", "totalAsset():(uint128,uint128)", []);

    return new Singularity__totalAssetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalAsset(): ethereum.CallResult<Singularity__totalAssetResult> {
    let result = super.tryCall(
      "totalAsset",
      "totalAsset():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__totalAssetResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalBorrow(): Singularity__totalBorrowResult {
    let result = super.call(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );

    return new Singularity__totalBorrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalBorrow(): ethereum.CallResult<Singularity__totalBorrowResult> {
    let result = super.tryCall(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__totalBorrowResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalBorrowCap(): BigInt {
    let result = super.call("totalBorrowCap", "totalBorrowCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBorrowCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowCap",
      "totalBorrowCap():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCollateralShare(): BigInt {
    let result = super.call(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateralShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateralShare",
      "totalCollateralShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateExchangeRate(): Singularity__updateExchangeRateResult {
    let result = super.call(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      []
    );

    return new Singularity__updateExchangeRateResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_updateExchangeRate(): ethereum.CallResult<
    Singularity__updateExchangeRateResult
  > {
    let result = super.tryCall(
      "updateExchangeRate",
      "updateExchangeRate():(bool,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Singularity__updateExchangeRateResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  userBorrowPart(param0: Address): BigInt {
    let result = super.call(
      "userBorrowPart",
      "userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userBorrowPart(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBorrowPart",
      "userBorrowPart(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateralShare(param0: Address): BigInt {
    let result = super.call(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userCollateralShare(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCollateralShare",
      "userCollateralShare(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewLiquidationCollateralAmount(
    user: Address,
    maxBorrowPart: BigInt,
    minLiquidationBonus: BigInt
  ): Bytes {
    let result = super.call(
      "viewLiquidationCollateralAmount",
      "viewLiquidationCollateralAmount(address,uint256,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(maxBorrowPart),
        ethereum.Value.fromUnsignedBigInt(minLiquidationBonus)
      ]
    );

    return result[0].toBytes();
  }

  try_viewLiquidationCollateralAmount(
    user: Address,
    maxBorrowPart: BigInt,
    minLiquidationBonus: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "viewLiquidationCollateralAmount",
      "viewLiquidationCollateralAmount(address,uint256,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(maxBorrowPart),
        ethereum.Value.fromUnsignedBigInt(minLiquidationBonus)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  yieldBox(): Address {
    let result = super.call("yieldBox", "yieldBox():(address)", []);

    return result[0].toAddress();
  }

  try_yieldBox(): ethereum.CallResult<Address> {
    let result = super.tryCall("yieldBox", "yieldBox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AccrueCall extends ethereum.Call {
  get inputs(): AccrueCall__Inputs {
    return new AccrueCall__Inputs(this);
  }

  get outputs(): AccrueCall__Outputs {
    return new AccrueCall__Outputs(this);
  }
}

export class AccrueCall__Inputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AccrueCall__Outputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AddAssetCall extends ethereum.Call {
  get inputs(): AddAssetCall__Inputs {
    return new AddAssetCall__Inputs(this);
  }

  get outputs(): AddAssetCall__Outputs {
    return new AddAssetCall__Outputs(this);
  }
}

export class AddAssetCall__Inputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get skim(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get share(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddAssetCall__Outputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }

  get fraction(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get skim(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveBorrowCall extends ethereum.Call {
  get inputs(): ApproveBorrowCall__Inputs {
    return new ApproveBorrowCall__Inputs(this);
  }

  get outputs(): ApproveBorrowCall__Outputs {
    return new ApproveBorrowCall__Outputs(this);
  }
}

export class ApproveBorrowCall__Inputs {
  _call: ApproveBorrowCall;

  constructor(call: ApproveBorrowCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveBorrowCall__Outputs {
  _call: ApproveBorrowCall;

  constructor(call: ApproveBorrowCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get part(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BuyCollateralCall extends ethereum.Call {
  get inputs(): BuyCollateralCall__Inputs {
    return new BuyCollateralCall__Inputs(this);
  }

  get outputs(): BuyCollateralCall__Outputs {
    return new BuyCollateralCall__Outputs(this);
  }
}

export class BuyCollateralCall__Inputs {
  _call: BuyCollateralCall;

  constructor(call: BuyCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get supplyAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BuyCollateralCall__Outputs {
  _call: BuyCollateralCall;

  constructor(call: BuyCollateralCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get successes(): Array<boolean> {
    return this._call.outputValues[0].value.toBooleanArray();
  }

  get results(): Array<string> {
    return this._call.outputValues[1].value.toStringArray();
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get maxBorrowParts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get minLiquidationBonuses(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get liquidatorReceivers(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get liquidatorReceiverDatas(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class LiquidateBadDebtCall extends ethereum.Call {
  get inputs(): LiquidateBadDebtCall__Inputs {
    return new LiquidateBadDebtCall__Inputs(this);
  }

  get outputs(): LiquidateBadDebtCall__Outputs {
    return new LiquidateBadDebtCall__Outputs(this);
  }
}

export class LiquidateBadDebtCall__Inputs {
  _call: LiquidateBadDebtCall;

  constructor(call: LiquidateBadDebtCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get liquidatorReceiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get liquidatorReceiverData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get swapCollateral(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class LiquidateBadDebtCall__Outputs {
  _call: LiquidateBadDebtCall;

  constructor(call: LiquidateBadDebtCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class PermitActionCall extends ethereum.Call {
  get inputs(): PermitActionCall__Inputs {
    return new PermitActionCall__Inputs(this);
  }

  get outputs(): PermitActionCall__Outputs {
    return new PermitActionCall__Outputs(this);
  }
}

export class PermitActionCall__Inputs {
  _call: PermitActionCall;

  constructor(call: PermitActionCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get actionType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class PermitActionCall__Outputs {
  _call: PermitActionCall;

  constructor(call: PermitActionCall) {
    this._call = call;
  }
}

export class PermitBorrowCall extends ethereum.Call {
  get inputs(): PermitBorrowCall__Inputs {
    return new PermitBorrowCall__Inputs(this);
  }

  get outputs(): PermitBorrowCall__Outputs {
    return new PermitBorrowCall__Outputs(this);
  }
}

export class PermitBorrowCall__Inputs {
  _call: PermitBorrowCall;

  constructor(call: PermitBorrowCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitBorrowCall__Outputs {
  _call: PermitBorrowCall;

  constructor(call: PermitBorrowCall) {
    this._call = call;
  }
}

export class RefreshPenroseFeesCall extends ethereum.Call {
  get inputs(): RefreshPenroseFeesCall__Inputs {
    return new RefreshPenroseFeesCall__Inputs(this);
  }

  get outputs(): RefreshPenroseFeesCall__Outputs {
    return new RefreshPenroseFeesCall__Outputs(this);
  }
}

export class RefreshPenroseFeesCall__Inputs {
  _call: RefreshPenroseFeesCall;

  constructor(call: RefreshPenroseFeesCall) {
    this._call = call;
  }
}

export class RefreshPenroseFeesCall__Outputs {
  _call: RefreshPenroseFeesCall;

  constructor(call: RefreshPenroseFeesCall) {
    this._call = call;
  }

  get feeShares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveAssetCall extends ethereum.Call {
  get inputs(): RemoveAssetCall__Inputs {
    return new RemoveAssetCall__Inputs(this);
  }

  get outputs(): RemoveAssetCall__Outputs {
    return new RemoveAssetCall__Outputs(this);
  }
}

export class RemoveAssetCall__Inputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fraction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveAssetCall__Outputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }

  get share(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get skim(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get part(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RescueEthCall extends ethereum.Call {
  get inputs(): RescueEthCall__Inputs {
    return new RescueEthCall__Inputs(this);
  }

  get outputs(): RescueEthCall__Outputs {
    return new RescueEthCall__Outputs(this);
  }
}

export class RescueEthCall__Inputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RescueEthCall__Outputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }
}

export class SellCollateralCall extends ethereum.Call {
  get inputs(): SellCollateralCall__Inputs {
    return new SellCollateralCall__Inputs(this);
  }

  get outputs(): SellCollateralCall__Outputs {
    return new SellCollateralCall__Outputs(this);
  }
}

export class SellCollateralCall__Inputs {
  _call: SellCollateralCall;

  constructor(call: SellCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get share(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SellCollateralCall__Outputs {
  _call: SellCollateralCall;

  constructor(call: SellCollateralCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetLeverageExecutorCall extends ethereum.Call {
  get inputs(): SetLeverageExecutorCall__Inputs {
    return new SetLeverageExecutorCall__Inputs(this);
  }

  get outputs(): SetLeverageExecutorCall__Outputs {
    return new SetLeverageExecutorCall__Outputs(this);
  }
}

export class SetLeverageExecutorCall__Inputs {
  _call: SetLeverageExecutorCall;

  constructor(call: SetLeverageExecutorCall) {
    this._call = call;
  }

  get _executor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLeverageExecutorCall__Outputs {
  _call: SetLeverageExecutorCall;

  constructor(call: SetLeverageExecutorCall) {
    this._call = call;
  }
}

export class SetMarketConfigCall extends ethereum.Call {
  get inputs(): SetMarketConfigCall__Inputs {
    return new SetMarketConfigCall__Inputs(this);
  }

  get outputs(): SetMarketConfigCall__Outputs {
    return new SetMarketConfigCall__Outputs(this);
  }
}

export class SetMarketConfigCall__Inputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _conservator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _callerFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _liquidationBonusAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _minLiquidatorReward(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _maxLiquidatorReward(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _totalBorrowCap(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _collateralizationRate(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _liquidationCollateralizationRate(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class SetMarketConfigCall__Outputs {
  _call: SetMarketConfigCall;

  constructor(call: SetMarketConfigCall) {
    this._call = call;
  }
}

export class SetSingularityConfigCall extends ethereum.Call {
  get inputs(): SetSingularityConfigCall__Inputs {
    return new SetSingularityConfigCall__Inputs(this);
  }

  get outputs(): SetSingularityConfigCall__Outputs {
    return new SetSingularityConfigCall__Outputs(this);
  }
}

export class SetSingularityConfigCall__Inputs {
  _call: SetSingularityConfigCall;

  constructor(call: SetSingularityConfigCall) {
    this._call = call;
  }

  get _borrowOpeningFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lqCollateralizationRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _liquidationMultiplier(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minimumTargetUtilization(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maximumTargetUtilization(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minimumInterestPerSecond(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _maximumInterestPerSecond(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _interestElasticity(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class SetSingularityConfigCall__Outputs {
  _call: SetSingularityConfigCall;

  constructor(call: SetSingularityConfigCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall extends ethereum.Call {
  get inputs(): UpdateExchangeRateCall__Inputs {
    return new UpdateExchangeRateCall__Inputs(this);
  }

  get outputs(): UpdateExchangeRateCall__Outputs {
    return new UpdateExchangeRateCall__Outputs(this);
  }
}

export class UpdateExchangeRateCall__Inputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }
}

export class UpdateExchangeRateCall__Outputs {
  _call: UpdateExchangeRateCall;

  constructor(call: UpdateExchangeRateCall) {
    this._call = call;
  }

  get updated(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get rate(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdatePauseCall extends ethereum.Call {
  get inputs(): UpdatePauseCall__Inputs {
    return new UpdatePauseCall__Inputs(this);
  }

  get outputs(): UpdatePauseCall__Outputs {
    return new UpdatePauseCall__Outputs(this);
  }
}

export class UpdatePauseCall__Inputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }

  get _type(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get val(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get resetAccrueTimestmap(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdatePauseCall__Outputs {
  _call: UpdatePauseCall;

  constructor(call: UpdatePauseCall) {
    this._call = call;
  }
}
