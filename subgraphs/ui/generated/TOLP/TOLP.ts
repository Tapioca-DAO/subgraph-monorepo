// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivateSGLPoolRescue extends ethereum.Event {
  get params(): ActivateSGLPoolRescue__Params {
    return new ActivateSGLPoolRescue__Params(this);
  }
}

export class ActivateSGLPoolRescue__Params {
  _event: ActivateSGLPoolRescue;

  constructor(event: ActivateSGLPoolRescue) {
    this._event = event;
  }

  get sglAssetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sglAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sglAssetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tolpTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sglAssetId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tolpTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lockDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ybShares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PearlmitUpdated extends ethereum.Event {
  get params(): PearlmitUpdated__Params {
    return new PearlmitUpdated__Params(this);
  }
}

export class PearlmitUpdated__Params {
  _event: PearlmitUpdated;

  constructor(event: PearlmitUpdated) {
    this._event = event;
  }

  get oldPearlmit(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPearlmit(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegisterSingularity extends ethereum.Event {
  get params(): RegisterSingularity__Params {
    return new RegisterSingularity__Params(this);
  }
}

export class RegisterSingularity__Params {
  _event: RegisterSingularity;

  constructor(event: RegisterSingularity) {
    this._event = event;
  }

  get sglAssetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sglAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolWeight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RequestSglPoolRescue extends ethereum.Event {
  get params(): RequestSglPoolRescue__Params {
    return new RequestSglPoolRescue__Params(this);
  }
}

export class RequestSglPoolRescue__Params {
  _event: RequestSglPoolRescue;

  constructor(event: RequestSglPoolRescue) {
    this._event = event;
  }

  get sglAssetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetSGLPoolWeight extends ethereum.Event {
  get params(): SetSGLPoolWeight__Params {
    return new SetSGLPoolWeight__Params(this);
  }
}

export class SetSGLPoolWeight__Params {
  _event: SetSGLPoolWeight;

  constructor(event: SetSGLPoolWeight) {
    this._event = event;
  }

  get sglAssetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sglAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolWeight(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UnregisterSingularity extends ethereum.Event {
  get params(): UnregisterSingularity__Params {
    return new UnregisterSingularity__Params(this);
  }
}

export class UnregisterSingularity__Params {
  _event: UnregisterSingularity;

  constructor(event: UnregisterSingularity) {
    this._event = event;
  }

  get sglAssetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sglAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateTotalSingularityPoolWeights extends ethereum.Event {
  get params(): UpdateTotalSingularityPoolWeights__Params {
    return new UpdateTotalSingularityPoolWeights__Params(this);
  }
}

export class UpdateTotalSingularityPoolWeights__Params {
  _event: UpdateTotalSingularityPoolWeights;

  constructor(event: UpdateTotalSingularityPoolWeights) {
    this._event = event;
  }

  get totalSingularityPoolWeights(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TOLP__activeSingularitiesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getSglAssetID(): BigInt {
    return this.value0;
  }

  getTotalDeposited(): BigInt {
    return this.value1;
  }

  getPoolWeight(): BigInt {
    return this.value2;
  }

  getRescue(): boolean {
    return this.value3;
  }
}

export class TOLP__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class TOLP__getLockResultValue0Struct extends ethereum.Tuple {
  get sglAssetID(): BigInt {
    return this[0].toBigInt();
  }

  get ybShares(): BigInt {
    return this[1].toBigInt();
  }

  get lockTime(): BigInt {
    return this[2].toBigInt();
  }

  get lockDuration(): BigInt {
    return this[3].toBigInt();
  }
}

export class TOLP__getSingularityPoolsResultValue0Struct extends ethereum.Tuple {
  get sglAssetID(): BigInt {
    return this[0].toBigInt();
  }

  get totalDeposited(): BigInt {
    return this[1].toBigInt();
  }

  get poolWeight(): BigInt {
    return this[2].toBigInt();
  }

  get rescue(): boolean {
    return this[3].toBoolean();
  }
}

export class TOLP__getTotalPoolDepositedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getShares(): BigInt {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class TOLP__lockPositionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getSglAssetID(): BigInt {
    return this.value0;
  }

  getYbShares(): BigInt {
    return this.value1;
  }

  getLockTime(): BigInt {
    return this.value2;
  }

  getLockDuration(): BigInt {
    return this.value3;
  }
}

export class TOLP extends ethereum.SmartContract {
  static bind(address: Address): TOLP {
    return new TOLP("TOLP", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EPOCH_DURATION(): BigInt {
    let result = super.call("EPOCH_DURATION", "EPOCH_DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EPOCH_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EPOCH_DURATION",
      "EPOCH_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LOCK_DURATION(): BigInt {
    let result = super.call(
      "MAX_LOCK_DURATION",
      "MAX_LOCK_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LOCK_DURATION",
      "MAX_LOCK_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeSingularities(param0: Address): TOLP__activeSingularitiesResult {
    let result = super.call(
      "activeSingularities",
      "activeSingularities(address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new TOLP__activeSingularitiesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_activeSingularities(
    param0: Address
  ): ethereum.CallResult<TOLP__activeSingularitiesResult> {
    let result = super.tryCall(
      "activeSingularities",
      "activeSingularities(address):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TOLP__activeSingularitiesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): TOLP__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new TOLP__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<TOLP__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TOLP__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLock(_tokenId: BigInt): TOLP__getLockResultValue0Struct {
    let result = super.call(
      "getLock",
      "getLock(uint256):((uint128,uint128,uint128,uint128))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return changetype<TOLP__getLockResultValue0Struct>(result[0].toTuple());
  }

  try_getLock(
    _tokenId: BigInt
  ): ethereum.CallResult<TOLP__getLockResultValue0Struct> {
    let result = super.tryCall(
      "getLock",
      "getLock(uint256):((uint128,uint128,uint128,uint128))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TOLP__getLockResultValue0Struct>(value[0].toTuple())
    );
  }

  getSingularities(): Array<BigInt> {
    let result = super.call(
      "getSingularities",
      "getSingularities():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getSingularities(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getSingularities",
      "getSingularities():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getSingularityPools(): Array<TOLP__getSingularityPoolsResultValue0Struct> {
    let result = super.call(
      "getSingularityPools",
      "getSingularityPools():((uint256,uint256,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<
      TOLP__getSingularityPoolsResultValue0Struct
    >();
  }

  try_getSingularityPools(): ethereum.CallResult<
    Array<TOLP__getSingularityPoolsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSingularityPools",
      "getSingularityPools():((uint256,uint256,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<TOLP__getSingularityPoolsResultValue0Struct>()
    );
  }

  getTotalPoolDeposited(
    _sglAssetId: BigInt
  ): TOLP__getTotalPoolDepositedResult {
    let result = super.call(
      "getTotalPoolDeposited",
      "getTotalPoolDeposited(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sglAssetId)]
    );

    return new TOLP__getTotalPoolDepositedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTotalPoolDeposited(
    _sglAssetId: BigInt
  ): ethereum.CallResult<TOLP__getTotalPoolDepositedResult> {
    let result = super.tryCall(
      "getTotalPoolDeposited",
      "getTotalPoolDeposited(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_sglAssetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TOLP__getTotalPoolDepositedResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedOrOwner(_spender: Address, _tokenId: BigInt): boolean {
    let result = super.call(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    _spender: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lock(
    _to: Address,
    _singularity: Address,
    _lockDuration: BigInt,
    _ybShares: BigInt
  ): BigInt {
    let result = super.call(
      "lock",
      "lock(address,address,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_singularity),
        ethereum.Value.fromUnsignedBigInt(_lockDuration),
        ethereum.Value.fromUnsignedBigInt(_ybShares)
      ]
    );

    return result[0].toBigInt();
  }

  try_lock(
    _to: Address,
    _singularity: Address,
    _lockDuration: BigInt,
    _ybShares: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lock",
      "lock(address,address,uint128,uint128):(uint256)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromAddress(_singularity),
        ethereum.Value.fromUnsignedBigInt(_lockDuration),
        ethereum.Value.fromUnsignedBigInt(_ybShares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockPositions(param0: BigInt): TOLP__lockPositionsResult {
    let result = super.call(
      "lockPositions",
      "lockPositions(uint256):(uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TOLP__lockPositionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_lockPositions(
    param0: BigInt
  ): ethereum.CallResult<TOLP__lockPositionsResult> {
    let result = super.tryCall(
      "lockPositions",
      "lockPositions(uint256):(uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TOLP__lockPositionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pearlmit(): Address {
    let result = super.call("pearlmit", "pearlmit():(address)", []);

    return result[0].toAddress();
  }

  try_pearlmit(): ethereum.CallResult<Address> {
    let result = super.tryCall("pearlmit", "pearlmit():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rescueCooldown(): BigInt {
    let result = super.call("rescueCooldown", "rescueCooldown():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rescueCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rescueCooldown",
      "rescueCooldown():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sglAssetIDToAddress(param0: BigInt): Address {
    let result = super.call(
      "sglAssetIDToAddress",
      "sglAssetIDToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_sglAssetIDToAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sglAssetIDToAddress",
      "sglAssetIDToAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sglRescueRequest(sglId: BigInt): BigInt {
    let result = super.call(
      "sglRescueRequest",
      "sglRescueRequest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sglId)]
    );

    return result[0].toBigInt();
  }

  try_sglRescueRequest(sglId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sglRescueRequest",
      "sglRescueRequest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(sglId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  singularities(param0: BigInt): BigInt {
    let result = super.call(
      "singularities",
      "singularities(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_singularities(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "singularities",
      "singularities(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenCounter(): BigInt {
    let result = super.call("tokenCounter", "tokenCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenCounter", "tokenCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSingularityPoolWeights(): BigInt {
    let result = super.call(
      "totalSingularityPoolWeights",
      "totalSingularityPoolWeights():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSingularityPoolWeights(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSingularityPoolWeights",
      "totalSingularityPoolWeights():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  yieldBox(): Address {
    let result = super.call("yieldBox", "yieldBox():(address)", []);

    return result[0].toAddress();
  }

  try_yieldBox(): ethereum.CallResult<Address> {
    let result = super.tryCall("yieldBox", "yieldBox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _yieldBox(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _epochDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _pearlmit(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateSGLPoolRescueCall extends ethereum.Call {
  get inputs(): ActivateSGLPoolRescueCall__Inputs {
    return new ActivateSGLPoolRescueCall__Inputs(this);
  }

  get outputs(): ActivateSGLPoolRescueCall__Outputs {
    return new ActivateSGLPoolRescueCall__Outputs(this);
  }
}

export class ActivateSGLPoolRescueCall__Inputs {
  _call: ActivateSGLPoolRescueCall;

  constructor(call: ActivateSGLPoolRescueCall) {
    this._call = call;
  }

  get singularity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ActivateSGLPoolRescueCall__Outputs {
  _call: ActivateSGLPoolRescueCall;

  constructor(call: ActivateSGLPoolRescueCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchCall extends ethereum.Call {
  get inputs(): BatchCall__Inputs {
    return new BatchCall__Inputs(this);
  }

  get outputs(): BatchCall__Outputs {
    return new BatchCall__Outputs(this);
  }
}

export class BatchCall__Inputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class BatchCall__Outputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _singularity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _lockDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _ybShares(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RegisterSingularityCall extends ethereum.Call {
  get inputs(): RegisterSingularityCall__Inputs {
    return new RegisterSingularityCall__Inputs(this);
  }

  get outputs(): RegisterSingularityCall__Outputs {
    return new RegisterSingularityCall__Outputs(this);
  }
}

export class RegisterSingularityCall__Inputs {
  _call: RegisterSingularityCall;

  constructor(call: RegisterSingularityCall) {
    this._call = call;
  }

  get singularity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get weight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterSingularityCall__Outputs {
  _call: RegisterSingularityCall;

  constructor(call: RegisterSingularityCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestSglPoolRescueCall extends ethereum.Call {
  get inputs(): RequestSglPoolRescueCall__Inputs {
    return new RequestSglPoolRescueCall__Inputs(this);
  }

  get outputs(): RequestSglPoolRescueCall__Outputs {
    return new RequestSglPoolRescueCall__Outputs(this);
  }
}

export class RequestSglPoolRescueCall__Inputs {
  _call: RequestSglPoolRescueCall;

  constructor(call: RequestSglPoolRescueCall) {
    this._call = call;
  }

  get _sglAssetID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestSglPoolRescueCall__Outputs {
  _call: RequestSglPoolRescueCall;

  constructor(call: RequestSglPoolRescueCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetPauseCall extends ethereum.Call {
  get inputs(): SetPauseCall__Inputs {
    return new SetPauseCall__Inputs(this);
  }

  get outputs(): SetPauseCall__Outputs {
    return new SetPauseCall__Outputs(this);
  }
}

export class SetPauseCall__Inputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }

  get _pauseState(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPauseCall__Outputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }
}

export class SetPearlmitCall extends ethereum.Call {
  get inputs(): SetPearlmitCall__Inputs {
    return new SetPearlmitCall__Inputs(this);
  }

  get outputs(): SetPearlmitCall__Outputs {
    return new SetPearlmitCall__Outputs(this);
  }
}

export class SetPearlmitCall__Inputs {
  _call: SetPearlmitCall;

  constructor(call: SetPearlmitCall) {
    this._call = call;
  }

  get _pearlmit(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPearlmitCall__Outputs {
  _call: SetPearlmitCall;

  constructor(call: SetPearlmitCall) {
    this._call = call;
  }
}

export class SetRescueCooldownCall extends ethereum.Call {
  get inputs(): SetRescueCooldownCall__Inputs {
    return new SetRescueCooldownCall__Inputs(this);
  }

  get outputs(): SetRescueCooldownCall__Outputs {
    return new SetRescueCooldownCall__Outputs(this);
  }
}

export class SetRescueCooldownCall__Inputs {
  _call: SetRescueCooldownCall;

  constructor(call: SetRescueCooldownCall) {
    this._call = call;
  }

  get _rescueCooldown(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRescueCooldownCall__Outputs {
  _call: SetRescueCooldownCall;

  constructor(call: SetRescueCooldownCall) {
    this._call = call;
  }
}

export class SetSGLPoolWeightCall extends ethereum.Call {
  get inputs(): SetSGLPoolWeightCall__Inputs {
    return new SetSGLPoolWeightCall__Inputs(this);
  }

  get outputs(): SetSGLPoolWeightCall__Outputs {
    return new SetSGLPoolWeightCall__Outputs(this);
  }
}

export class SetSGLPoolWeightCall__Inputs {
  _call: SetSGLPoolWeightCall;

  constructor(call: SetSGLPoolWeightCall) {
    this._call = call;
  }

  get singularity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSGLPoolWeightCall__Outputs {
  _call: SetSGLPoolWeightCall;

  constructor(call: SetSGLPoolWeightCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _singularity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnregisterSingularityCall extends ethereum.Call {
  get inputs(): UnregisterSingularityCall__Inputs {
    return new UnregisterSingularityCall__Inputs(this);
  }

  get outputs(): UnregisterSingularityCall__Outputs {
    return new UnregisterSingularityCall__Outputs(this);
  }
}

export class UnregisterSingularityCall__Inputs {
  _call: UnregisterSingularityCall;

  constructor(call: UnregisterSingularityCall) {
    this._call = call;
  }

  get singularity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnregisterSingularityCall__Outputs {
  _call: UnregisterSingularityCall;

  constructor(call: UnregisterSingularityCall) {
    this._call = call;
  }
}
