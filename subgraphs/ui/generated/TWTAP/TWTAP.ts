// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AMLDivergence extends ethereum.Event {
  get params(): AMLDivergence__Params {
    return new AMLDivergence__Params(this);
  }
}

export class AMLDivergence__Params {
  _event: AMLDivergence;

  constructor(event: AMLDivergence) {
    this._event = event;
  }

  get cumulative(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get averageMagnitude(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalParticipants(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AddRewardToken extends ethereum.Event {
  get params(): AddRewardToken__Params {
    return new AddRewardToken__Params(this);
  }
}

export class AddRewardToken__Params {
  _event: AddRewardToken;

  constructor(event: AddRewardToken) {
    this._event = event;
  }

  get rewardTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewardTokenIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AdvanceEpoch extends ethereum.Event {
  get params(): AdvanceEpoch__Params {
    return new AdvanceEpoch__Params(this);
  }
}

export class AdvanceEpoch__Params {
  _event: AdvanceEpoch;

  constructor(event: AdvanceEpoch) {
    this._event = event;
  }

  get newEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lastEpoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ClaimReward extends ethereum.Event {
  get params(): ClaimReward__Params {
    return new ClaimReward__Params(this);
  }
}

export class ClaimReward__Params {
  _event: ClaimReward;

  constructor(event: ClaimReward) {
    this._event = event;
  }

  get rewardTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get twTapTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get rewardTokenIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DistributeReward extends ethereum.Event {
  get params(): DistributeReward__Params {
    return new DistributeReward__Params(this);
  }
}

export class DistributeReward__Params {
  _event: DistributeReward;

  constructor(event: DistributeReward) {
    this._event = event;
  }

  get rewardTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardTokenIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class ExitPosition extends ethereum.Event {
  get params(): ExitPosition__Params {
    return new ExitPosition__Params(this);
  }
}

export class ExitPosition__Params {
  _event: ExitPosition;

  constructor(event: ExitPosition) {
    this._event = event;
  }

  get twTapTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get releasedTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogMaxRewardsLength extends ethereum.Event {
  get params(): LogMaxRewardsLength__Params {
    return new LogMaxRewardsLength__Params(this);
  }
}

export class LogMaxRewardsLength__Params {
  _event: LogMaxRewardsLength;

  constructor(event: LogMaxRewardsLength) {
    this._event = event;
  }

  get _oldLength(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newLength(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _currentLength(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Participate extends ethereum.Event {
  get params(): Participate__Params {
    return new Participate__Params(this);
  }
}

export class Participate__Params {
  _event: Participate;

  constructor(event: Participate) {
    this._event = event;
  }

  get participant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintedTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tapAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get multiplier(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lockDuration(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PearlmitUpdated extends ethereum.Event {
  get params(): PearlmitUpdated__Params {
    return new PearlmitUpdated__Params(this);
  }
}

export class PearlmitUpdated__Params {
  _event: PearlmitUpdated;

  constructor(event: PearlmitUpdated) {
    this._event = event;
  }

  get oldPearlmit(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPearlmit(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMinWeightFactor extends ethereum.Event {
  get params(): SetMinWeightFactor__Params {
    return new SetMinWeightFactor__Params(this);
  }
}

export class SetMinWeightFactor__Params {
  _event: SetMinWeightFactor;

  constructor(event: SetMinWeightFactor) {
    this._event = event;
  }

  get newMinWeightFactor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldMinWeightFactor(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetVirtualTotalAmount extends ethereum.Event {
  get params(): SetVirtualTotalAmount__Params {
    return new SetVirtualTotalAmount__Params(this);
  }
}

export class SetVirtualTotalAmount__Params {
  _event: SetVirtualTotalAmount;

  constructor(event: SetVirtualTotalAmount) {
    this._event = event;
  }

  get newVirtualTotalAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldVirtualTotalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TWTAP__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class TWTAP__getParticipationResultParticipantStruct extends ethereum.Tuple {
  get averageMagnitude(): BigInt {
    return this[0].toBigInt();
  }

  get hasVotingPower(): boolean {
    return this[1].toBoolean();
  }

  get divergenceForce(): boolean {
    return this[2].toBoolean();
  }

  get tapReleased(): boolean {
    return this[3].toBoolean();
  }

  get expiry(): BigInt {
    return this[4].toBigInt();
  }

  get tapAmount(): BigInt {
    return this[5].toBigInt();
  }

  get multiplier(): i32 {
    return this[6].toI32();
  }

  get lastInactive(): BigInt {
    return this[7].toBigInt();
  }

  get lastActive(): BigInt {
    return this[8].toBigInt();
  }
}

export class TWTAP__getTypedDataHashInput_permitDataStruct extends ethereum.Tuple {
  get spender(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }
}

export class TWTAP__participantsResult {
  value0: BigInt;
  value1: boolean;
  value2: boolean;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: boolean,
    value3: boolean,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: BigInt,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6)),
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getAverageMagnitude(): BigInt {
    return this.value0;
  }

  getHasVotingPower(): boolean {
    return this.value1;
  }

  getDivergenceForce(): boolean {
    return this.value2;
  }

  getTapReleased(): boolean {
    return this.value3;
  }

  getExpiry(): BigInt {
    return this.value4;
  }

  getTapAmount(): BigInt {
    return this.value5;
  }

  getMultiplier(): i32 {
    return this.value6;
  }

  getLastInactive(): BigInt {
    return this.value7;
  }

  getLastActive(): BigInt {
    return this.value8;
  }
}

export class TWTAP__twAMLResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTotalParticipants(): BigInt {
    return this.value0;
  }

  getAverageMagnitude(): BigInt {
    return this.value1;
  }

  getTotalDeposited(): BigInt {
    return this.value2;
  }

  getCumulative(): BigInt {
    return this.value3;
  }
}

export class TWTAP extends ethereum.SmartContract {
  static bind(address: Address): TWTAP {
    return new TWTAP("TWTAP", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EPOCH_DURATION(): BigInt {
    let result = super.call("EPOCH_DURATION", "EPOCH_DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EPOCH_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EPOCH_DURATION",
      "EPOCH_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LOCK_DURATION(): BigInt {
    let result = super.call(
      "MAX_LOCK_DURATION",
      "MAX_LOCK_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LOCK_DURATION",
      "MAX_LOCK_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addRewardToken(_token: Address): BigInt {
    let result = super.call(
      "addRewardToken",
      "addRewardToken(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBigInt();
  }

  try_addRewardToken(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addRewardToken",
      "addRewardToken(address):(uint256)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimRewards(_tokenId: BigInt, _to: Address): Array<BigInt> {
    let result = super.call(
      "claimRewards",
      "claimRewards(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_to),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_claimRewards(
    _tokenId: BigInt,
    _to: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "claimRewards",
      "claimRewards(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  claimable(_tokenId: BigInt): Array<BigInt> {
    let result = super.call("claimable", "claimable(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);

    return result[0].toBigIntArray();
  }

  try_claimable(_tokenId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("claimable", "claimable(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  claimed(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call("claimed", "claimed(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1),
    ]);

    return result[0].toBigInt();
  }

  try_claimed(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimed",
      "claimed(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creation(): BigInt {
    let result = super.call("creation", "creation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_creation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("creation", "creation():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentWeek(): BigInt {
    let result = super.call("currentWeek", "currentWeek():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentWeek(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentWeek", "currentWeek():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): TWTAP__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new TWTAP__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<TWTAP__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TWTAP__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  exitPosition(_tokenId: BigInt, _to: Address): BigInt {
    let result = super.call(
      "exitPosition",
      "exitPosition(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_to),
      ],
    );

    return result[0].toBigInt();
  }

  try_exitPosition(
    _tokenId: BigInt,
    _to: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exitPosition",
      "exitPosition(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_to),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getParticipation(
    _tokenId: BigInt,
  ): TWTAP__getParticipationResultParticipantStruct {
    let result = super.call(
      "getParticipation",
      "getParticipation(uint256):((uint256,bool,bool,bool,uint56,uint88,uint24,uint40,uint40))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return changetype<TWTAP__getParticipationResultParticipantStruct>(
      result[0].toTuple(),
    );
  }

  try_getParticipation(
    _tokenId: BigInt,
  ): ethereum.CallResult<TWTAP__getParticipationResultParticipantStruct> {
    let result = super.tryCall(
      "getParticipation",
      "getParticipation(uint256):((uint256,bool,bool,bool,uint56,uint88,uint24,uint40,uint40))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TWTAP__getParticipationResultParticipantStruct>(
        value[0].toTuple(),
      ),
    );
  }

  getRewardTokens(): Array<Address> {
    let result = super.call(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getRewardTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTypedDataHash(
    _permitData: TWTAP__getTypedDataHashInput_permitDataStruct,
  ): Bytes {
    let result = super.call(
      "getTypedDataHash",
      "getTypedDataHash((address,uint256,uint256,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(_permitData)],
    );

    return result[0].toBytes();
  }

  try_getTypedDataHash(
    _permitData: TWTAP__getTypedDataHashInput_permitDataStruct,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTypedDataHash",
      "getTypedDataHash((address,uint256,uint256,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(_permitData)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastProcessedWeek(): BigInt {
    let result = super.call(
      "lastProcessedWeek",
      "lastProcessedWeek():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastProcessedWeek(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastProcessedWeek",
      "lastProcessedWeek():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRewardTokens(): BigInt {
    let result = super.call(
      "maxRewardTokens",
      "maxRewardTokens():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxRewardTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxRewardTokens",
      "maxRewardTokens():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintedTWTap(): BigInt {
    let result = super.call("mintedTWTap", "mintedTWTap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintedTWTap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintedTWTap", "mintedTWTap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftLoader(): Address {
    let result = super.call("nftLoader", "nftLoader():(address)", []);

    return result[0].toAddress();
  }

  try_nftLoader(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftLoader", "nftLoader():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participants(param0: BigInt): TWTAP__participantsResult {
    let result = super.call(
      "participants",
      "participants(uint256):(uint256,bool,bool,bool,uint56,uint88,uint24,uint40,uint40)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new TWTAP__participantsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toBigInt(),
      result[8].toBigInt(),
    );
  }

  try_participants(
    param0: BigInt,
  ): ethereum.CallResult<TWTAP__participantsResult> {
    let result = super.tryCall(
      "participants",
      "participants(uint256):(uint256,bool,bool,bool,uint56,uint88,uint24,uint40,uint40)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TWTAP__participantsResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toBigInt(),
        value[8].toBigInt(),
      ),
    );
  }

  participate(
    _participant: Address,
    _amount: BigInt,
    _duration: BigInt,
  ): BigInt {
    let result = super.call(
      "participate",
      "participate(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_duration),
      ],
    );

    return result[0].toBigInt();
  }

  try_participate(
    _participant: Address,
    _amount: BigInt,
    _duration: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "participate",
      "participate(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_participant),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_duration),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pearlmit(): Address {
    let result = super.call("pearlmit", "pearlmit():(address)", []);

    return result[0].toAddress();
  }

  try_pearlmit(): ethereum.CallResult<Address> {
    let result = super.tryCall("pearlmit", "pearlmit():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokenIndex(param0: Address): BigInt {
    let result = super.call(
      "rewardTokenIndex",
      "rewardTokenIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_rewardTokenIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokenIndex",
      "rewardTokenIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTokens(param0: BigInt): Address {
    let result = super.call("rewardTokens", "rewardTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_rewardTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardTokens",
      "rewardTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tapOFT(): Address {
    let result = super.call("tapOFT", "tapOFT():(address)", []);

    return result[0].toAddress();
  }

  try_tapOFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("tapOFT", "tapOFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  twAML(): TWTAP__twAMLResult {
    let result = super.call(
      "twAML",
      "twAML():(uint256,uint256,uint256,uint256)",
      [],
    );

    return new TWTAP__twAMLResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_twAML(): ethereum.CallResult<TWTAP__twAMLResult> {
    let result = super.tryCall(
      "twAML",
      "twAML():(uint256,uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TWTAP__twAMLResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  weekTotals(param0: BigInt): BigInt {
    let result = super.call("weekTotals", "weekTotals(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_weekTotals(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weekTotals", "weekTotals(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tapOFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pearlmit(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRewardTokenCall extends ethereum.Call {
  get inputs(): AddRewardTokenCall__Inputs {
    return new AddRewardTokenCall__Inputs(this);
  }

  get outputs(): AddRewardTokenCall__Outputs {
    return new AddRewardTokenCall__Outputs(this);
  }
}

export class AddRewardTokenCall__Inputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRewardTokenCall__Outputs {
  _call: AddRewardTokenCall;

  constructor(call: AddRewardTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AdvanceWeekCall extends ethereum.Call {
  get inputs(): AdvanceWeekCall__Inputs {
    return new AdvanceWeekCall__Inputs(this);
  }

  get outputs(): AdvanceWeekCall__Outputs {
    return new AdvanceWeekCall__Outputs(this);
  }
}

export class AdvanceWeekCall__Inputs {
  _call: AdvanceWeekCall;

  constructor(call: AdvanceWeekCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AdvanceWeekCall__Outputs {
  _call: AdvanceWeekCall;

  constructor(call: AdvanceWeekCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get amounts_(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class DistributeRewardCall extends ethereum.Call {
  get inputs(): DistributeRewardCall__Inputs {
    return new DistributeRewardCall__Inputs(this);
  }

  get outputs(): DistributeRewardCall__Outputs {
    return new DistributeRewardCall__Outputs(this);
  }
}

export class DistributeRewardCall__Inputs {
  _call: DistributeRewardCall;

  constructor(call: DistributeRewardCall) {
    this._call = call;
  }

  get _rewardTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DistributeRewardCall__Outputs {
  _call: DistributeRewardCall;

  constructor(call: DistributeRewardCall) {
    this._call = call;
  }
}

export class ExitPositionCall extends ethereum.Call {
  get inputs(): ExitPositionCall__Inputs {
    return new ExitPositionCall__Inputs(this);
  }

  get outputs(): ExitPositionCall__Outputs {
    return new ExitPositionCall__Outputs(this);
  }
}

export class ExitPositionCall__Inputs {
  _call: ExitPositionCall;

  constructor(call: ExitPositionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ExitPositionCall__Outputs {
  _call: ExitPositionCall;

  constructor(call: ExitPositionCall) {
    this._call = call;
  }

  get tapAmount_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ParticipateCall extends ethereum.Call {
  get inputs(): ParticipateCall__Inputs {
    return new ParticipateCall__Inputs(this);
  }

  get outputs(): ParticipateCall__Outputs {
    return new ParticipateCall__Outputs(this);
  }
}

export class ParticipateCall__Inputs {
  _call: ParticipateCall;

  constructor(call: ParticipateCall) {
    this._call = call;
  }

  get _participant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ParticipateCall__Outputs {
  _call: ParticipateCall;

  constructor(call: ParticipateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMaxRewardTokensLengthCall extends ethereum.Call {
  get inputs(): SetMaxRewardTokensLengthCall__Inputs {
    return new SetMaxRewardTokensLengthCall__Inputs(this);
  }

  get outputs(): SetMaxRewardTokensLengthCall__Outputs {
    return new SetMaxRewardTokensLengthCall__Outputs(this);
  }
}

export class SetMaxRewardTokensLengthCall__Inputs {
  _call: SetMaxRewardTokensLengthCall;

  constructor(call: SetMaxRewardTokensLengthCall) {
    this._call = call;
  }

  get _length(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxRewardTokensLengthCall__Outputs {
  _call: SetMaxRewardTokensLengthCall;

  constructor(call: SetMaxRewardTokensLengthCall) {
    this._call = call;
  }
}

export class SetMinWeightFactorCall extends ethereum.Call {
  get inputs(): SetMinWeightFactorCall__Inputs {
    return new SetMinWeightFactorCall__Inputs(this);
  }

  get outputs(): SetMinWeightFactorCall__Outputs {
    return new SetMinWeightFactorCall__Outputs(this);
  }
}

export class SetMinWeightFactorCall__Inputs {
  _call: SetMinWeightFactorCall;

  constructor(call: SetMinWeightFactorCall) {
    this._call = call;
  }

  get _minWeightFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinWeightFactorCall__Outputs {
  _call: SetMinWeightFactorCall;

  constructor(call: SetMinWeightFactorCall) {
    this._call = call;
  }
}

export class SetNftLoaderCall extends ethereum.Call {
  get inputs(): SetNftLoaderCall__Inputs {
    return new SetNftLoaderCall__Inputs(this);
  }

  get outputs(): SetNftLoaderCall__Outputs {
    return new SetNftLoaderCall__Outputs(this);
  }
}

export class SetNftLoaderCall__Inputs {
  _call: SetNftLoaderCall;

  constructor(call: SetNftLoaderCall) {
    this._call = call;
  }

  get _nftLoader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftLoaderCall__Outputs {
  _call: SetNftLoaderCall;

  constructor(call: SetNftLoaderCall) {
    this._call = call;
  }
}

export class SetPauseCall extends ethereum.Call {
  get inputs(): SetPauseCall__Inputs {
    return new SetPauseCall__Inputs(this);
  }

  get outputs(): SetPauseCall__Outputs {
    return new SetPauseCall__Outputs(this);
  }
}

export class SetPauseCall__Inputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }

  get _pauseState(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPauseCall__Outputs {
  _call: SetPauseCall;

  constructor(call: SetPauseCall) {
    this._call = call;
  }
}

export class SetPearlmitCall extends ethereum.Call {
  get inputs(): SetPearlmitCall__Inputs {
    return new SetPearlmitCall__Inputs(this);
  }

  get outputs(): SetPearlmitCall__Outputs {
    return new SetPearlmitCall__Outputs(this);
  }
}

export class SetPearlmitCall__Inputs {
  _call: SetPearlmitCall;

  constructor(call: SetPearlmitCall) {
    this._call = call;
  }

  get _pearlmit(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPearlmitCall__Outputs {
  _call: SetPearlmitCall;

  constructor(call: SetPearlmitCall) {
    this._call = call;
  }
}

export class SetVirtualTotalAmountCall extends ethereum.Call {
  get inputs(): SetVirtualTotalAmountCall__Inputs {
    return new SetVirtualTotalAmountCall__Inputs(this);
  }

  get outputs(): SetVirtualTotalAmountCall__Outputs {
    return new SetVirtualTotalAmountCall__Outputs(this);
  }
}

export class SetVirtualTotalAmountCall__Inputs {
  _call: SetVirtualTotalAmountCall;

  constructor(call: SetVirtualTotalAmountCall) {
    this._call = call;
  }

  get _virtualTotalAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVirtualTotalAmountCall__Outputs {
  _call: SetVirtualTotalAmountCall;

  constructor(call: SetVirtualTotalAmountCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
