// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ApprovalForAsset extends ethereum.Event {
  get params(): ApprovalForAsset__Params {
    return new ApprovalForAsset__Params(this);
  }
}

export class ApprovalForAsset__Params {
  _event: ApprovalForAsset;

  constructor(event: ApprovalForAsset) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get approved(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class AssetRegistered extends ethereum.Event {
  get params(): AssetRegistered__Params {
    return new AssetRegistered__Params(this);
  }
}

export class AssetRegistered__Params {
  _event: AssetRegistered;

  constructor(event: AssetRegistered) {
    this._event = event;
  }

  get tokenType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountIn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get shareIn(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get isNFT(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get previousOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get decimals(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get _value(): string {
    return this._event.parameters[0].value.toString();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountIn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get shareIn(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class YieldBox__assetTotalsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotalShare(): BigInt {
    return this.value0;
  }

  getTotalAmount(): BigInt {
    return this.value1;
  }
}

export class YieldBox__assetsResult {
  value0: i32;
  value1: Address;
  value2: Address;
  value3: BigInt;

  constructor(value0: i32, value1: Address, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTokenType(): i32 {
    return this.value0;
  }

  getContractAddress(): Address {
    return this.value1;
  }

  getStrategy(): Address {
    return this.value2;
  }

  getTokenId(): BigInt {
    return this.value3;
  }
}

export class YieldBox__depositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountOut(): BigInt {
    return this.value0;
  }

  getShareOut(): BigInt {
    return this.value1;
  }
}

export class YieldBox__depositAssetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountOut(): BigInt {
    return this.value0;
  }

  getShareOut(): BigInt {
    return this.value1;
  }
}

export class YieldBox__depositNFTAssetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountOut(): BigInt {
    return this.value0;
  }

  getShareOut(): BigInt {
    return this.value1;
  }
}

export class YieldBox__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class YieldBox__nativeTokensResult {
  value0: string;
  value1: string;
  value2: i32;
  value3: string;

  constructor(value0: string, value1: string, value2: i32, value3: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getSymbol(): string {
    return this.value1;
  }

  getDecimals(): i32 {
    return this.value2;
  }

  getUri(): string {
    return this.value3;
  }
}

export class YieldBox__withdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountOut(): BigInt {
    return this.value0;
  }

  getShareOut(): BigInt {
    return this.value1;
  }
}

export class YieldBox extends ethereum.SmartContract {
  static bind(address: Address): YieldBox {
    return new YieldBox("YieldBox", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  amountOf(user: Address, assetId: BigInt): BigInt {
    let result = super.call("amountOf", "amountOf(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toBigInt();
  }

  try_amountOf(user: Address, assetId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountOf",
      "amountOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(assetId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetCount(): BigInt {
    let result = super.call("assetCount", "assetCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_assetCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetCount", "assetCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetTotals(assetId: BigInt): YieldBox__assetTotalsResult {
    let result = super.call(
      "assetTotals",
      "assetTotals(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );

    return new YieldBox__assetTotalsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_assetTotals(
    assetId: BigInt
  ): ethereum.CallResult<YieldBox__assetTotalsResult> {
    let result = super.tryCall(
      "assetTotals",
      "assetTotals(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__assetTotalsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  assets(param0: BigInt): YieldBox__assetsResult {
    let result = super.call(
      "assets",
      "assets(uint256):(uint8,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new YieldBox__assetsResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_assets(param0: BigInt): ethereum.CallResult<YieldBox__assetsResult> {
    let result = super.tryCall(
      "assets",
      "assets(uint256):(uint8,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__assetsResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  balanceOf(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(owners: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  createToken(
    name: string,
    symbol: string,
    decimals: i32,
    uri: string
  ): BigInt {
    let result = super.call(
      "createToken",
      "createToken(string,string,uint8,string):(uint32)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals)),
        ethereum.Value.fromString(uri)
      ]
    );

    return result[0].toBigInt();
  }

  try_createToken(
    name: string,
    symbol: string,
    decimals: i32,
    uri: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createToken",
      "createToken(string,string,uint8,string):(uint32)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals)),
        ethereum.Value.fromString(uri)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(assetId: BigInt): i32 {
    let result = super.call("decimals", "decimals(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toI32();
  }

  try_decimals(assetId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deposit(
    tokenType: i32,
    contractAddress: Address,
    strategy: Address,
    tokenId: BigInt,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): YieldBox__depositResult {
    let result = super.call(
      "deposit",
      "deposit(uint8,address,address,uint256,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType)),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return new YieldBox__depositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_deposit(
    tokenType: i32,
    contractAddress: Address,
    strategy: Address,
    tokenId: BigInt,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): ethereum.CallResult<YieldBox__depositResult> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint8,address,address,uint256,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType)),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__depositResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  depositAsset(
    assetId: BigInt,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): YieldBox__depositAssetResult {
    let result = super.call(
      "depositAsset",
      "depositAsset(uint256,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return new YieldBox__depositAssetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_depositAsset(
    assetId: BigInt,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): ethereum.CallResult<YieldBox__depositAssetResult> {
    let result = super.tryCall(
      "depositAsset",
      "depositAsset(uint256,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__depositAssetResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  depositNFTAsset(
    assetId: BigInt,
    from: Address,
    to: Address
  ): YieldBox__depositNFTAssetResult {
    let result = super.call(
      "depositNFTAsset",
      "depositNFTAsset(uint256,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to)
      ]
    );

    return new YieldBox__depositNFTAssetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_depositNFTAsset(
    assetId: BigInt,
    from: Address,
    to: Address
  ): ethereum.CallResult<YieldBox__depositNFTAssetResult> {
    let result = super.tryCall(
      "depositNFTAsset",
      "depositNFTAsset(uint256,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__depositNFTAssetResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  eip712Domain(): YieldBox__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new YieldBox__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<YieldBox__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  ids(param0: i32, param1: Address, param2: Address, param3: BigInt): BigInt {
    let result = super.call(
      "ids",
      "ids(uint8,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigInt(param3)
      ]
    );

    return result[0].toBigInt();
  }

  try_ids(
    param0: i32,
    param1: Address,
    param2: Address,
    param3: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ids",
      "ids(uint8,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromUnsignedBigInt(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAsset(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): boolean {
    let result = super.call(
      "isApprovedForAsset",
      "isApprovedForAsset(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAsset(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAsset",
      "isApprovedForAsset(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(assetId: BigInt): string {
    let result = super.call("name", "name(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toString();
  }

  try_name(assetId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nativeTokens(param0: BigInt): YieldBox__nativeTokensResult {
    let result = super.call(
      "nativeTokens",
      "nativeTokens(uint256):(string,string,uint8,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new YieldBox__nativeTokensResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toI32(),
      result[3].toString()
    );
  }

  try_nativeTokens(
    param0: BigInt
  ): ethereum.CallResult<YieldBox__nativeTokensResult> {
    let result = super.tryCall(
      "nativeTokens",
      "nativeTokens(uint256):(string,string,uint8,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__nativeTokensResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toI32(),
        value[3].toString()
      )
    );
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(param0: BigInt): Address {
    let result = super.call("owner", "owner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_owner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(param0: BigInt): Address {
    let result = super.call("pendingOwner", "pendingOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_pendingOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingOwner",
      "pendingOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerAsset(
    tokenType: i32,
    contractAddress: Address,
    strategy: Address,
    tokenId: BigInt
  ): BigInt {
    let result = super.call(
      "registerAsset",
      "registerAsset(uint8,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType)),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerAsset(
    tokenType: i32,
    contractAddress: Address,
    strategy: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerAsset",
      "registerAsset(uint8,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType)),
        ethereum.Value.fromAddress(contractAddress),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(assetId: BigInt): string {
    let result = super.call("symbol", "symbol(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toString();
  }

  try_symbol(assetId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  toAmount(assetId: BigInt, share: BigInt, roundUp: boolean): BigInt {
    let result = super.call(
      "toAmount",
      "toAmount(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toAmount(
    assetId: BigInt,
    share: BigInt,
    roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toAmount",
      "toAmount(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromUnsignedBigInt(share),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toShare(assetId: BigInt, amount: BigInt, roundUp: boolean): BigInt {
    let result = super.call(
      "toShare",
      "toShare(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toShare(
    assetId: BigInt,
    amount: BigInt,
    roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toShare",
      "toShare(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(param0: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(assetId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toString();
  }

  try_uri(assetId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uriBuilder(): Address {
    let result = super.call("uriBuilder", "uriBuilder():(address)", []);

    return result[0].toAddress();
  }

  try_uriBuilder(): ethereum.CallResult<Address> {
    let result = super.tryCall("uriBuilder", "uriBuilder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdraw(
    assetId: BigInt,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): YieldBox__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );

    return new YieldBox__withdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdraw(
    assetId: BigInt,
    from: Address,
    to: Address,
    amount: BigInt,
    share: BigInt
  ): ethereum.CallResult<YieldBox__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assetId),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(share)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new YieldBox__withdrawResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  wrappedNative(): Address {
    let result = super.call("wrappedNative", "wrappedNative():(address)", []);

    return result[0].toAddress();
  }

  try_wrappedNative(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wrappedNative",
      "wrappedNative():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get wrappedNative_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uriBuilder_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchCall extends ethereum.Call {
  get inputs(): BatchCall__Inputs {
    return new BatchCall__Inputs(this);
  }

  get outputs(): BatchCall__Outputs {
    return new BatchCall__Outputs(this);
  }
}

export class BatchCall__Inputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }

  get calls(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get revertOnFail(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class BatchCall__Outputs {
  _call: BatchCall;

  constructor(call: BatchCall) {
    this._call = call;
  }
}

export class BatchBurnCall extends ethereum.Call {
  get inputs(): BatchBurnCall__Inputs {
    return new BatchBurnCall__Inputs(this);
  }

  get outputs(): BatchBurnCall__Outputs {
    return new BatchBurnCall__Outputs(this);
  }
}

export class BatchBurnCall__Inputs {
  _call: BatchBurnCall;

  constructor(call: BatchBurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get froms(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BatchBurnCall__Outputs {
  _call: BatchBurnCall;

  constructor(call: BatchBurnCall) {
    this._call = call;
  }
}

export class BatchMintCall extends ethereum.Call {
  get inputs(): BatchMintCall__Inputs {
    return new BatchMintCall__Inputs(this);
  }

  get outputs(): BatchMintCall__Outputs {
    return new BatchMintCall__Outputs(this);
  }
}

export class BatchMintCall__Inputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tos(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BatchMintCall__Outputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }
}

export class BatchTransferCall extends ethereum.Call {
  get inputs(): BatchTransferCall__Inputs {
    return new BatchTransferCall__Inputs(this);
  }

  get outputs(): BatchTransferCall__Outputs {
    return new BatchTransferCall__Outputs(this);
  }
}

export class BatchTransferCall__Inputs {
  _call: BatchTransferCall;

  constructor(call: BatchTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetIds_(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get shares_(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class BatchTransferCall__Outputs {
  _call: BatchTransferCall;

  constructor(call: BatchTransferCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tokenType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get strategy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositAssetCall extends ethereum.Call {
  get inputs(): DepositAssetCall__Inputs {
    return new DepositAssetCall__Inputs(this);
  }

  get outputs(): DepositAssetCall__Outputs {
    return new DepositAssetCall__Outputs(this);
  }
}

export class DepositAssetCall__Inputs {
  _call: DepositAssetCall;

  constructor(call: DepositAssetCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DepositAssetCall__Outputs {
  _call: DepositAssetCall;

  constructor(call: DepositAssetCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositETHAssetCall extends ethereum.Call {
  get inputs(): DepositETHAssetCall__Inputs {
    return new DepositETHAssetCall__Inputs(this);
  }

  get outputs(): DepositETHAssetCall__Outputs {
    return new DepositETHAssetCall__Outputs(this);
  }
}

export class DepositETHAssetCall__Inputs {
  _call: DepositETHAssetCall;

  constructor(call: DepositETHAssetCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositETHAssetCall__Outputs {
  _call: DepositETHAssetCall;

  constructor(call: DepositETHAssetCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositNFTAssetCall extends ethereum.Call {
  get inputs(): DepositNFTAssetCall__Inputs {
    return new DepositNFTAssetCall__Inputs(this);
  }

  get outputs(): DepositNFTAssetCall__Outputs {
    return new DepositNFTAssetCall__Outputs(this);
  }
}

export class DepositNFTAssetCall__Inputs {
  _call: DepositNFTAssetCall;

  constructor(call: DepositNFTAssetCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositNFTAssetCall__Outputs {
  _call: DepositNFTAssetCall;

  constructor(call: DepositNFTAssetCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class PermitAllCall extends ethereum.Call {
  get inputs(): PermitAllCall__Inputs {
    return new PermitAllCall__Inputs(this);
  }

  get outputs(): PermitAllCall__Outputs {
    return new PermitAllCall__Outputs(this);
  }
}

export class PermitAllCall__Inputs {
  _call: PermitAllCall;

  constructor(call: PermitAllCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PermitAllCall__Outputs {
  _call: PermitAllCall;

  constructor(call: PermitAllCall) {
    this._call = call;
  }
}

export class PermitTokenCall extends ethereum.Call {
  get inputs(): PermitTokenCall__Inputs {
    return new PermitTokenCall__Inputs(this);
  }

  get outputs(): PermitTokenCall__Outputs {
    return new PermitTokenCall__Outputs(this);
  }
}

export class PermitTokenCall__Inputs {
  _call: PermitTokenCall;

  constructor(call: PermitTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class PermitTokenCall__Outputs {
  _call: PermitTokenCall;

  constructor(call: PermitTokenCall) {
    this._call = call;
  }
}

export class RegisterAssetCall extends ethereum.Call {
  get inputs(): RegisterAssetCall__Inputs {
    return new RegisterAssetCall__Inputs(this);
  }

  get outputs(): RegisterAssetCall__Outputs {
    return new RegisterAssetCall__Outputs(this);
  }
}

export class RegisterAssetCall__Inputs {
  _call: RegisterAssetCall;

  constructor(call: RegisterAssetCall) {
    this._call = call;
  }

  get tokenType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get strategy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RegisterAssetCall__Outputs {
  _call: RegisterAssetCall;

  constructor(call: RegisterAssetCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class RevokeAllCall extends ethereum.Call {
  get inputs(): RevokeAllCall__Inputs {
    return new RevokeAllCall__Inputs(this);
  }

  get outputs(): RevokeAllCall__Outputs {
    return new RevokeAllCall__Outputs(this);
  }
}

export class RevokeAllCall__Inputs {
  _call: RevokeAllCall;

  constructor(call: RevokeAllCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class RevokeAllCall__Outputs {
  _call: RevokeAllCall;

  constructor(call: RevokeAllCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetApprovalForAssetCall extends ethereum.Call {
  get inputs(): SetApprovalForAssetCall__Inputs {
    return new SetApprovalForAssetCall__Inputs(this);
  }

  get outputs(): SetApprovalForAssetCall__Outputs {
    return new SetApprovalForAssetCall__Outputs(this);
  }
}

export class SetApprovalForAssetCall__Inputs {
  _call: SetApprovalForAssetCall;

  constructor(call: SetApprovalForAssetCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetApprovalForAssetCall__Outputs {
  _call: SetApprovalForAssetCall;

  constructor(call: SetApprovalForAssetCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferMultipleCall extends ethereum.Call {
  get inputs(): TransferMultipleCall__Inputs {
    return new TransferMultipleCall__Inputs(this);
  }

  get outputs(): TransferMultipleCall__Outputs {
    return new TransferMultipleCall__Outputs(this);
  }
}

export class TransferMultipleCall__Inputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tos(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class TransferMultipleCall__Outputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get share(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get shareOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
