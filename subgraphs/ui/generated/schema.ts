// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class BigBangMarket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BigBangMarket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BigBangMarket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BigBangMarket", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BigBangMarket | null {
    return changetype<BigBangMarket | null>(
      store.get_in_block("BigBangMarket", id.toHexString()),
    );
  }

  static load(id: Bytes): BigBangMarket | null {
    return changetype<BigBangMarket | null>(
      store.get("BigBangMarket", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get borrowToken(): Bytes {
    let value = this.get("borrowToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrowToken(value: Bytes) {
    this.set("borrowToken", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get oracleAddress(): string {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracleAddress(value: string) {
    this.set("oracleAddress", Value.fromString(value));
  }
}

export class SingularityMarket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SingularityMarket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SingularityMarket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SingularityMarket", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SingularityMarket | null {
    return changetype<SingularityMarket | null>(
      store.get_in_block("SingularityMarket", id.toHexString()),
    );
  }

  static load(id: Bytes): SingularityMarket | null {
    return changetype<SingularityMarket | null>(
      store.get("SingularityMarket", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get borrowToken(): Bytes {
    let value = this.get("borrowToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrowToken(value: Bytes) {
    this.set("borrowToken", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get oracleAddress(): string {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracleAddress(value: string) {
    this.set("oracleAddress", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Token | null {
    return changetype<Token | null>(
      store.get_in_block("Token", id.toHexString()),
    );
  }

  static load(id: Bytes): Token | null {
    return changetype<Token | null>(store.get("Token", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class RemoteTOFTMeta extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoteTOFTMeta entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoteTOFTMeta must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RemoteTOFTMeta", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoteTOFTMeta | null {
    return changetype<RemoteTOFTMeta | null>(
      store.get_in_block("RemoteTOFTMeta", id.toHexString()),
    );
  }

  static load(id: Bytes): RemoteTOFTMeta | null {
    return changetype<RemoteTOFTMeta | null>(
      store.get("RemoteTOFTMeta", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get lzChainId(): i32 {
    let value = this.get("lzChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lzChainId(value: i32) {
    this.set("lzChainId", Value.fromI32(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class TOFToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TOFToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TOFToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TOFToken", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TOFToken | null {
    return changetype<TOFToken | null>(
      store.get_in_block("TOFToken", id.toHexString()),
    );
  }

  static load(id: Bytes): TOFToken | null {
    return changetype<TOFToken | null>(store.get("TOFToken", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get underlyingToken(): Bytes | null {
    let value = this.get("underlyingToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set underlyingToken(value: Bytes | null) {
    if (!value) {
      this.unset("underlyingToken");
    } else {
      this.set("underlyingToken", Value.fromBytes(<Bytes>value));
    }
  }

  get remoteTOFTs(): Array<Bytes> {
    let value = this.get("remoteTOFTs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set remoteTOFTs(value: Array<Bytes>) {
    this.set("remoteTOFTs", Value.fromBytesArray(value));
  }

  get markets(): Array<Bytes> | null {
    let value = this.get("markets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set markets(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("markets");
    } else {
      this.set("markets", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get bigBangMarkets(): Array<Bytes> | null {
    let value = this.get("bigBangMarkets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set bigBangMarkets(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("bigBangMarkets");
    } else {
      this.set("bigBangMarkets", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class TapiocaOptionBrokerPaymentToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TapiocaOptionBrokerPaymentToken entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TapiocaOptionBrokerPaymentToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set(
        "TapiocaOptionBrokerPaymentToken",
        id.toBytes().toHexString(),
        this,
      );
    }
  }

  static loadInBlock(id: Bytes): TapiocaOptionBrokerPaymentToken | null {
    return changetype<TapiocaOptionBrokerPaymentToken | null>(
      store.get_in_block("TapiocaOptionBrokerPaymentToken", id.toHexString()),
    );
  }

  static load(id: Bytes): TapiocaOptionBrokerPaymentToken | null {
    return changetype<TapiocaOptionBrokerPaymentToken | null>(
      store.get("TapiocaOptionBrokerPaymentToken", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get oracleAddress(): string {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracleAddress(value: string) {
    this.set("oracleAddress", Value.fromString(value));
  }

  get oracleData(): Bytes {
    let value = this.get("oracleData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oracleData(value: Bytes) {
    this.set("oracleData", Value.fromBytes(value));
  }
}

export class TapiocaOptionBrokerEpoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TapiocaOptionBrokerEpoch entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TapiocaOptionBrokerEpoch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TapiocaOptionBrokerEpoch", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TapiocaOptionBrokerEpoch | null {
    return changetype<TapiocaOptionBrokerEpoch | null>(
      store.get_in_block("TapiocaOptionBrokerEpoch", id),
    );
  }

  static load(id: string): TapiocaOptionBrokerEpoch | null {
    return changetype<TapiocaOptionBrokerEpoch | null>(
      store.get("TapiocaOptionBrokerEpoch", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epochId(): BigInt {
    let value = this.get("epochId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epochId(value: BigInt) {
    this.set("epochId", Value.fromBigInt(value));
  }

  get epochTAPAmount(): BigInt {
    let value = this.get("epochTAPAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epochTAPAmount(value: BigInt) {
    this.set("epochTAPAmount", Value.fromBigInt(value));
  }

  get epochTAPValuation(): BigInt {
    let value = this.get("epochTAPValuation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epochTAPValuation(value: BigInt) {
    this.set("epochTAPValuation", Value.fromBigInt(value));
  }
}

export class TapiocaOptionBroker extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TapiocaOptionBroker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TapiocaOptionBroker must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TapiocaOptionBroker", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TapiocaOptionBroker | null {
    return changetype<TapiocaOptionBroker | null>(
      store.get_in_block("TapiocaOptionBroker", id.toHexString()),
    );
  }

  static load(id: Bytes): TapiocaOptionBroker | null {
    return changetype<TapiocaOptionBroker | null>(
      store.get("TapiocaOptionBroker", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get paymentTokens(): Array<Bytes> {
    let value = this.get("paymentTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set paymentTokens(value: Array<Bytes>) {
    this.set("paymentTokens", Value.fromBytesArray(value));
  }

  get epochDuration(): i32 {
    let value = this.get("epochDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochDuration(value: i32) {
    this.set("epochDuration", Value.fromI32(value));
  }

  get tap(): Bytes {
    let value = this.get("tap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tap(value: Bytes) {
    this.set("tap", Value.fromBytes(value));
  }

  get currentEpoch(): string {
    let value = this.get("currentEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currentEpoch(value: string) {
    this.set("currentEpoch", Value.fromString(value));
  }
}

export class TolpSingularityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TolpSingularityPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TolpSingularityPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TolpSingularityPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TolpSingularityPool | null {
    return changetype<TolpSingularityPool | null>(
      store.get_in_block("TolpSingularityPool", id),
    );
  }

  static load(id: string): TolpSingularityPool | null {
    return changetype<TolpSingularityPool | null>(
      store.get("TolpSingularityPool", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sglAssetId(): BigInt {
    let value = this.get("sglAssetId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sglAssetId(value: BigInt) {
    this.set("sglAssetId", Value.fromBigInt(value));
  }

  get sglAddress(): string {
    let value = this.get("sglAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sglAddress(value: string) {
    this.set("sglAddress", Value.fromString(value));
  }

  get totalDeposited(): BigInt {
    let value = this.get("totalDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDeposited(value: BigInt) {
    this.set("totalDeposited", Value.fromBigInt(value));
  }

  get poolWeight(): BigInt {
    let value = this.get("poolWeight");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set poolWeight(value: BigInt) {
    this.set("poolWeight", Value.fromBigInt(value));
  }

  get isInRescueMode(): boolean {
    let value = this.get("isInRescueMode");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isInRescueMode(value: boolean) {
    this.set("isInRescueMode", Value.fromBoolean(value));
  }

  get currentEpochTapAmount(): BigInt {
    let value = this.get("currentEpochTapAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentEpochTapAmount(value: BigInt) {
    this.set("currentEpochTapAmount", Value.fromBigInt(value));
  }
}

export class TapiocaOptionLiquidityProvision extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TapiocaOptionLiquidityProvision entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TapiocaOptionLiquidityProvision must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set(
        "TapiocaOptionLiquidityProvision",
        id.toBytes().toHexString(),
        this,
      );
    }
  }

  static loadInBlock(id: Bytes): TapiocaOptionLiquidityProvision | null {
    return changetype<TapiocaOptionLiquidityProvision | null>(
      store.get_in_block("TapiocaOptionLiquidityProvision", id.toHexString()),
    );
  }

  static load(id: Bytes): TapiocaOptionLiquidityProvision | null {
    return changetype<TapiocaOptionLiquidityProvision | null>(
      store.get("TapiocaOptionLiquidityProvision", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get singularityPools(): Array<string> {
    let value = this.get("singularityPools");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set singularityPools(value: Array<string>) {
    this.set("singularityPools", Value.fromStringArray(value));
  }

  get totalSingularityPoolWeights(): BigInt {
    let value = this.get("totalSingularityPoolWeights");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSingularityPoolWeights(value: BigInt) {
    this.set("totalSingularityPoolWeights", Value.fromBigInt(value));
  }
}

export class TOLPLockPosition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TOLPLockPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TOLPLockPosition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TOLPLockPosition", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TOLPLockPosition | null {
    return changetype<TOLPLockPosition | null>(
      store.get_in_block("TOLPLockPosition", id.toHexString()),
    );
  }

  static load(id: Bytes): TOLPLockPosition | null {
    return changetype<TOLPLockPosition | null>(
      store.get("TOLPLockPosition", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sglAddress(): string {
    let value = this.get("sglAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set sglAddress(value: string) {
    this.set("sglAddress", Value.fromString(value));
  }

  get sglAssetId(): BigInt {
    let value = this.get("sglAssetId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sglAssetId(value: BigInt) {
    this.set("sglAssetId", Value.fromBigInt(value));
  }

  get ybShares(): BigInt {
    let value = this.get("ybShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ybShares(value: BigInt) {
    this.set("ybShares", Value.fromBigInt(value));
  }

  get lockTime(): i32 {
    let value = this.get("lockTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lockTime(value: i32) {
    this.set("lockTime", Value.fromI32(value));
  }

  get lockDuration(): i32 {
    let value = this.get("lockDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lockDuration(value: i32) {
    this.set("lockDuration", Value.fromI32(value));
  }

  get lockedAtEpoch(): string {
    let value = this.get("lockedAtEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lockedAtEpoch(value: string) {
    this.set("lockedAtEpoch", Value.fromString(value));
  }

  get tolp(): Bytes {
    let value = this.get("tolp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tolp(value: Bytes) {
    this.set("tolp", Value.fromBytes(value));
  }

  get tolpSingularityPool(): string {
    let value = this.get("tolpSingularityPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tolpSingularityPool(value: string) {
    this.set("tolpSingularityPool", Value.fromString(value));
  }
}

export class TOLP extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TOLP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TOLP must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TOLP", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TOLP | null {
    return changetype<TOLP | null>(
      store.get_in_block("TOLP", id.toHexString()),
    );
  }

  static load(id: Bytes): TOLP | null {
    return changetype<TOLP | null>(store.get("TOLP", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get lockPosition(): Bytes | null {
    let value = this.get("lockPosition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lockPosition(value: Bytes | null) {
    if (!value) {
      this.unset("lockPosition");
    } else {
      this.set("lockPosition", Value.fromBytes(<Bytes>value));
    }
  }
}

export class OTAPParticipatePosition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save OTAPParticipatePosition entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OTAPParticipatePosition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OTAPParticipatePosition", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OTAPParticipatePosition | null {
    return changetype<OTAPParticipatePosition | null>(
      store.get_in_block("OTAPParticipatePosition", id.toHexString()),
    );
  }

  static load(id: Bytes): OTAPParticipatePosition | null {
    return changetype<OTAPParticipatePosition | null>(
      store.get("OTAPParticipatePosition", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get participatedAtEpoch(): string {
    let value = this.get("participatedAtEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set participatedAtEpoch(value: string) {
    this.set("participatedAtEpoch", Value.fromString(value));
  }

  get discount(): i32 {
    let value = this.get("discount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set discount(value: i32) {
    this.set("discount", Value.fromI32(value));
  }

  get lastExercisedEpoch(): string | null {
    let value = this.get("lastExercisedEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastExercisedEpoch(value: string | null) {
    if (!value) {
      this.unset("lastExercisedEpoch");
    } else {
      this.set("lastExercisedEpoch", Value.fromString(<string>value));
    }
  }

  get exercisedTap(): BigInt | null {
    let value = this.get("exercisedTap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exercisedTap(value: BigInt | null) {
    if (!value) {
      this.unset("exercisedTap");
    } else {
      this.set("exercisedTap", Value.fromBigInt(<BigInt>value));
    }
  }

  get tolp(): Bytes {
    let value = this.get("tolp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tolp(value: Bytes) {
    this.set("tolp", Value.fromBytes(value));
  }

  get otap(): Bytes {
    let value = this.get("otap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set otap(value: Bytes) {
    this.set("otap", Value.fromBytes(value));
  }
}

export class OTAP extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OTAP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OTAP must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OTAP", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OTAP | null {
    return changetype<OTAP | null>(
      store.get_in_block("OTAP", id.toHexString()),
    );
  }

  static load(id: Bytes): OTAP | null {
    return changetype<OTAP | null>(store.get("OTAP", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get participatePosition(): Bytes | null {
    let value = this.get("participatePosition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set participatePosition(value: Bytes | null) {
    if (!value) {
      this.unset("participatePosition");
    } else {
      this.set("participatePosition", Value.fromBytes(<Bytes>value));
    }
  }
}

export class TwTapRewardToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TwTapRewardToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TwTapRewardToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TwTapRewardToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TwTapRewardToken | null {
    return changetype<TwTapRewardToken | null>(
      store.get_in_block("TwTapRewardToken", id),
    );
  }

  static load(id: string): TwTapRewardToken | null {
    return changetype<TwTapRewardToken | null>(
      store.get("TwTapRewardToken", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }
}

export class TwTapEpochRewardAmount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TwTapEpochRewardAmount entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TwTapEpochRewardAmount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TwTapEpochRewardAmount", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TwTapEpochRewardAmount | null {
    return changetype<TwTapEpochRewardAmount | null>(
      store.get_in_block("TwTapEpochRewardAmount", id),
    );
  }

  static load(id: string): TwTapEpochRewardAmount | null {
    return changetype<TwTapEpochRewardAmount | null>(
      store.get("TwTapEpochRewardAmount", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get epoch(): string {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set epoch(value: string) {
    this.set("epoch", Value.fromString(value));
  }
}

export class TwTapEpoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TwTapEpoch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TwTapEpoch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TwTapEpoch", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TwTapEpoch | null {
    return changetype<TwTapEpoch | null>(store.get_in_block("TwTapEpoch", id));
  }

  static load(id: string): TwTapEpoch | null {
    return changetype<TwTapEpoch | null>(store.get("TwTapEpoch", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epochId(): i32 {
    let value = this.get("epochId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochId(value: i32) {
    this.set("epochId", Value.fromI32(value));
  }

  get lastDistributedRewardsTimestamp(): i32 {
    let value = this.get("lastDistributedRewardsTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastDistributedRewardsTimestamp(value: i32) {
    this.set("lastDistributedRewardsTimestamp", Value.fromI32(value));
  }

  get distributedRewardAmounts(): TwTapEpochRewardAmountLoader {
    return new TwTapEpochRewardAmountLoader(
      "TwTapEpoch",
      this.get("id")!.toString(),
      "distributedRewardAmounts",
    );
  }
}

export class TimeWeightedTapioca extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TimeWeightedTapioca entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TimeWeightedTapioca must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TimeWeightedTapioca", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TimeWeightedTapioca | null {
    return changetype<TimeWeightedTapioca | null>(
      store.get_in_block("TimeWeightedTapioca", id),
    );
  }

  static load(id: string): TimeWeightedTapioca | null {
    return changetype<TimeWeightedTapioca | null>(
      store.get("TimeWeightedTapioca", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEpoch(): string {
    let value = this.get("currentEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currentEpoch(value: string) {
    this.set("currentEpoch", Value.fromString(value));
  }

  get epochDuration(): i32 {
    let value = this.get("epochDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochDuration(value: i32) {
    this.set("epochDuration", Value.fromI32(value));
  }

  get maxLockDuration(): i64 {
    let value = this.get("maxLockDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set maxLockDuration(value: i64) {
    this.set("maxLockDuration", Value.fromI64(value));
  }

  get epochesStartTime(): i32 {
    let value = this.get("epochesStartTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochesStartTime(value: i32) {
    this.set("epochesStartTime", Value.fromI32(value));
  }

  get virtualTotalAmount(): BigInt {
    let value = this.get("virtualTotalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set virtualTotalAmount(value: BigInt) {
    this.set("virtualTotalAmount", Value.fromBigInt(value));
  }

  get minWeightFactor(): BigInt {
    let value = this.get("minWeightFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minWeightFactor(value: BigInt) {
    this.set("minWeightFactor", Value.fromBigInt(value));
  }

  get isPaused(): boolean {
    let value = this.get("isPaused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPaused(value: boolean) {
    this.set("isPaused", Value.fromBoolean(value));
  }

  get rewardTokens(): Array<string> {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string>) {
    this.set("rewardTokens", Value.fromStringArray(value));
  }
}

export class TWTAPLockPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TWTAPLockPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TWTAPLockPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TWTAPLockPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TWTAPLockPosition | null {
    return changetype<TWTAPLockPosition | null>(
      store.get_in_block("TWTAPLockPosition", id),
    );
  }

  static load(id: string): TWTAPLockPosition | null {
    return changetype<TWTAPLockPosition | null>(
      store.get("TWTAPLockPosition", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tapAmount(): BigInt {
    let value = this.get("tapAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tapAmount(value: BigInt) {
    this.set("tapAmount", Value.fromBigInt(value));
  }

  get multiplier(): BigInt {
    let value = this.get("multiplier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set multiplier(value: BigInt) {
    this.set("multiplier", Value.fromBigInt(value));
  }

  get votingPowerAmount(): BigInt {
    let value = this.get("votingPowerAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set votingPowerAmount(value: BigInt) {
    this.set("votingPowerAmount", Value.fromBigInt(value));
  }

  get lockTime(): i32 {
    let value = this.get("lockTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lockTime(value: i32) {
    this.set("lockTime", Value.fromI32(value));
  }

  get lockDuration(): i64 {
    let value = this.get("lockDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set lockDuration(value: i64) {
    this.set("lockDuration", Value.fromI64(value));
  }

  get lockedAtEpoch(): string {
    let value = this.get("lockedAtEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lockedAtEpoch(value: string) {
    this.set("lockedAtEpoch", Value.fromString(value));
  }

  get lastActiveEpoch(): string {
    let value = this.get("lastActiveEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lastActiveEpoch(value: string) {
    this.set("lastActiveEpoch", Value.fromString(value));
  }

  get isExited(): boolean {
    let value = this.get("isExited");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isExited(value: boolean) {
    this.set("isExited", Value.fromBoolean(value));
  }

  get lastClaimedTimestamp(): i32 {
    let value = this.get("lastClaimedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastClaimedTimestamp(value: i32) {
    this.set("lastClaimedTimestamp", Value.fromI32(value));
  }

  get twTap(): string {
    let value = this.get("twTap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set twTap(value: string) {
    this.set("twTap", Value.fromString(value));
  }
}

export class TWTAP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TWTAP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TWTAP must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TWTAP", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TWTAP | null {
    return changetype<TWTAP | null>(store.get_in_block("TWTAP", id));
  }

  static load(id: string): TWTAP | null {
    return changetype<TWTAP | null>(store.get("TWTAP", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get lockPosition(): string | null {
    let value = this.get("lockPosition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lockPosition(value: string | null) {
    if (!value) {
      this.unset("lockPosition");
    } else {
      this.set("lockPosition", Value.fromString(<string>value));
    }
  }
}

export class TwTapEpochRewardAmountLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TwTapEpochRewardAmount[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TwTapEpochRewardAmount[]>(value);
  }
}
