// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BigBangMarket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BigBangMarket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BigBangMarket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BigBangMarket", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BigBangMarket | null {
    return changetype<BigBangMarket | null>(
      store.get_in_block("BigBangMarket", id.toHexString())
    );
  }

  static load(id: Bytes): BigBangMarket | null {
    return changetype<BigBangMarket | null>(
      store.get("BigBangMarket", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get borrowToken(): Bytes {
    let value = this.get("borrowToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrowToken(value: Bytes) {
    this.set("borrowToken", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get oracleAddress(): string {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracleAddress(value: string) {
    this.set("oracleAddress", Value.fromString(value));
  }
}

export class SingularityMarket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SingularityMarket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SingularityMarket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SingularityMarket", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SingularityMarket | null {
    return changetype<SingularityMarket | null>(
      store.get_in_block("SingularityMarket", id.toHexString())
    );
  }

  static load(id: Bytes): SingularityMarket | null {
    return changetype<SingularityMarket | null>(
      store.get("SingularityMarket", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get borrowToken(): Bytes {
    let value = this.get("borrowToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrowToken(value: Bytes) {
    this.set("borrowToken", Value.fromBytes(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get oracleAddress(): string {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracleAddress(value: string) {
    this.set("oracleAddress", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Token | null {
    return changetype<Token | null>(
      store.get_in_block("Token", id.toHexString())
    );
  }

  static load(id: Bytes): Token | null {
    return changetype<Token | null>(store.get("Token", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class RemoteTOFTMeta extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoteTOFTMeta entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoteTOFTMeta must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoteTOFTMeta", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoteTOFTMeta | null {
    return changetype<RemoteTOFTMeta | null>(
      store.get_in_block("RemoteTOFTMeta", id.toHexString())
    );
  }

  static load(id: Bytes): RemoteTOFTMeta | null {
    return changetype<RemoteTOFTMeta | null>(
      store.get("RemoteTOFTMeta", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get lzChainId(): i32 {
    let value = this.get("lzChainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lzChainId(value: i32) {
    this.set("lzChainId", Value.fromI32(value));
  }

  get chainId(): i32 {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set chainId(value: i32) {
    this.set("chainId", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }
}

export class TOFToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TOFToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TOFToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TOFToken", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TOFToken | null {
    return changetype<TOFToken | null>(
      store.get_in_block("TOFToken", id.toHexString())
    );
  }

  static load(id: Bytes): TOFToken | null {
    return changetype<TOFToken | null>(store.get("TOFToken", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get underlyingToken(): Bytes | null {
    let value = this.get("underlyingToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set underlyingToken(value: Bytes | null) {
    if (!value) {
      this.unset("underlyingToken");
    } else {
      this.set("underlyingToken", Value.fromBytes(<Bytes>value));
    }
  }

  get remoteTOFTs(): Array<Bytes> {
    let value = this.get("remoteTOFTs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set remoteTOFTs(value: Array<Bytes>) {
    this.set("remoteTOFTs", Value.fromBytesArray(value));
  }

  get markets(): Array<Bytes> | null {
    let value = this.get("markets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set markets(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("markets");
    } else {
      this.set("markets", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get bigBangMarkets(): Array<Bytes> | null {
    let value = this.get("bigBangMarkets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set bigBangMarkets(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("bigBangMarkets");
    } else {
      this.set("bigBangMarkets", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class PaymentToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaymentToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PaymentToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PaymentToken", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PaymentToken | null {
    return changetype<PaymentToken | null>(
      store.get_in_block("PaymentToken", id.toHexString())
    );
  }

  static load(id: Bytes): PaymentToken | null {
    return changetype<PaymentToken | null>(
      store.get("PaymentToken", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get oracleAddress(): string {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set oracleAddress(value: string) {
    this.set("oracleAddress", Value.fromString(value));
  }

  get oracleData(): Bytes {
    let value = this.get("oracleData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oracleData(value: Bytes) {
    this.set("oracleData", Value.fromBytes(value));
  }
}

export class TapiocaOptionBroker extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TapiocaOptionBroker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TapiocaOptionBroker must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TapiocaOptionBroker", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TapiocaOptionBroker | null {
    return changetype<TapiocaOptionBroker | null>(
      store.get_in_block("TapiocaOptionBroker", id.toHexString())
    );
  }

  static load(id: Bytes): TapiocaOptionBroker | null {
    return changetype<TapiocaOptionBroker | null>(
      store.get("TapiocaOptionBroker", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get paymentTokens(): Array<Bytes> {
    let value = this.get("paymentTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set paymentTokens(value: Array<Bytes>) {
    this.set("paymentTokens", Value.fromBytesArray(value));
  }

  get epochDuration(): i32 {
    let value = this.get("epochDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochDuration(value: i32) {
    this.set("epochDuration", Value.fromI32(value));
  }

  get tap(): Bytes {
    let value = this.get("tap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tap(value: Bytes) {
    this.set("tap", Value.fromBytes(value));
  }
}

export class oTAP extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save oTAP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type oTAP must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("oTAP", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): oTAP | null {
    return changetype<oTAP | null>(
      store.get_in_block("oTAP", id.toHexString())
    );
  }

  static load(id: Bytes): oTAP | null {
    return changetype<oTAP | null>(store.get("oTAP", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}
